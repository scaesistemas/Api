using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace SCAE.Data.Migrations.ScaeApi
{
    /// <inheritdoc />
    public partial class Restart : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.EnsureSchema(
                name: "almoxarifado");

            migrationBuilder.EnsureSchema(
                name: "financeiro");

            migrationBuilder.EnsureSchema(
                name: "geral");

            migrationBuilder.EnsureSchema(
                name: "orcamentoobras");

            migrationBuilder.EnsureSchema(
                name: "empreendimento");

            migrationBuilder.EnsureSchema(
                name: "clientes");

            migrationBuilder.EnsureSchema(
                name: "projeto");

            migrationBuilder.EnsureSchema(
                name: "controleagua");

            migrationBuilder.EnsureSchema(
                name: "compras");

            migrationBuilder.EnsureSchema(
                name: "loteamento");

            migrationBuilder.CreateTable(
                name: "classecomposicao",
                schema: "orcamentoobras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "text", nullable: true),
                    Sigla = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_classecomposicao", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "colunafunil",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "text", nullable: true),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    Posicao = table.Column<int>(type: "integer", nullable: false),
                    ColunaFunilPaiId = table.Column<int>(type: "integer", nullable: true),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_colunafunil", x => x.Id);
                    table.ForeignKey(
                        name: "FK_colunafunil_colunafunil_ColunaFunilPaiId",
                        column: x => x.ColunaFunilPaiId,
                        principalSchema: "geral",
                        principalTable: "colunafunil",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "comoleadcontactou",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_comoleadcontactou", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "comoleadnosencontrou",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_comoleadnosencontrou", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "estado",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false),
                    Uf = table.Column<string>(type: "character varying(2)", maxLength: 2, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_estado", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "estadocivil",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_estadocivil", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "grauinteresse",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_grauinteresse", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "grauparentesco",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_grauparentesco", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "intervaloreajuste",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_intervaloreajuste", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "layoutcobranca",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_layoutcobranca", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "modeloorcamentoetapa",
                schema: "orcamentoobras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ModeloEtapaPaiId = table.Column<int>(type: "integer", nullable: true),
                    Titulo = table.Column<string>(type: "text", nullable: true),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    Quantidade = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_modeloorcamentoetapa", x => x.Id);
                    table.ForeignKey(
                        name: "FK_modeloorcamentoetapa_modeloorcamentoetapa_ModeloEtapaPaiId",
                        column: x => x.ModeloEtapaPaiId,
                        principalSchema: "orcamentoobras",
                        principalTable: "modeloorcamentoetapa",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "motivocancelamentoreserva",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_motivocancelamentoreserva", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "nacionalidade",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_nacionalidade", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "origemdados",
                schema: "orcamentoobras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_origemdados", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "origemdespesa",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_origemdespesa", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "origemlead",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(40)", maxLength: 40, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_origemlead", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "profissao",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(120)", maxLength: 120, nullable: false),
                    Codigo = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_profissao", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "reguacobranca",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_reguacobranca", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "retornobancario",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "text", nullable: true),
                    Documento = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_retornobancario", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "sexo",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_sexo", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "situacaocontrato",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_situacaocontrato", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "situacaocontratodigital",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_situacaocontratodigital", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "situacaodespesaparcela",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_situacaodespesaparcela", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "situacaoemailsignatario",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_situacaoemailsignatario", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "situacaofrete",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_situacaofrete", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "situacaoorcamento",
                schema: "compras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_situacaoorcamento", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "situacaopedido",
                schema: "compras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_situacaopedido", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "situacaopedidoitem",
                schema: "compras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_situacaopedidoitem", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "situacaoreceitaparcela",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_situacaoreceitaparcela", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "situacaoreserva",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_situacaoreserva", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "situacaounidade",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_situacaounidade", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tabelavalorconsumoagua",
                schema: "controleagua",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Nome = table.Column<string>(type: "text", nullable: true),
                    IsPrincipal = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tabelavalorconsumoagua", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoabastecimentoagua",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoabastecimentoagua", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoaditamento",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoaditamento", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoAmortizacao",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoAmortizacao", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoanoinicioreajuste",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoanoinicioreajuste", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoantecipacao",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoantecipacao", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoassinatura",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoassinatura", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoatendimento",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(40)", maxLength: 40, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoatendimento", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipocoletalixo",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipocoletalixo", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipocomposicao",
                schema: "orcamentoobras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "text", nullable: true),
                    Sigla = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipocomposicao", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipocondicaomoradia",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipocondicaomoradia", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipocontratodigital",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipocontratodigital", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TipoContratoFornecedor",
                schema: "projeto",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TipoContratoFornecedor", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipocontratoproduto",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipocontratoproduto", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipodespesa",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipodespesa", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoedificacaomoradia",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoedificacaomoradia", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoempreendimento",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(25)", maxLength: 25, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoempreendimento", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoempresa",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoempresa", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoenergiamoradia",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoenergiamoradia", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoescolaridade",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoescolaridade", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoesgotamentosanitario",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoesgotamentosanitario", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipogateway",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipogateway", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipogrupo",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipogrupo", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoimovel",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoimovel", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoindice",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoindice", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoinsumo",
                schema: "orcamentoobras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoinsumo", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipointervaloparcelas",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipointervaloparcelas", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipomesreajuste",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipomesreajuste", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipomoradia",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipomoradia", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipomoradianova",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipomoradianova", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipomovimentacao",
                schema: "almoxarifado",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipomovimentacao", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoOperacaocontrato",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoOperacaocontrato", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoOperacaofinanceira",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoOperacaofinanceira", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoorigem",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoorigem", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipopessoa",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipopessoa", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoplanopagamento",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoplanopagamento", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoprocessojudicial",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoprocessojudicial", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipoproduto",
                schema: "almoxarifado",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipoproduto", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tiporeceita",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tiporeceita", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tiporemessa",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tiporemessa", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tiporeserva",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tiporeserva", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tiposervico",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tiposervico", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tipounidade",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipounidade", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "usuario",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    AssinanteId = table.Column<int>(type: "integer", nullable: false),
                    Login = table.Column<string>(type: "character varying(120)", maxLength: 120, nullable: false),
                    Senha = table.Column<string>(type: "text", nullable: true),
                    Complementar_Nome = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Complementar_Celular = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Complementar_Telefone = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Complementar_Ramal = table.Column<string>(type: "character varying(10)", maxLength: 10, nullable: true),
                    Complementar_Email = table.Column<string>(type: "text", nullable: true),
                    DataHoraCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Foto = table.Column<byte[]>(type: "bytea", nullable: true),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false),
                    PrimeiroAcesso = table.Column<bool>(type: "boolean", nullable: false),
                    Token = table.Column<string>(type: "text", nullable: true),
                    TemaEscuro = table.Column<bool>(type: "boolean", nullable: false),
                    Permissoes = table.Column<int[]>(type: "integer[]", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_usuario", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "municipio",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false),
                    EstadoId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_municipio", x => x.Id);
                    table.ForeignKey(
                        name: "FK_municipio_estado_EstadoId",
                        column: x => x.EstadoId,
                        principalSchema: "geral",
                        principalTable: "estado",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "reguacobrancaetapa",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ReguaCobrancaId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false),
                    MinimoDiasVencido = table.Column<int>(type: "integer", nullable: false),
                    MaximoDiasVencido = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_reguacobrancaetapa", x => x.Id);
                    table.ForeignKey(
                        name: "FK_reguacobrancaetapa_reguacobranca_ReguaCobrancaId",
                        column: x => x.ReguaCobrancaId,
                        principalSchema: "financeiro",
                        principalTable: "reguacobranca",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "tabelavalorconsumoaguaitem",
                schema: "controleagua",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    TabelaId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "text", nullable: true),
                    FaixaConsumoInicial = table.Column<int>(type: "integer", nullable: false),
                    FaixaConsumoFinal = table.Column<int>(type: "integer", nullable: false),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false),
                    IsValorFixo = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tabelavalorconsumoaguaitem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_tabelavalorconsumoaguaitem_tabelavalorconsumoagua_TabelaId",
                        column: x => x.TabelaId,
                        principalSchema: "controleagua",
                        principalTable: "tabelavalorconsumoagua",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "modelocontratodigital",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "text", nullable: true),
                    TipoId = table.Column<int>(type: "integer", nullable: false),
                    Conteudo = table.Column<string>(type: "text", nullable: true),
                    IsPadraoSistema = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_modelocontratodigital", x => x.Id);
                    table.ForeignKey(
                        name: "FK_modelocontratodigital_tipocontratodigital_TipoId",
                        column: x => x.TipoId,
                        principalSchema: "clientes",
                        principalTable: "tipocontratodigital",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "indice",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    TipoIndiceId = table.Column<int>(type: "integer", nullable: false),
                    Dia = table.Column<byte>(type: "smallint", nullable: false),
                    Mes = table.Column<byte>(type: "smallint", nullable: false),
                    Ano = table.Column<int>(type: "integer", nullable: false),
                    Percentual = table.Column<decimal>(type: "numeric", nullable: false),
                    Mensal = table.Column<decimal>(type: "numeric", nullable: false),
                    AvulsoMensal = table.Column<decimal>(type: "numeric", nullable: false),
                    Acumulado = table.Column<decimal>(type: "numeric", nullable: false),
                    Executado = table.Column<bool>(type: "boolean", nullable: false),
                    AplicarIndiceNegativo = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_indice", x => x.Id);
                    table.ForeignKey(
                        name: "FK_indice_tipoindice_TipoIndiceId",
                        column: x => x.TipoIndiceId,
                        principalSchema: "financeiro",
                        principalTable: "tipoindice",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "tipocontrato",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false),
                    TipoOperacaoId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipocontrato", x => x.Id);
                    table.ForeignKey(
                        name: "FK_tipocontrato_tipoOperacaocontrato_TipoOperacaoId",
                        column: x => x.TipoOperacaoId,
                        principalSchema: "clientes",
                        principalTable: "tipoOperacaocontrato",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "lead",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "text", nullable: true),
                    Cpf = table.Column<string>(type: "text", nullable: true),
                    TelefonePrincipal = table.Column<string>(type: "text", nullable: true),
                    TelefoneSecundario = table.Column<string>(type: "text", nullable: true),
                    Email = table.Column<string>(type: "text", nullable: true),
                    Observacao = table.Column<string>(type: "text", nullable: true),
                    GrauInteresseId = table.Column<int>(type: "integer", nullable: true),
                    DataCadastro = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    OrigemId = table.Column<int>(type: "integer", nullable: false),
                    CorretorResponsavelId = table.Column<int>(type: "integer", nullable: true),
                    ComoLeadNosEncontrouId = table.Column<int>(type: "integer", nullable: false),
                    ComoLeadContactouId = table.Column<int>(type: "integer", nullable: false),
                    DataVinculoCorretor = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataInsercaoFunil = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataUltimaInteracao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    PosicaoFunil = table.Column<int>(type: "integer", nullable: false),
                    ColunaFunilId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_lead", x => x.Id);
                    table.ForeignKey(
                        name: "FK_lead_colunafunil_ColunaFunilId",
                        column: x => x.ColunaFunilId,
                        principalSchema: "geral",
                        principalTable: "colunafunil",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_lead_comoleadcontactou_ComoLeadContactouId",
                        column: x => x.ComoLeadContactouId,
                        principalSchema: "geral",
                        principalTable: "comoleadcontactou",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_lead_comoleadnosencontrou_ComoLeadNosEncontrouId",
                        column: x => x.ComoLeadNosEncontrouId,
                        principalSchema: "geral",
                        principalTable: "comoleadnosencontrou",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_lead_grauinteresse_GrauInteresseId",
                        column: x => x.GrauInteresseId,
                        principalSchema: "geral",
                        principalTable: "grauinteresse",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_lead_origemlead_OrigemId",
                        column: x => x.OrigemId,
                        principalSchema: "geral",
                        principalTable: "origemlead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_lead_usuario_CorretorResponsavelId",
                        column: x => x.CorretorResponsavelId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "qualidadeagua",
                schema: "controleagua",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    MaximoExigido_Turbidez = table.Column<decimal>(type: "numeric", nullable: true),
                    MaximoExigido_Cor = table.Column<decimal>(type: "numeric", nullable: true),
                    MaximoExigido_Cloro = table.Column<decimal>(type: "numeric", nullable: true),
                    MaximoExigido_PH = table.Column<decimal>(type: "numeric", nullable: true),
                    MaximoExigido_Fluoreto = table.Column<decimal>(type: "numeric", nullable: true),
                    AmostraRealizada_Turbidez = table.Column<decimal>(type: "numeric", nullable: true),
                    AmostraRealizada_Cor = table.Column<decimal>(type: "numeric", nullable: true),
                    AmostraRealizada_Cloro = table.Column<decimal>(type: "numeric", nullable: true),
                    AmostraRealizada_PH = table.Column<decimal>(type: "numeric", nullable: true),
                    AmostraRealizada_Fluoreto = table.Column<decimal>(type: "numeric", nullable: true),
                    Documento_Descricao = table.Column<string>(type: "text", nullable: true),
                    Documento_Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Documento_Tamanho = table.Column<decimal>(type: "numeric", nullable: true),
                    Documento_Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Documento_Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    Documento_DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Documento_UsuarioId = table.Column<int>(type: "integer", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_qualidadeagua", x => x.Id);
                    table.ForeignKey(
                        name: "FK_qualidadeagua_usuario_Documento_UsuarioId",
                        column: x => x.Documento_UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_qualidadeagua_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "empresa",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Responsavel_Sobrenome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Responsavel_CodigoCategoriaComerciante = table.Column<int>(type: "integer", nullable: true),
                    Responsavel_CategoriaComerciante = table.Column<string>(type: "character varying(80)", maxLength: 80, nullable: true),
                    Responsavel_CodigoZoop = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    Responsavel_Cpf = table.Column<string>(type: "character varying(14)", maxLength: 14, nullable: true),
                    Responsavel_Nome = table.Column<string>(type: "character varying(120)", maxLength: 120, nullable: true),
                    Responsavel_Telefone = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Responsavel_DataNascimento = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Responsavel_Email = table.Column<string>(type: "text", nullable: true),
                    Responsavel_Endereco_Cep = table.Column<string>(type: "character varying(9)", maxLength: 9, nullable: true),
                    Responsavel_Endereco_Logradouro = table.Column<string>(type: "character varying(80)", maxLength: 80, nullable: true),
                    Responsavel_Endereco_Numero = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Responsavel_Endereco_Complemento = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Responsavel_Endereco_Bairro = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Responsavel_Endereco_MunicipioId = table.Column<int>(type: "integer", nullable: true),
                    Responsavel_Endereco_EstadoId = table.Column<int>(type: "integer", nullable: true),
                    Documento_ComprovanteResidencial_CodigoZoop = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    Documento_ComprovanteResidencial_Descricao = table.Column<string>(type: "text", nullable: true),
                    Documento_ComprovanteResidencial_Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Documento_ComprovanteResidencial_Tamanho = table.Column<decimal>(type: "numeric", nullable: true),
                    Documento_ComprovanteResidencial_Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Documento_ComprovanteResidencial_Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    Documento_ComprovanteResidencial_DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Documento_ComprovanteResidencial_UsuarioId = table.Column<int>(type: "integer", nullable: true),
                    Documento_ComprovanteAtividade_CodigoZoop = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    Documento_ComprovanteAtividade_Descricao = table.Column<string>(type: "text", nullable: true),
                    Documento_ComprovanteAtividade_Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Documento_ComprovanteAtividade_Tamanho = table.Column<decimal>(type: "numeric", nullable: true),
                    Documento_ComprovanteAtividade_Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Documento_ComprovanteAtividade_Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    Documento_ComprovanteAtividade_DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Documento_ComprovanteAtividade_UsuarioId = table.Column<int>(type: "integer", nullable: true),
                    Documento_Identificacao_CodigoZoop = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    Documento_Identificacao_Descricao = table.Column<string>(type: "text", nullable: true),
                    Documento_Identificacao_Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Documento_Identificacao_Tamanho = table.Column<decimal>(type: "numeric", nullable: true),
                    Documento_Identificacao_Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Documento_Identificacao_Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    Documento_Identificacao_DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Documento_Identificacao_UsuarioId = table.Column<int>(type: "integer", nullable: true),
                    Documento_IdentificacaoCnpj_CodigoZoop = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    Documento_IdentificacaoCnpj_Descricao = table.Column<string>(type: "text", nullable: true),
                    Documento_IdentificacaoCnpj_Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Documento_IdentificacaoCnpj_Tamanho = table.Column<decimal>(type: "numeric", nullable: true),
                    Documento_IdentificacaoCnpj_Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Documento_IdentificacaoCnpj_Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    Documento_IdentificacaoCnpj_DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Documento_IdentificacaoCnpj_UsuarioId = table.Column<int>(type: "integer", nullable: true),
                    TipoEmpresaId = table.Column<int>(type: "integer", nullable: true),
                    Logo = table.Column<byte[]>(type: "bytea", nullable: true),
                    PessoaJuridica = table.Column<bool>(type: "boolean", nullable: false),
                    CpfCnpj = table.Column<string>(type: "character varying(18)", maxLength: 18, nullable: true),
                    Nome = table.Column<string>(type: "character varying(120)", maxLength: 120, nullable: false),
                    NomeFantasia = table.Column<string>(type: "character varying(120)", maxLength: 120, nullable: true),
                    InscricaoEstadual = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    InscricaoMunicipal = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Endereco_Cep = table.Column<string>(type: "character varying(9)", maxLength: 9, nullable: true),
                    Endereco_Logradouro = table.Column<string>(type: "character varying(80)", maxLength: 80, nullable: true),
                    Endereco_Numero = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Endereco_Complemento = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Endereco_Bairro = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Endereco_MunicipioId = table.Column<int>(type: "integer", nullable: true),
                    Endereco_EstadoId = table.Column<int>(type: "integer", nullable: true),
                    Telefone1 = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Telefone2 = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Email = table.Column<string>(type: "character varying(120)", maxLength: 120, nullable: true),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_empresa", x => x.Id);
                    table.ForeignKey(
                        name: "FK_empresa_estado_Endereco_EstadoId",
                        column: x => x.Endereco_EstadoId,
                        principalSchema: "geral",
                        principalTable: "estado",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_empresa_estado_Responsavel_Endereco_EstadoId",
                        column: x => x.Responsavel_Endereco_EstadoId,
                        principalSchema: "geral",
                        principalTable: "estado",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_empresa_municipio_Endereco_MunicipioId",
                        column: x => x.Endereco_MunicipioId,
                        principalSchema: "geral",
                        principalTable: "municipio",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_empresa_municipio_Responsavel_Endereco_MunicipioId",
                        column: x => x.Responsavel_Endereco_MunicipioId,
                        principalSchema: "geral",
                        principalTable: "municipio",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_empresa_tipoempresa_TipoEmpresaId",
                        column: x => x.TipoEmpresaId,
                        principalSchema: "geral",
                        principalTable: "tipoempresa",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_empresa_usuario_Documento_ComprovanteAtividade_UsuarioId",
                        column: x => x.Documento_ComprovanteAtividade_UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_empresa_usuario_Documento_ComprovanteResidencial_UsuarioId",
                        column: x => x.Documento_ComprovanteResidencial_UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_empresa_usuario_Documento_IdentificacaoCnpj_UsuarioId",
                        column: x => x.Documento_IdentificacaoCnpj_UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_empresa_usuario_Documento_Identificacao_UsuarioId",
                        column: x => x.Documento_Identificacao_UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "pessoaprefeitura",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    Moradia_PossuiDocumentacaoImovel = table.Column<bool>(type: "boolean", nullable: true),
                    Moradia_TipoDocumentoImovel = table.Column<string>(type: "text", nullable: true),
                    Moradia_NumeroComodos = table.Column<int>(type: "integer", nullable: true),
                    Moradia_NumeroFamiliasImovel = table.Column<int>(type: "integer", nullable: true),
                    Moradia_NumeroQuartos = table.Column<int>(type: "integer", nullable: true),
                    Moradia_NumeroBanheiros = table.Column<int>(type: "integer", nullable: true),
                    Moradia_SituacaoRiscoImovel = table.Column<bool>(type: "boolean", nullable: true),
                    Moradia_Endereco_Cep = table.Column<string>(type: "character varying(9)", maxLength: 9, nullable: true),
                    Moradia_Endereco_Logradouro = table.Column<string>(type: "character varying(80)", maxLength: 80, nullable: true),
                    Moradia_Endereco_Numero = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Moradia_Endereco_Complemento = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Moradia_Endereco_Bairro = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Moradia_Endereco_MunicipioId = table.Column<int>(type: "integer", nullable: true),
                    Moradia_Endereco_EstadoId = table.Column<int>(type: "integer", nullable: true),
                    Moradia_TipoMoradiaId = table.Column<int>(type: "integer", nullable: true),
                    Moradia_TipoAbastecimentoAguaId = table.Column<int>(type: "integer", nullable: true),
                    Moradia_TipoEnergiaMoradiaId = table.Column<int>(type: "integer", nullable: true),
                    Moradia_TipoColetaLixoId = table.Column<int>(type: "integer", nullable: true),
                    Moradia_TipoEsgotamentoSanitarioId = table.Column<int>(type: "integer", nullable: true),
                    Moradia_TipoCondicaoMoradiaId = table.Column<int>(type: "integer", nullable: true),
                    Moradia_TipoEdificacaoMoradiaId = table.Column<int>(type: "integer", nullable: true),
                    Moradia_PossuiEscoamentoSanitario = table.Column<bool>(type: "boolean", nullable: true),
                    Moradia_PossuiCaixaDagua = table.Column<bool>(type: "boolean", nullable: true),
                    Moradia_NumeroOcupacoes = table.Column<int>(type: "integer", nullable: true),
                    Moradia_IPTU = table.Column<string>(type: "text", nullable: true),
                    Moradia_FinalidadeImovel = table.Column<string>(type: "text", nullable: true),
                    Moradia_AreaMetroQuadrado = table.Column<decimal>(type: "numeric", nullable: true),
                    Moradia_DominioImovel = table.Column<string>(type: "text", nullable: true),
                    Moradia_Edificacao = table.Column<string>(type: "text", nullable: true),
                    Moradia_FormaAquisicao = table.Column<string>(type: "text", nullable: true),
                    Moradia_BeneficiarioRegularizacaoFundiaria = table.Column<bool>(type: "boolean", nullable: true),
                    CnpjCpf = table.Column<string>(type: "character varying(18)", maxLength: 18, nullable: false),
                    Telefone = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Celular = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Email = table.Column<string>(type: "character varying(120)", maxLength: 120, nullable: true),
                    DataCadastro = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    DataNascimento = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Rg = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    OrgaoExpedido = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    DataExpedicao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    SexoId = table.Column<int>(type: "integer", nullable: false),
                    Qualificacao_ProfissaoId = table.Column<int>(type: "integer", nullable: true),
                    Qualificacao_EscolaridadeId = table.Column<int>(type: "integer", nullable: true),
                    Qualificacao_NacionalidadeId = table.Column<int>(type: "integer", nullable: true),
                    Qualificacao_NaturalidadeId = table.Column<int>(type: "integer", nullable: true),
                    Qualificacao_EstadoCivilId = table.Column<int>(type: "integer", nullable: true),
                    Qualificacao_RendaBruta = table.Column<decimal>(type: "numeric", nullable: true),
                    Qualificacao_RendaLiquida = table.Column<decimal>(type: "numeric", nullable: true),
                    Qualificacao_Susep = table.Column<string>(type: "text", nullable: true),
                    Conjuge_Cpf = table.Column<string>(type: "character varying(14)", maxLength: 14, nullable: true),
                    Conjuge_Nome = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Conjuge_Rg = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Conjuge_DataEmissaoRg = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Conjuge_OrgaoExpedidor = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Conjuge_NomePai = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Conjuge_NomeMae = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Conjuge_RendaBruta = table.Column<decimal>(type: "numeric", nullable: true),
                    Conjuge_DataNascimento = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Conjuge_Dependente = table.Column<bool>(type: "boolean", nullable: true),
                    Conjuge_SexoId = table.Column<int>(type: "integer", nullable: true),
                    Conjuge_Telefone = table.Column<string>(type: "text", nullable: true),
                    Conjuge_Qualificacao_ProfissaoId = table.Column<int>(type: "integer", nullable: true),
                    Conjuge_Qualificacao_EscolaridadeId = table.Column<int>(type: "integer", nullable: true),
                    Conjuge_Qualificacao_NacionalidadeId = table.Column<int>(type: "integer", nullable: true),
                    Conjuge_Qualificacao_NaturalidadeId = table.Column<int>(type: "integer", nullable: true),
                    Conjuge_Qualificacao_EstadoCivilId = table.Column<int>(type: "integer", nullable: true),
                    Conjuge_Qualificacao_RendaBruta = table.Column<decimal>(type: "numeric", nullable: true),
                    Conjuge_Qualificacao_RendaLiquida = table.Column<decimal>(type: "numeric", nullable: true),
                    Conjuge_Qualificacao_Susep = table.Column<string>(type: "text", nullable: true),
                    Bancario_Banco = table.Column<string>(type: "character varying(40)", maxLength: 40, nullable: true),
                    Bancario_Agencia = table.Column<string>(type: "character varying(10)", maxLength: 10, nullable: true),
                    Bancario_AgenciaDigito = table.Column<string>(type: "character varying(2)", maxLength: 2, nullable: true),
                    Bancario_Conta = table.Column<string>(type: "character varying(10)", maxLength: 10, nullable: true),
                    Bancario_ContaDigito = table.Column<string>(type: "character varying(2)", maxLength: 2, nullable: true),
                    Bancario_Pix = table.Column<string>(type: "text", nullable: true),
                    FamiliarProblemaCronico = table.Column<int>(type: "integer", nullable: false),
                    BeneficioGov = table.Column<bool>(type: "boolean", nullable: false),
                    TipoBeneficioGov = table.Column<string>(type: "text", nullable: true),
                    IdososFamilia = table.Column<int>(type: "integer", nullable: false),
                    DisponibilidadeFinanciamento = table.Column<bool>(type: "boolean", nullable: false),
                    InteresseRegularizacaoFundiaria = table.Column<bool>(type: "boolean", nullable: false),
                    PessoaAtiva = table.Column<bool>(type: "boolean", nullable: false),
                    TipoMoradioNovaId = table.Column<int>(type: "integer", nullable: true),
                    TipoMoradiaNovaId = table.Column<int>(type: "integer", nullable: true),
                    PossuiVulnerabilidadeSocial = table.Column<bool>(type: "boolean", nullable: false),
                    ReceberInformacoesEmailCelular = table.Column<bool>(type: "boolean", nullable: false),
                    DivulgacaoProgramaSocial = table.Column<bool>(type: "boolean", nullable: false),
                    PossuiImovelExterno = table.Column<bool>(type: "boolean", nullable: false),
                    QuantImoveisExterno = table.Column<int>(type: "integer", nullable: false),
                    IdImportacaoPessoa = table.Column<int>(type: "integer", nullable: true),
                    RegistroImportacao_CodOrigem = table.Column<int>(type: "integer", nullable: true),
                    RegistroImportacao_DataImportacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    RegistroImportacao_NomePlanilha = table.Column<string>(type: "text", nullable: true),
                    possuiInteresseMoradiaNova = table.Column<bool>(type: "boolean", nullable: false),
                    PossuiPreferenciaPorLocalizacao = table.Column<bool>(type: "boolean", nullable: false),
                    PreferenciaPorLocalizacao = table.Column<string>(type: "text", nullable: true),
                    PossuiNecessidadesEspeciais = table.Column<bool>(type: "boolean", nullable: false),
                    NecessidadesEspeciais = table.Column<string>(type: "text", nullable: true),
                    PossuiInteresseMelhoriaHabitacional = table.Column<bool>(type: "boolean", nullable: false),
                    InteresseMelhoriaHabitacional = table.Column<string>(type: "text", nullable: true),
                    TamanhoDesejadoNovaMoradia = table.Column<decimal>(type: "numeric", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true),
                    CodigoOrigem = table.Column<int>(type: "integer", nullable: true),
                    DFourSignFolderId = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_pessoaprefeitura", x => x.Id);
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_estado_Moradia_Endereco_EstadoId",
                        column: x => x.Moradia_Endereco_EstadoId,
                        principalSchema: "geral",
                        principalTable: "estado",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_estadocivil_Conjuge_Qualificacao_EstadoCiv~",
                        column: x => x.Conjuge_Qualificacao_EstadoCivilId,
                        principalSchema: "geral",
                        principalTable: "estadocivil",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_estadocivil_Qualificacao_EstadoCivilId",
                        column: x => x.Qualificacao_EstadoCivilId,
                        principalSchema: "geral",
                        principalTable: "estadocivil",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_municipio_Conjuge_Qualificacao_Naturalidad~",
                        column: x => x.Conjuge_Qualificacao_NaturalidadeId,
                        principalSchema: "geral",
                        principalTable: "municipio",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_municipio_Moradia_Endereco_MunicipioId",
                        column: x => x.Moradia_Endereco_MunicipioId,
                        principalSchema: "geral",
                        principalTable: "municipio",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_municipio_Qualificacao_NaturalidadeId",
                        column: x => x.Qualificacao_NaturalidadeId,
                        principalSchema: "geral",
                        principalTable: "municipio",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_nacionalidade_Conjuge_Qualificacao_Naciona~",
                        column: x => x.Conjuge_Qualificacao_NacionalidadeId,
                        principalSchema: "geral",
                        principalTable: "nacionalidade",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_nacionalidade_Qualificacao_NacionalidadeId",
                        column: x => x.Qualificacao_NacionalidadeId,
                        principalSchema: "geral",
                        principalTable: "nacionalidade",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_profissao_Conjuge_Qualificacao_ProfissaoId",
                        column: x => x.Conjuge_Qualificacao_ProfissaoId,
                        principalSchema: "geral",
                        principalTable: "profissao",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_profissao_Qualificacao_ProfissaoId",
                        column: x => x.Qualificacao_ProfissaoId,
                        principalSchema: "geral",
                        principalTable: "profissao",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_sexo_Conjuge_SexoId",
                        column: x => x.Conjuge_SexoId,
                        principalSchema: "geral",
                        principalTable: "sexo",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_sexo_SexoId",
                        column: x => x.SexoId,
                        principalSchema: "geral",
                        principalTable: "sexo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_tipoabastecimentoagua_Moradia_TipoAbasteci~",
                        column: x => x.Moradia_TipoAbastecimentoAguaId,
                        principalSchema: "geral",
                        principalTable: "tipoabastecimentoagua",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_tipocoletalixo_Moradia_TipoColetaLixoId",
                        column: x => x.Moradia_TipoColetaLixoId,
                        principalSchema: "geral",
                        principalTable: "tipocoletalixo",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_tipocondicaomoradia_Moradia_TipoCondicaoMo~",
                        column: x => x.Moradia_TipoCondicaoMoradiaId,
                        principalSchema: "geral",
                        principalTable: "tipocondicaomoradia",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_tipoedificacaomoradia_Moradia_TipoEdificac~",
                        column: x => x.Moradia_TipoEdificacaoMoradiaId,
                        principalSchema: "geral",
                        principalTable: "tipoedificacaomoradia",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_tipoenergiamoradia_Moradia_TipoEnergiaMora~",
                        column: x => x.Moradia_TipoEnergiaMoradiaId,
                        principalSchema: "geral",
                        principalTable: "tipoenergiamoradia",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_tipoescolaridade_Conjuge_Qualificacao_Esco~",
                        column: x => x.Conjuge_Qualificacao_EscolaridadeId,
                        principalSchema: "geral",
                        principalTable: "tipoescolaridade",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_tipoescolaridade_Qualificacao_Escolaridade~",
                        column: x => x.Qualificacao_EscolaridadeId,
                        principalSchema: "geral",
                        principalTable: "tipoescolaridade",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_tipoesgotamentosanitario_Moradia_TipoEsgot~",
                        column: x => x.Moradia_TipoEsgotamentoSanitarioId,
                        principalSchema: "geral",
                        principalTable: "tipoesgotamentosanitario",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_tipomoradia_Moradia_TipoMoradiaId",
                        column: x => x.Moradia_TipoMoradiaId,
                        principalSchema: "geral",
                        principalTable: "tipomoradia",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_tipomoradianova_TipoMoradiaNovaId",
                        column: x => x.TipoMoradiaNovaId,
                        principalSchema: "geral",
                        principalTable: "tipomoradianova",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeitura_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "atendimento",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    TipoAtendimentoId = table.Column<int>(type: "integer", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    LeadId = table.Column<int>(type: "integer", nullable: false),
                    CorretorId = table.Column<int>(type: "integer", nullable: false),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Titulo = table.Column<string>(type: "text", nullable: true),
                    DataAgendamento = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataConclusao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Realizado = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_atendimento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_atendimento_lead_LeadId",
                        column: x => x.LeadId,
                        principalSchema: "geral",
                        principalTable: "lead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_atendimento_tipoatendimento_TipoAtendimentoId",
                        column: x => x.TipoAtendimentoId,
                        principalSchema: "geral",
                        principalTable: "tipoatendimento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_atendimento_usuario_CorretorId",
                        column: x => x.CorretorId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "historicolead",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    Data = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    LeadId = table.Column<int>(type: "integer", nullable: false),
                    ColunaFunilId = table.Column<int>(type: "integer", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_historicolead", x => x.Id);
                    table.ForeignKey(
                        name: "FK_historicolead_colunafunil_ColunaFunilId",
                        column: x => x.ColunaFunilId,
                        principalSchema: "geral",
                        principalTable: "colunafunil",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_historicolead_lead_LeadId",
                        column: x => x.LeadId,
                        principalSchema: "geral",
                        principalTable: "lead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_historicolead_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "banco",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Codigo = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false),
                    Site = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_banco", x => x.Id);
                    table.ForeignKey(
                        name: "FK_banco_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "cartorio",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(25)", maxLength: 25, nullable: false),
                    MunicipioId = table.Column<int>(type: "integer", nullable: false),
                    EstadoId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_cartorio", x => x.Id);
                    table.ForeignKey(
                        name: "FK_cartorio_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_cartorio_estado_EstadoId",
                        column: x => x.EstadoId,
                        principalSchema: "geral",
                        principalTable: "estado",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_cartorio_municipio_MunicipioId",
                        column: x => x.MunicipioId,
                        principalSchema: "geral",
                        principalTable: "municipio",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "centrodecusto",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Codigo = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false),
                    CentroCustoPaiId = table.Column<int>(type: "integer", nullable: true),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_centrodecusto", x => x.Id);
                    table.ForeignKey(
                        name: "FK_centrodecusto_centrodecusto_CentroCustoPaiId",
                        column: x => x.CentroCustoPaiId,
                        principalSchema: "financeiro",
                        principalTable: "centrodecusto",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_centrodecusto_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "condicaopagamento",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false),
                    Parcelas = table.Column<int>(type: "integer", nullable: false),
                    Intervalo = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_condicaopagamento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_condicaopagamento_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "contagerencial",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Codigo = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false),
                    Tipo = table.Column<string>(type: "char(1)", nullable: false),
                    ContaGerencialPaiId = table.Column<int>(type: "integer", nullable: true),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_contagerencial", x => x.Id);
                    table.ForeignKey(
                        name: "FK_contagerencial_contagerencial_ContaGerencialPaiId",
                        column: x => x.ContaGerencialPaiId,
                        principalSchema: "financeiro",
                        principalTable: "contagerencial",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_contagerencial_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "empresaarquivo",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_empresaarquivo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_empresaarquivo_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_empresaarquivo_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "empresagateway",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    TipoGatewayId = table.Column<int>(type: "integer", nullable: false),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    CodigoIntegracao = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_empresagateway", x => x.Id);
                    table.ForeignKey(
                        name: "FK_empresagateway_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_empresagateway_tipogateway_TipoGatewayId",
                        column: x => x.TipoGatewayId,
                        principalSchema: "financeiro",
                        principalTable: "tipogateway",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "etapa",
                schema: "projeto",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Codigo = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false),
                    EtapaPaiId = table.Column<int>(type: "integer", nullable: true),
                    TipoEmpreendimentoId = table.Column<int>(type: "integer", nullable: true),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_etapa", x => x.Id);
                    table.ForeignKey(
                        name: "FK_etapa_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_etapa_etapa_EtapaPaiId",
                        column: x => x.EtapaPaiId,
                        principalSchema: "projeto",
                        principalTable: "etapa",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_etapa_tipoempreendimento_TipoEmpreendimentoId",
                        column: x => x.TipoEmpreendimentoId,
                        principalSchema: "empreendimento",
                        principalTable: "tipoempreendimento",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "formapagamento",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_formapagamento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_formapagamento_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "grupoproduto",
                schema: "almoxarifado",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(120)", maxLength: 120, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_grupoproduto", x => x.Id);
                    table.ForeignKey(
                        name: "FK_grupoproduto_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "log",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    DataHora = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: false),
                    Usuario = table.Column<string>(type: "text", nullable: false),
                    RegistroId = table.Column<int>(type: "integer", nullable: false),
                    Controle = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_log", x => x.Id);
                    table.ForeignKey(
                        name: "FK_log_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "orcamento",
                schema: "compras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    ClassificacaoId = table.Column<int>(type: "integer", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    SituacaoId = table.Column<int>(type: "integer", nullable: false),
                    Aprovacao_Aprovado = table.Column<bool>(type: "boolean", nullable: true),
                    Aprovacao_DataHora = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Aprovacao_UsuarioId = table.Column<int>(type: "integer", nullable: true),
                    Observacao = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_orcamento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_orcamento_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_orcamento_situacaoorcamento_SituacaoId",
                        column: x => x.SituacaoId,
                        principalSchema: "compras",
                        principalTable: "situacaoorcamento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_orcamento_tipoproduto_ClassificacaoId",
                        column: x => x.ClassificacaoId,
                        principalSchema: "almoxarifado",
                        principalTable: "tipoproduto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "pessoa",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    JuridicaResponsavel_Nome = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    JuridicaResponsavel_CnpjCpf = table.Column<string>(type: "character varying(18)", maxLength: 18, nullable: true),
                    JuridicaResponsavel_Rg = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    JuridicaResponsavel_OrgaoExpedido = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    JuridicaResponsavel_Telefone = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    JuridicaResponsavel_Email = table.Column<string>(type: "character varying(120)", maxLength: 120, nullable: true),
                    JuridicaResponsavel_DataNascimento = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    JuridicaResponsavel_DataExpedicao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    JuridicaResponsavel_SexoId = table.Column<int>(type: "integer", nullable: true),
                    JuridicaResponsavel_Qualificacao_ProfissaoId = table.Column<int>(type: "integer", nullable: true),
                    JuridicaResponsavel_Qualificacao_EscolaridadeId = table.Column<int>(type: "integer", nullable: true),
                    JuridicaResponsavel_Qualificacao_NacionalidadeId = table.Column<int>(type: "integer", nullable: true),
                    JuridicaResponsavel_Qualificacao_NaturalidadeId = table.Column<int>(type: "integer", nullable: true),
                    JuridicaResponsavel_Qualificacao_EstadoCivilId = table.Column<int>(type: "integer", nullable: true),
                    JuridicaResponsavel_Qualificacao_RendaBruta = table.Column<decimal>(type: "numeric", nullable: true),
                    JuridicaResponsavel_Qualificacao_RendaLiquida = table.Column<decimal>(type: "numeric", nullable: true),
                    JuridicaResponsavel_Qualificacao_Susep = table.Column<string>(type: "text", nullable: true),
                    JuridicaResponsavel_Endereco_Cep = table.Column<string>(type: "character varying(9)", maxLength: 9, nullable: true),
                    JuridicaResponsavel_Endereco_Logradouro = table.Column<string>(type: "character varying(80)", maxLength: 80, nullable: true),
                    JuridicaResponsavel_Endereco_Numero = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    JuridicaResponsavel_Endereco_Complemento = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    JuridicaResponsavel_Endereco_Bairro = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    JuridicaResponsavel_Endereco_MunicipioId = table.Column<int>(type: "integer", nullable: true),
                    JuridicaResponsavel_Endereco_EstadoId = table.Column<int>(type: "integer", nullable: true),
                    Nome = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    Fantasia = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    TipoPessoaId = table.Column<int>(type: "integer", nullable: false),
                    CnpjCpf = table.Column<string>(type: "character varying(18)", maxLength: 18, nullable: false),
                    InscricaoMunicipal = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    InscricaoEstadual = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Endereco_Cep = table.Column<string>(type: "character varying(9)", maxLength: 9, nullable: true),
                    Endereco_Logradouro = table.Column<string>(type: "character varying(80)", maxLength: 80, nullable: true),
                    Endereco_Numero = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Endereco_Complemento = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Endereco_Bairro = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Endereco_MunicipioId = table.Column<int>(type: "integer", nullable: true),
                    Endereco_EstadoId = table.Column<int>(type: "integer", nullable: true),
                    Telefone = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Email = table.Column<string>(type: "character varying(120)", maxLength: 120, nullable: true),
                    DataCadastro = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    DataNascimento = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Rg = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    OrgaoExpedido = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    DataExpedicao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    SexoId = table.Column<int>(type: "integer", nullable: false),
                    Creci = table.Column<string>(type: "text", nullable: true),
                    Qualificacao_ProfissaoId = table.Column<int>(type: "integer", nullable: true),
                    Qualificacao_EscolaridadeId = table.Column<int>(type: "integer", nullable: true),
                    Qualificacao_NacionalidadeId = table.Column<int>(type: "integer", nullable: true),
                    Qualificacao_NaturalidadeId = table.Column<int>(type: "integer", nullable: true),
                    Qualificacao_EstadoCivilId = table.Column<int>(type: "integer", nullable: true),
                    Qualificacao_RendaBruta = table.Column<decimal>(type: "numeric", nullable: true),
                    Qualificacao_RendaLiquida = table.Column<decimal>(type: "numeric", nullable: true),
                    Qualificacao_Susep = table.Column<string>(type: "text", nullable: true),
                    Conjuge_Cpf = table.Column<string>(type: "character varying(14)", maxLength: 14, nullable: true),
                    Conjuge_Nome = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Conjuge_Rg = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Conjuge_DataEmissaoRg = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Conjuge_OrgaoExpedidor = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Conjuge_NomePai = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Conjuge_NomeMae = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Conjuge_RendaBruta = table.Column<decimal>(type: "numeric", nullable: true),
                    Conjuge_DataNascimento = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Conjuge_Dependente = table.Column<bool>(type: "boolean", nullable: true),
                    Conjuge_SexoId = table.Column<int>(type: "integer", nullable: true),
                    Conjuge_Telefone = table.Column<string>(type: "text", nullable: true),
                    Conjuge_Qualificacao_ProfissaoId = table.Column<int>(type: "integer", nullable: true),
                    Conjuge_Qualificacao_EscolaridadeId = table.Column<int>(type: "integer", nullable: true),
                    Conjuge_Qualificacao_NacionalidadeId = table.Column<int>(type: "integer", nullable: true),
                    Conjuge_Qualificacao_NaturalidadeId = table.Column<int>(type: "integer", nullable: true),
                    Conjuge_Qualificacao_EstadoCivilId = table.Column<int>(type: "integer", nullable: true),
                    Conjuge_Qualificacao_RendaBruta = table.Column<decimal>(type: "numeric", nullable: true),
                    Conjuge_Qualificacao_RendaLiquida = table.Column<decimal>(type: "numeric", nullable: true),
                    Conjuge_Qualificacao_Susep = table.Column<string>(type: "text", nullable: true),
                    Bancario_Banco = table.Column<string>(type: "character varying(40)", maxLength: 40, nullable: true),
                    Bancario_Agencia = table.Column<string>(type: "character varying(10)", maxLength: 10, nullable: true),
                    Bancario_AgenciaDigito = table.Column<string>(type: "character varying(2)", maxLength: 2, nullable: true),
                    Bancario_Conta = table.Column<string>(type: "character varying(10)", maxLength: 10, nullable: true),
                    Bancario_ContaDigito = table.Column<string>(type: "character varying(2)", maxLength: 2, nullable: true),
                    Bancario_Pix = table.Column<string>(type: "text", nullable: true),
                    FamiliarProblemaCronico = table.Column<int>(type: "integer", nullable: false),
                    BeneficioGov = table.Column<bool>(type: "boolean", nullable: false),
                    IdososFamilia = table.Column<int>(type: "integer", nullable: false),
                    IsCliente = table.Column<bool>(type: "boolean", nullable: false),
                    IsFornecedor = table.Column<bool>(type: "boolean", nullable: false),
                    IsProprietario = table.Column<bool>(type: "boolean", nullable: false),
                    IsCorretor = table.Column<bool>(type: "boolean", nullable: false),
                    IsSeguradora = table.Column<bool>(type: "boolean", nullable: false),
                    IsAdministradora = table.Column<bool>(type: "boolean", nullable: false),
                    IsConstrutora = table.Column<bool>(type: "boolean", nullable: false),
                    IsTransportadora = table.Column<bool>(type: "boolean", nullable: false),
                    CodigoZoop = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true),
                    CodigoOrigem = table.Column<int>(type: "integer", nullable: true),
                    DFourSignFolderId = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_pessoa", x => x.Id);
                    table.ForeignKey(
                        name: "FK_pessoa_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pessoa_estado_Endereco_EstadoId",
                        column: x => x.Endereco_EstadoId,
                        principalSchema: "geral",
                        principalTable: "estado",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_estado_JuridicaResponsavel_Endereco_EstadoId",
                        column: x => x.JuridicaResponsavel_Endereco_EstadoId,
                        principalSchema: "geral",
                        principalTable: "estado",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_estadocivil_Conjuge_Qualificacao_EstadoCivilId",
                        column: x => x.Conjuge_Qualificacao_EstadoCivilId,
                        principalSchema: "geral",
                        principalTable: "estadocivil",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "FK_pessoa_estadocivil_JuridicaResponsavel_Qualificacao_EstadoC~",
                        column: x => x.JuridicaResponsavel_Qualificacao_EstadoCivilId,
                        principalSchema: "geral",
                        principalTable: "estadocivil",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_estadocivil_Qualificacao_EstadoCivilId",
                        column: x => x.Qualificacao_EstadoCivilId,
                        principalSchema: "geral",
                        principalTable: "estadocivil",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "FK_pessoa_municipio_Conjuge_Qualificacao_NaturalidadeId",
                        column: x => x.Conjuge_Qualificacao_NaturalidadeId,
                        principalSchema: "geral",
                        principalTable: "municipio",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_municipio_Endereco_MunicipioId",
                        column: x => x.Endereco_MunicipioId,
                        principalSchema: "geral",
                        principalTable: "municipio",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_municipio_JuridicaResponsavel_Endereco_MunicipioId",
                        column: x => x.JuridicaResponsavel_Endereco_MunicipioId,
                        principalSchema: "geral",
                        principalTable: "municipio",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_municipio_JuridicaResponsavel_Qualificacao_Naturalid~",
                        column: x => x.JuridicaResponsavel_Qualificacao_NaturalidadeId,
                        principalSchema: "geral",
                        principalTable: "municipio",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_municipio_Qualificacao_NaturalidadeId",
                        column: x => x.Qualificacao_NaturalidadeId,
                        principalSchema: "geral",
                        principalTable: "municipio",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_nacionalidade_Conjuge_Qualificacao_NacionalidadeId",
                        column: x => x.Conjuge_Qualificacao_NacionalidadeId,
                        principalSchema: "geral",
                        principalTable: "nacionalidade",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_nacionalidade_JuridicaResponsavel_Qualificacao_Nacio~",
                        column: x => x.JuridicaResponsavel_Qualificacao_NacionalidadeId,
                        principalSchema: "geral",
                        principalTable: "nacionalidade",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_nacionalidade_Qualificacao_NacionalidadeId",
                        column: x => x.Qualificacao_NacionalidadeId,
                        principalSchema: "geral",
                        principalTable: "nacionalidade",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_profissao_Conjuge_Qualificacao_ProfissaoId",
                        column: x => x.Conjuge_Qualificacao_ProfissaoId,
                        principalSchema: "geral",
                        principalTable: "profissao",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_profissao_JuridicaResponsavel_Qualificacao_Profissao~",
                        column: x => x.JuridicaResponsavel_Qualificacao_ProfissaoId,
                        principalSchema: "geral",
                        principalTable: "profissao",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_profissao_Qualificacao_ProfissaoId",
                        column: x => x.Qualificacao_ProfissaoId,
                        principalSchema: "geral",
                        principalTable: "profissao",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_sexo_Conjuge_SexoId",
                        column: x => x.Conjuge_SexoId,
                        principalSchema: "geral",
                        principalTable: "sexo",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_sexo_JuridicaResponsavel_SexoId",
                        column: x => x.JuridicaResponsavel_SexoId,
                        principalSchema: "geral",
                        principalTable: "sexo",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_sexo_SexoId",
                        column: x => x.SexoId,
                        principalSchema: "geral",
                        principalTable: "sexo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pessoa_tipoescolaridade_Conjuge_Qualificacao_EscolaridadeId",
                        column: x => x.Conjuge_Qualificacao_EscolaridadeId,
                        principalSchema: "geral",
                        principalTable: "tipoescolaridade",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_tipoescolaridade_JuridicaResponsavel_Qualificacao_Es~",
                        column: x => x.JuridicaResponsavel_Qualificacao_EscolaridadeId,
                        principalSchema: "geral",
                        principalTable: "tipoescolaridade",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_tipoescolaridade_Qualificacao_EscolaridadeId",
                        column: x => x.Qualificacao_EscolaridadeId,
                        principalSchema: "geral",
                        principalTable: "tipoescolaridade",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoa_tipopessoa_TipoPessoaId",
                        column: x => x.TipoPessoaId,
                        principalSchema: "geral",
                        principalTable: "tipopessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pessoa_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "seguradora",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    Fantasia = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    TipoPessoaId = table.Column<int>(type: "integer", nullable: false),
                    CnpjCpf = table.Column<string>(type: "character varying(18)", maxLength: 18, nullable: false),
                    InscricaoMunicipal = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    InscricaoEstadual = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Susep = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    CodigoSeguradora = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Endereco_Cep = table.Column<string>(type: "character varying(9)", maxLength: 9, nullable: true),
                    Endereco_Logradouro = table.Column<string>(type: "character varying(80)", maxLength: 80, nullable: true),
                    Endereco_Numero = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Endereco_Complemento = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Endereco_Bairro = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Endereco_MunicipioId = table.Column<int>(type: "integer", nullable: true),
                    Endereco_EstadoId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_seguradora", x => x.Id);
                    table.ForeignKey(
                        name: "FK_seguradora_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_seguradora_estado_Endereco_EstadoId",
                        column: x => x.Endereco_EstadoId,
                        principalSchema: "geral",
                        principalTable: "estado",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_seguradora_municipio_Endereco_MunicipioId",
                        column: x => x.Endereco_MunicipioId,
                        principalSchema: "geral",
                        principalTable: "municipio",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_seguradora_tipopessoa_TipoPessoaId",
                        column: x => x.TipoPessoaId,
                        principalSchema: "geral",
                        principalTable: "tipopessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "tipodocumento",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tipodocumento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_tipodocumento_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "unidademedida",
                schema: "almoxarifado",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: false),
                    Sigla = table.Column<string>(type: "character varying(6)", maxLength: 6, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_unidademedida", x => x.Id);
                    table.ForeignKey(
                        name: "FK_unidademedida_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "vicio",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "text", nullable: true),
                    TipoUnidadeId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_vicio", x => x.Id);
                    table.ForeignKey(
                        name: "FK_vicio_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_vicio_tipounidade_TipoUnidadeId",
                        column: x => x.TipoUnidadeId,
                        principalSchema: "empreendimento",
                        principalTable: "tipounidade",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "pessoaprefeituracontato",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    PessoaPrefeituraId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Celular = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Telefone = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Ramal = table.Column<string>(type: "character varying(10)", maxLength: 10, nullable: true),
                    Email = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_pessoaprefeituracontato", x => x.Id);
                    table.ForeignKey(
                        name: "FK_pessoaprefeituracontato_pessoaprefeitura_PessoaPrefeituraId",
                        column: x => x.PessoaPrefeituraId,
                        principalSchema: "geral",
                        principalTable: "pessoaprefeitura",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "pessoaprefeituradocumento",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    PessoaPrefeituraId = table.Column<int>(type: "integer", nullable: false),
                    TrocaEndereco = table.Column<bool>(type: "boolean", nullable: false),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_pessoaprefeituradocumento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_pessoaprefeituradocumento_pessoaprefeitura_PessoaPrefeitura~",
                        column: x => x.PessoaPrefeituraId,
                        principalSchema: "geral",
                        principalTable: "pessoaprefeitura",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pessoaprefeituradocumento_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "pessoaprefeiturafamiliar",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    PessoaPrefeituraId = table.Column<int>(type: "integer", nullable: true),
                    EscolaridadeId = table.Column<int>(type: "integer", nullable: true),
                    GrauParentescoId = table.Column<int>(type: "integer", nullable: false),
                    Cpf = table.Column<string>(type: "character varying(14)", maxLength: 14, nullable: true),
                    Nome = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Rg = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    OrgaoExpedidor = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Telefone = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    RendaBruta = table.Column<decimal>(type: "numeric", nullable: false),
                    RendaLiquida = table.Column<decimal>(type: "numeric", nullable: false),
                    DataNascimento = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Dependente = table.Column<bool>(type: "boolean", nullable: true),
                    ProfissaoId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_pessoaprefeiturafamiliar", x => x.Id);
                    table.ForeignKey(
                        name: "FK_pessoaprefeiturafamiliar_grauparentesco_GrauParentescoId",
                        column: x => x.GrauParentescoId,
                        principalSchema: "geral",
                        principalTable: "grauparentesco",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pessoaprefeiturafamiliar_pessoaprefeitura_PessoaPrefeituraId",
                        column: x => x.PessoaPrefeituraId,
                        principalSchema: "geral",
                        principalTable: "pessoaprefeitura",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeiturafamiliar_profissao_ProfissaoId",
                        column: x => x.ProfissaoId,
                        principalSchema: "geral",
                        principalTable: "profissao",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoaprefeiturafamiliar_tipoescolaridade_EscolaridadeId",
                        column: x => x.EscolaridadeId,
                        principalSchema: "geral",
                        principalTable: "tipoescolaridade",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "pessoaprefeituragateway",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    TipoGatewayId = table.Column<int>(type: "integer", nullable: false),
                    PessoaPrefeituraId = table.Column<int>(type: "integer", nullable: false),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    CodigoIntegracao = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_pessoaprefeituragateway", x => x.Id);
                    table.ForeignKey(
                        name: "FK_pessoaprefeituragateway_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pessoaprefeituragateway_pessoaprefeitura_PessoaPrefeituraId",
                        column: x => x.PessoaPrefeituraId,
                        principalSchema: "geral",
                        principalTable: "pessoaprefeitura",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pessoaprefeituragateway_tipogateway_TipoGatewayId",
                        column: x => x.TipoGatewayId,
                        principalSchema: "financeiro",
                        principalTable: "tipogateway",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "contacorrente",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "text", nullable: false),
                    GeraBoleto = table.Column<bool>(type: "boolean", nullable: false),
                    BancoId = table.Column<int>(type: "integer", nullable: false),
                    NumeroAgencia = table.Column<string>(type: "character varying(5)", maxLength: 5, nullable: true),
                    DigitoAgencia = table.Column<string>(type: "character varying(2)", maxLength: 2, nullable: true),
                    NumeroConta = table.Column<string>(type: "character varying(10)", maxLength: 10, nullable: true),
                    DigitoConta = table.Column<string>(type: "character varying(2)", maxLength: 2, nullable: true),
                    CodigoCedente = table.Column<string>(type: "character varying(10)", maxLength: 10, nullable: true),
                    DigitoCedente = table.Column<string>(type: "character varying(1)", maxLength: 1, nullable: true),
                    Carteira = table.Column<string>(type: "character varying(5)", maxLength: 5, nullable: true),
                    DigitoCarteira = table.Column<string>(type: "character varying(5)", maxLength: 5, nullable: true),
                    SaldoInicial = table.Column<decimal>(type: "numeric", nullable: false),
                    Saldo = table.Column<decimal>(type: "numeric", nullable: false),
                    ClienteDesde = table.Column<string>(type: "character varying(4)", maxLength: 4, nullable: true),
                    BoletoSequencia = table.Column<long>(type: "bigint", nullable: false),
                    RemessaSequencia = table.Column<int>(type: "integer", nullable: false),
                    EncargoFinanceiro_JurosDia = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_Multa = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DescontoVencimento = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DiasDescontoVencimento = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_IsDescontoVencimentoPercentual = table.Column<bool>(type: "boolean", nullable: true),
                    EncargoFinanceiro_DescontoAntecipacao = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_CorrecaoMonetaria = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DiasAposVencimentoNaoReceber = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_DiasProtesto = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_DiasNegativacao = table.Column<int>(type: "integer", nullable: true),
                    Instrucao1 = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Instrucao2 = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Instrucao3 = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    IsPoupanca = table.Column<bool>(type: "boolean", nullable: false),
                    CodigoZoop = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    CodigoTokenZoop = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    CodigoAssociacaoZoop = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    NomeCertificado = table.Column<string>(type: "text", nullable: true),
                    SenhaCertificado = table.Column<string>(type: "text", nullable: true),
                    DataUploadCertificado = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    ClientId = table.Column<string>(type: "text", nullable: true),
                    ClientSecret = table.Column<string>(type: "text", nullable: true),
                    TokenAcesso = table.Column<string>(type: "text", nullable: true),
                    Posto = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_contacorrente", x => x.Id);
                    table.ForeignKey(
                        name: "FK_contacorrente_banco_BancoId",
                        column: x => x.BancoId,
                        principalSchema: "financeiro",
                        principalTable: "banco",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contacorrente_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "orcamentodocumento",
                schema: "compras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    OrcamentoId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_orcamentodocumento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_orcamentodocumento_orcamento_OrcamentoId",
                        column: x => x.OrcamentoId,
                        principalSchema: "compras",
                        principalTable: "orcamento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_orcamentodocumento_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "orcamentofornecedor",
                schema: "compras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    OrcamentoId = table.Column<int>(type: "integer", nullable: false),
                    FornecedorId = table.Column<int>(type: "integer", nullable: false),
                    FormaPagamentoId = table.Column<int>(type: "integer", nullable: false),
                    PrazoEntregaDias = table.Column<int>(type: "integer", nullable: false),
                    ValidadeDias = table.Column<int>(type: "integer", nullable: false),
                    Frete = table.Column<decimal>(type: "numeric", nullable: false),
                    Aprovado = table.Column<bool>(type: "boolean", nullable: false),
                    Observacao = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_orcamentofornecedor", x => x.Id);
                    table.ForeignKey(
                        name: "FK_orcamentofornecedor_formapagamento_FormaPagamentoId",
                        column: x => x.FormaPagamentoId,
                        principalSchema: "financeiro",
                        principalTable: "formapagamento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_orcamentofornecedor_orcamento_OrcamentoId",
                        column: x => x.OrcamentoId,
                        principalSchema: "compras",
                        principalTable: "orcamento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_orcamentofornecedor_pessoa_FornecedorId",
                        column: x => x.FornecedorId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "pessoacontato",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    PessoaId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Celular = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Telefone = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Ramal = table.Column<string>(type: "character varying(10)", maxLength: 10, nullable: true),
                    Email = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_pessoacontato", x => x.Id);
                    table.ForeignKey(
                        name: "FK_pessoacontato_pessoa_PessoaId",
                        column: x => x.PessoaId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "pessoadocumento",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    PessoaId = table.Column<int>(type: "integer", nullable: false),
                    TrocaEndereco = table.Column<bool>(type: "boolean", nullable: false),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_pessoadocumento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_pessoadocumento_pessoa_PessoaId",
                        column: x => x.PessoaId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pessoadocumento_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "pessoafamiliar",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    PessoaId = table.Column<int>(type: "integer", nullable: false),
                    EscolaridadeId = table.Column<int>(type: "integer", nullable: true),
                    GrauParentescoId = table.Column<int>(type: "integer", nullable: false),
                    Cpf = table.Column<string>(type: "character varying(14)", maxLength: 14, nullable: true),
                    Nome = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Rg = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    OrgaoExpedidor = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Telefone = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    RendaBruta = table.Column<decimal>(type: "numeric", nullable: false),
                    RendaLiquida = table.Column<decimal>(type: "numeric", nullable: false),
                    DataNascimento = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Dependente = table.Column<bool>(type: "boolean", nullable: true),
                    ProfissaoId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_pessoafamiliar", x => x.Id);
                    table.ForeignKey(
                        name: "FK_pessoafamiliar_grauparentesco_GrauParentescoId",
                        column: x => x.GrauParentescoId,
                        principalSchema: "geral",
                        principalTable: "grauparentesco",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pessoafamiliar_pessoa_PessoaId",
                        column: x => x.PessoaId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pessoafamiliar_profissao_ProfissaoId",
                        column: x => x.ProfissaoId,
                        principalSchema: "geral",
                        principalTable: "profissao",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pessoafamiliar_tipoescolaridade_EscolaridadeId",
                        column: x => x.EscolaridadeId,
                        principalSchema: "geral",
                        principalTable: "tipoescolaridade",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "pessoagateway",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    TipoGatewayId = table.Column<int>(type: "integer", nullable: false),
                    PessoaId = table.Column<int>(type: "integer", nullable: false),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    CodigoIntegracao = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_pessoagateway", x => x.Id);
                    table.ForeignKey(
                        name: "FK_pessoagateway_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pessoagateway_pessoa_PessoaId",
                        column: x => x.PessoaId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pessoagateway_tipogateway_TipoGatewayId",
                        column: x => x.TipoGatewayId,
                        principalSchema: "financeiro",
                        principalTable: "tipogateway",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "seguradora_contato",
                schema: "loteamento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    SeguradoraId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Celular = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Telefone = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Ramal = table.Column<string>(type: "character varying(10)", maxLength: 10, nullable: true),
                    Email = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_seguradora_contato", x => x.Id);
                    table.ForeignKey(
                        name: "FK_seguradora_contato_seguradora_SeguradoraId",
                        column: x => x.SeguradoraId,
                        principalSchema: "geral",
                        principalTable: "seguradora",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "composicao",
                schema: "orcamentoobras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Codigo = table.Column<string>(type: "text", nullable: true),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    UnidadeId = table.Column<int>(type: "integer", nullable: false),
                    ClasseId = table.Column<int>(type: "integer", nullable: false),
                    TipoId = table.Column<int>(type: "integer", nullable: false),
                    OrigemId = table.Column<int>(type: "integer", nullable: false),
                    Estado_Acre_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Acre_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Alagoas_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Alagoas_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Amapa_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Amapa_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Amazonas_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Amazonas_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Bahia_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Bahia_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Ceara_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Ceara_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_EspiritoSanto_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_EspiritoSanto_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Goias_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Goias_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Maranhao_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Maranhao_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_MatoGrosso_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_MatoGrosso_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_MatoGrossoDoSul_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_MatoGrossoDoSul_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_MinasGerais_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_MinasGerais_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Para_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Para_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Paraiba_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Paraiba_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Parana_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Parana_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Pernambuco_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Pernambuco_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Piaui_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Piaui_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_RioDeJaneiro_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_RioDeJaneiro_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_RioGrandeDoNorte_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_RioGrandeDoNorte_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_RioGrandeDoSul_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_RioGrandeDoSul_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Rondonia_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Rondonia_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Roraima_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Roraima_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_SantaCatarina_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_SantaCatarina_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_SaoPaulo_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_SaoPaulo_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Sergipe_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Sergipe_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Tocantins_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Tocantins_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_DistritoFederal_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_DistritoFederal_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Observacao = table.Column<string>(type: "text", nullable: true),
                    Mes = table.Column<int>(type: "integer", nullable: false),
                    Ano = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_composicao", x => x.Id);
                    table.ForeignKey(
                        name: "FK_composicao_classecomposicao_ClasseId",
                        column: x => x.ClasseId,
                        principalSchema: "orcamentoobras",
                        principalTable: "classecomposicao",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_composicao_origemdados_OrigemId",
                        column: x => x.OrigemId,
                        principalSchema: "orcamentoobras",
                        principalTable: "origemdados",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_composicao_tipocomposicao_TipoId",
                        column: x => x.TipoId,
                        principalSchema: "orcamentoobras",
                        principalTable: "tipocomposicao",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_composicao_unidademedida_UnidadeId",
                        column: x => x.UnidadeId,
                        principalSchema: "almoxarifado",
                        principalTable: "unidademedida",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "insumo",
                schema: "orcamentoobras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Codigo = table.Column<string>(type: "text", nullable: true),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    TipoId = table.Column<int>(type: "integer", nullable: false),
                    UnidadeId = table.Column<int>(type: "integer", nullable: false),
                    OrigemId = table.Column<int>(type: "integer", nullable: false),
                    Estado_Acre_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Acre_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Alagoas_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Alagoas_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Amapa_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Amapa_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Amazonas_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Amazonas_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Bahia_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Bahia_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Ceara_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Ceara_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_EspiritoSanto_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_EspiritoSanto_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Goias_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Goias_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Maranhao_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Maranhao_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_MatoGrosso_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_MatoGrosso_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_MatoGrossoDoSul_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_MatoGrossoDoSul_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_MinasGerais_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_MinasGerais_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Para_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Para_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Paraiba_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Paraiba_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Parana_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Parana_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Pernambuco_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Pernambuco_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Piaui_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Piaui_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_RioDeJaneiro_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_RioDeJaneiro_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_RioGrandeDoNorte_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_RioGrandeDoNorte_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_RioGrandeDoSul_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_RioGrandeDoSul_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Rondonia_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Rondonia_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Roraima_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Roraima_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_SantaCatarina_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_SantaCatarina_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_SaoPaulo_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_SaoPaulo_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Sergipe_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Sergipe_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Tocantins_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_Tocantins_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_DistritoFederal_ValorDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Estado_DistritoFederal_ValorNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Observacao = table.Column<string>(type: "text", nullable: true),
                    Mes = table.Column<int>(type: "integer", nullable: false),
                    Ano = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_insumo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_insumo_origemdados_OrigemId",
                        column: x => x.OrigemId,
                        principalSchema: "orcamentoobras",
                        principalTable: "origemdados",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_insumo_tipoinsumo_TipoId",
                        column: x => x.TipoId,
                        principalSchema: "orcamentoobras",
                        principalTable: "tipoinsumo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_insumo_unidademedida_UnidadeId",
                        column: x => x.UnidadeId,
                        principalSchema: "almoxarifado",
                        principalTable: "unidademedida",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "modeloorcamentoetapaitem",
                schema: "orcamentoobras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ModeloEtapaId = table.Column<int>(type: "integer", nullable: false),
                    Composicao_Codigo = table.Column<string>(type: "text", nullable: true),
                    Composicao_Descricao = table.Column<string>(type: "text", nullable: true),
                    Composicao_UnidadeMedidaId = table.Column<int>(type: "integer", nullable: true),
                    Composicao_ClasseId = table.Column<int>(type: "integer", nullable: true),
                    Composicao_OrigemId = table.Column<int>(type: "integer", nullable: true),
                    Composicao_Mes = table.Column<int>(type: "integer", nullable: true),
                    Composicao_Ano = table.Column<int>(type: "integer", nullable: true),
                    Composicao_ValorOriginalDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Composicao_ValorOriginalNaoDesonerado = table.Column<decimal>(type: "numeric", nullable: true),
                    Quantidade = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_modeloorcamentoetapaitem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_modeloorcamentoetapaitem_classecomposicao_Composicao_Classe~",
                        column: x => x.Composicao_ClasseId,
                        principalSchema: "orcamentoobras",
                        principalTable: "classecomposicao",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_modeloorcamentoetapaitem_modeloorcamentoetapa_ModeloEtapaId",
                        column: x => x.ModeloEtapaId,
                        principalSchema: "orcamentoobras",
                        principalTable: "modeloorcamentoetapa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_modeloorcamentoetapaitem_origemdados_Composicao_OrigemId",
                        column: x => x.Composicao_OrigemId,
                        principalSchema: "orcamentoobras",
                        principalTable: "origemdados",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_modeloorcamentoetapaitem_unidademedida_Composicao_UnidadeMe~",
                        column: x => x.Composicao_UnidadeMedidaId,
                        principalSchema: "almoxarifado",
                        principalTable: "unidademedida",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "produto",
                schema: "almoxarifado",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Codigo = table.Column<string>(type: "character varying(25)", maxLength: 25, nullable: false),
                    Nome = table.Column<string>(type: "character varying(80)", maxLength: 80, nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    GrupoId = table.Column<int>(type: "integer", nullable: false),
                    TipoId = table.Column<int>(type: "integer", nullable: false),
                    UnidadeMedidaId = table.Column<int>(type: "integer", nullable: false),
                    UltimaCompraPreco = table.Column<decimal>(type: "numeric", nullable: false),
                    UltimaCompraData = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UltimaCompraFornecedorId = table.Column<int>(type: "integer", nullable: true),
                    PrecoCustoMedio = table.Column<decimal>(type: "numeric", nullable: false),
                    EstoqueMinimo = table.Column<decimal>(type: "numeric", nullable: false),
                    EstoqueCritico = table.Column<decimal>(type: "numeric", nullable: false),
                    Peso = table.Column<decimal>(type: "numeric", nullable: false),
                    Volume = table.Column<decimal>(type: "numeric", nullable: false),
                    Foto = table.Column<byte[]>(type: "bytea", nullable: true),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_produto", x => x.Id);
                    table.ForeignKey(
                        name: "FK_produto_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_produto_grupoproduto_GrupoId",
                        column: x => x.GrupoId,
                        principalSchema: "almoxarifado",
                        principalTable: "grupoproduto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_produto_pessoa_UltimaCompraFornecedorId",
                        column: x => x.UltimaCompraFornecedorId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_produto_tipoproduto_TipoId",
                        column: x => x.TipoId,
                        principalSchema: "almoxarifado",
                        principalTable: "tipoproduto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_produto_unidademedida_UnidadeMedidaId",
                        column: x => x.UnidadeMedidaId,
                        principalSchema: "almoxarifado",
                        principalTable: "unidademedida",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "contacorrentegateway",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    TipoGatewayId = table.Column<int>(type: "integer", nullable: false),
                    ContaCorrenteId = table.Column<int>(type: "integer", nullable: false),
                    CodigoIntegracao = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_contacorrentegateway", x => x.Id);
                    table.ForeignKey(
                        name: "FK_contacorrentegateway_contacorrente_ContaCorrenteId",
                        column: x => x.ContaCorrenteId,
                        principalSchema: "financeiro",
                        principalTable: "contacorrente",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contacorrentegateway_tipogateway_TipoGatewayId",
                        column: x => x.TipoGatewayId,
                        principalSchema: "financeiro",
                        principalTable: "tipogateway",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "parametro",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    CentroCustoReceitalId = table.Column<int>(type: "integer", nullable: true),
                    CentroCustoReceitaId = table.Column<int>(type: "integer", nullable: true),
                    ContaGerenciaReceitalId = table.Column<int>(type: "integer", nullable: true),
                    ContaGerencialReceitaId = table.Column<int>(type: "integer", nullable: true),
                    JurosAditamento = table.Column<decimal>(type: "numeric", nullable: false),
                    DescontoAditamento = table.Column<decimal>(type: "numeric", nullable: false),
                    TipoAmortizacaoId = table.Column<int>(type: "integer", nullable: true),
                    JurosAmortizacao = table.Column<decimal>(type: "numeric", nullable: false),
                    ValoresAdicionaisParcela_Gestao = table.Column<decimal>(type: "numeric", nullable: true),
                    ValoresAdicionaisParcela_ValorMPI = table.Column<decimal>(type: "numeric", nullable: true),
                    ValoresAdicionaisParcela_PercentualMPI = table.Column<decimal>(type: "numeric", nullable: true),
                    ValoresAdicionaisParcela_ValorDFI = table.Column<decimal>(type: "numeric", nullable: true),
                    ValoresAdicionaisParcela_PercentualDFI = table.Column<decimal>(type: "numeric", nullable: true),
                    ValoresAdicionaisParcela_IsDFIFixo = table.Column<bool>(type: "boolean", nullable: true),
                    ValoresAdicionaisParcela_CorrecaoIndice = table.Column<decimal>(type: "numeric", nullable: true),
                    ValoresAdicionaisParcela_TaxaBoleto = table.Column<decimal>(type: "numeric", nullable: true),
                    ValoresAdicionaisParcela_NomeTaxaAdicional = table.Column<string>(type: "text", nullable: true),
                    ValoresAdicionaisParcela_ValorFixoTaxaAdicional = table.Column<decimal>(type: "numeric", nullable: true),
                    DesmarcarBoletosCobrancasAutomaticas = table.Column<bool>(type: "boolean", nullable: false),
                    ParametroCRMVendas_DiasExpiracaoPreReserva = table.Column<int>(type: "integer", nullable: true),
                    ParametroCRMVendas_DiasExpiracaoReserva = table.Column<int>(type: "integer", nullable: true),
                    ParametroCRMVendas_DiasExpiracaoReajusteProposta = table.Column<int>(type: "integer", nullable: true),
                    ParametroCRMVendas_DiasMinimosEntreReservaMesmoLead = table.Column<int>(type: "integer", nullable: true),
                    ParametroCRMVendas_PercentualComissaoCorretor = table.Column<decimal>(type: "numeric", nullable: true),
                    ParametroCRMVendas_CentroCustoComissaoCorretorId = table.Column<int>(type: "integer", nullable: true),
                    ParametroCRMVendas_ContaGerencialComissaoCorretorId = table.Column<int>(type: "integer", nullable: true),
                    ParametroControleAgua_EmpresaPadraoBoletoAgua = table.Column<bool>(type: "boolean", nullable: true),
                    ParametroControleAgua_CentroCustoControleAguaId = table.Column<int>(type: "integer", nullable: true),
                    ParametroControleAgua_ContaGerencialControleAguaId = table.Column<int>(type: "integer", nullable: true),
                    ParametroControleAgua_ContaCorrenteId = table.Column<int>(type: "integer", nullable: true),
                    ParametroControleAgua_TipoOperacaoId = table.Column<int>(type: "integer", nullable: true),
                    ParametroControleAgua_TipoGatewayId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_parametro", x => x.Id);
                    table.ForeignKey(
                        name: "FK_parametro_centrodecusto_CentroCustoReceitaId",
                        column: x => x.CentroCustoReceitaId,
                        principalSchema: "financeiro",
                        principalTable: "centrodecusto",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_parametro_centrodecusto_ParametroCRMVendas_CentroCustoComis~",
                        column: x => x.ParametroCRMVendas_CentroCustoComissaoCorretorId,
                        principalSchema: "financeiro",
                        principalTable: "centrodecusto",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_parametro_centrodecusto_ParametroControleAgua_CentroCustoCo~",
                        column: x => x.ParametroControleAgua_CentroCustoControleAguaId,
                        principalSchema: "financeiro",
                        principalTable: "centrodecusto",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_parametro_contacorrente_ParametroControleAgua_ContaCorrente~",
                        column: x => x.ParametroControleAgua_ContaCorrenteId,
                        principalSchema: "financeiro",
                        principalTable: "contacorrente",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_parametro_contagerencial_ContaGerencialReceitaId",
                        column: x => x.ContaGerencialReceitaId,
                        principalSchema: "financeiro",
                        principalTable: "contagerencial",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_parametro_contagerencial_ParametroCRMVendas_ContaGerencialC~",
                        column: x => x.ParametroCRMVendas_ContaGerencialComissaoCorretorId,
                        principalSchema: "financeiro",
                        principalTable: "contagerencial",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_parametro_contagerencial_ParametroControleAgua_ContaGerenci~",
                        column: x => x.ParametroControleAgua_ContaGerencialControleAguaId,
                        principalSchema: "financeiro",
                        principalTable: "contagerencial",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_parametro_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_parametro_tipoAmortizacao_TipoAmortizacaoId",
                        column: x => x.TipoAmortizacaoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoAmortizacao",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_parametro_tipoOperacaofinanceira_ParametroControleAgua_Tipo~",
                        column: x => x.ParametroControleAgua_TipoOperacaoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoOperacaofinanceira",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_parametro_tipogateway_ParametroControleAgua_TipoGatewayId",
                        column: x => x.ParametroControleAgua_TipoGatewayId,
                        principalSchema: "financeiro",
                        principalTable: "tipogateway",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "planopagamentomodelo",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "text", nullable: true),
                    IntervaloReajusteId = table.Column<int>(type: "integer", nullable: false),
                    TipoIndiceId = table.Column<int>(type: "integer", nullable: false),
                    TipoAmortizacaoId = table.Column<int>(type: "integer", nullable: false),
                    TipoMesReajusteId = table.Column<int>(type: "integer", nullable: false),
                    TipoAnoInicioReajusteId = table.Column<int>(type: "integer", nullable: false),
                    JurosTabela = table.Column<decimal>(type: "numeric", nullable: false),
                    TaxaGestao = table.Column<decimal>(type: "numeric", nullable: false),
                    SeguroMPI = table.Column<decimal>(type: "numeric", nullable: false),
                    SeguroDFI = table.Column<decimal>(type: "numeric", nullable: false),
                    IsDFIFixo = table.Column<bool>(type: "boolean", nullable: false),
                    TipoValorTotalId = table.Column<int>(type: "integer", nullable: false),
                    ValorMetroQuadrado = table.Column<decimal>(type: "numeric", nullable: false),
                    ValorUnidade = table.Column<decimal>(type: "numeric", nullable: false),
                    Entrada_GerarFinanciamentoComIntermediaria = table.Column<bool>(type: "boolean", nullable: true),
                    Entrada_GerarFinanciamentoPosEntrada = table.Column<bool>(type: "boolean", nullable: true),
                    Entrada_IsReajustavel = table.Column<bool>(type: "boolean", nullable: true),
                    Entrada_TipoId = table.Column<int>(type: "integer", nullable: true),
                    Entrada_TipoIntervaloParcelaId = table.Column<int>(type: "integer", nullable: true),
                    Entrada_PorcentagemValorTotal = table.Column<decimal>(type: "numeric", nullable: true),
                    Entrada_Valor = table.Column<decimal>(type: "numeric", nullable: true),
                    Entrada_PrazosDisponiveis = table.Column<List<int>>(type: "integer[]", nullable: true),
                    Entrada_Prazo = table.Column<int>(type: "integer", nullable: true),
                    Intermediaria_GerarFinanciamentoComIntermediaria = table.Column<bool>(type: "boolean", nullable: true),
                    Intermediaria_GerarFinanciamentoPosEntrada = table.Column<bool>(type: "boolean", nullable: true),
                    Intermediaria_IsReajustavel = table.Column<bool>(type: "boolean", nullable: true),
                    Intermediaria_TipoId = table.Column<int>(type: "integer", nullable: true),
                    Intermediaria_TipoIntervaloParcelaId = table.Column<int>(type: "integer", nullable: true),
                    Intermediaria_PorcentagemValorTotal = table.Column<decimal>(type: "numeric", nullable: true),
                    Intermediaria_Valor = table.Column<decimal>(type: "numeric", nullable: true),
                    Intermediaria_PrazosDisponiveis = table.Column<List<int>>(type: "integer[]", nullable: true),
                    Intermediaria_Prazo = table.Column<int>(type: "integer", nullable: true),
                    Financiamento_GerarFinanciamentoComIntermediaria = table.Column<bool>(type: "boolean", nullable: true),
                    Financiamento_GerarFinanciamentoPosEntrada = table.Column<bool>(type: "boolean", nullable: true),
                    Financiamento_IsReajustavel = table.Column<bool>(type: "boolean", nullable: true),
                    Financiamento_TipoId = table.Column<int>(type: "integer", nullable: true),
                    Financiamento_TipoIntervaloParcelaId = table.Column<int>(type: "integer", nullable: true),
                    Financiamento_PorcentagemValorTotal = table.Column<decimal>(type: "numeric", nullable: true),
                    Financiamento_Valor = table.Column<decimal>(type: "numeric", nullable: true),
                    Financiamento_PrazosDisponiveis = table.Column<List<int>>(type: "integer[]", nullable: true),
                    Financiamento_Prazo = table.Column<int>(type: "integer", nullable: true),
                    TipoOperacaoId = table.Column<int>(type: "integer", nullable: true),
                    TipoGatewayId = table.Column<int>(type: "integer", nullable: true),
                    ContaCorrenteId = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_JurosDia = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_Multa = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DescontoVencimento = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DiasDescontoVencimento = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_IsDescontoVencimentoPercentual = table.Column<bool>(type: "boolean", nullable: true),
                    EncargoFinanceiro_DescontoAntecipacao = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_CorrecaoMonetaria = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DiasAposVencimentoNaoReceber = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_DiasProtesto = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_DiasNegativacao = table.Column<int>(type: "integer", nullable: true),
                    TaxaBoleto = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_planopagamentomodelo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_planopagamentomodelo_contacorrente_ContaCorrenteId",
                        column: x => x.ContaCorrenteId,
                        principalSchema: "financeiro",
                        principalTable: "contacorrente",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentomodelo_intervaloreajuste_IntervaloReajusteId",
                        column: x => x.IntervaloReajusteId,
                        principalSchema: "financeiro",
                        principalTable: "intervaloreajuste",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_planopagamentomodelo_tipoAmortizacao_TipoAmortizacaoId",
                        column: x => x.TipoAmortizacaoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoAmortizacao",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_planopagamentomodelo_tipoOperacaofinanceira_TipoOperacaoId",
                        column: x => x.TipoOperacaoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoOperacaofinanceira",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentomodelo_tipoanoinicioreajuste_TipoAnoInicioRea~",
                        column: x => x.TipoAnoInicioReajusteId,
                        principalSchema: "financeiro",
                        principalTable: "tipoanoinicioreajuste",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_planopagamentomodelo_tipogateway_TipoGatewayId",
                        column: x => x.TipoGatewayId,
                        principalSchema: "financeiro",
                        principalTable: "tipogateway",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentomodelo_tipoindice_TipoIndiceId",
                        column: x => x.TipoIndiceId,
                        principalSchema: "financeiro",
                        principalTable: "tipoindice",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_planopagamentomodelo_tipointervaloparcelas_Entrada_TipoInte~",
                        column: x => x.Entrada_TipoIntervaloParcelaId,
                        principalSchema: "financeiro",
                        principalTable: "tipointervaloparcelas",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentomodelo_tipointervaloparcelas_Financiamento_Ti~",
                        column: x => x.Financiamento_TipoIntervaloParcelaId,
                        principalSchema: "financeiro",
                        principalTable: "tipointervaloparcelas",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentomodelo_tipointervaloparcelas_Intermediaria_Ti~",
                        column: x => x.Intermediaria_TipoIntervaloParcelaId,
                        principalSchema: "financeiro",
                        principalTable: "tipointervaloparcelas",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentomodelo_tipomesreajuste_TipoMesReajusteId",
                        column: x => x.TipoMesReajusteId,
                        principalSchema: "financeiro",
                        principalTable: "tipomesreajuste",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_planopagamentomodelo_tipoplanopagamento_Entrada_TipoId",
                        column: x => x.Entrada_TipoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoplanopagamento",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentomodelo_tipoplanopagamento_Financiamento_TipoId",
                        column: x => x.Financiamento_TipoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoplanopagamento",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentomodelo_tipoplanopagamento_Intermediaria_TipoId",
                        column: x => x.Intermediaria_TipoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoplanopagamento",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentomodelo_tipoplanopagamento_TipoValorTotalId",
                        column: x => x.TipoValorTotalId,
                        principalSchema: "financeiro",
                        principalTable: "tipoplanopagamento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "remessa",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "text", nullable: true),
                    ContaCorrenteId = table.Column<int>(type: "integer", nullable: false),
                    NumeroSequencia = table.Column<int>(type: "integer", nullable: false),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    TipoId = table.Column<int>(type: "integer", nullable: false),
                    IsProcessado = table.Column<bool>(type: "boolean", nullable: false),
                    TipoCnab = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_remessa", x => x.Id);
                    table.ForeignKey(
                        name: "FK_remessa_contacorrente_ContaCorrenteId",
                        column: x => x.ContaCorrenteId,
                        principalSchema: "financeiro",
                        principalTable: "contacorrente",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_remessa_tiporemessa_TipoId",
                        column: x => x.TipoId,
                        principalSchema: "financeiro",
                        principalTable: "tiporemessa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "composicaoitem",
                schema: "orcamentoobras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ComposicaoId = table.Column<int>(type: "integer", nullable: false),
                    InsumoId = table.Column<int>(type: "integer", nullable: true),
                    ComposicaoAuxiliarId = table.Column<int>(type: "integer", nullable: true),
                    Coeficiente = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_composicaoitem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_composicaoitem_composicao_ComposicaoAuxiliarId",
                        column: x => x.ComposicaoAuxiliarId,
                        principalSchema: "orcamentoobras",
                        principalTable: "composicao",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_composicaoitem_composicao_ComposicaoId",
                        column: x => x.ComposicaoId,
                        principalSchema: "orcamentoobras",
                        principalTable: "composicao",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_composicaoitem_insumo_InsumoId",
                        column: x => x.InsumoId,
                        principalSchema: "orcamentoobras",
                        principalTable: "insumo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "orcamentoitem",
                schema: "compras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    OrcamentoId = table.Column<int>(type: "integer", nullable: false),
                    ProdutoId = table.Column<int>(type: "integer", nullable: false),
                    Quantidade = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_orcamentoitem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_orcamentoitem_orcamento_OrcamentoId",
                        column: x => x.OrcamentoId,
                        principalSchema: "compras",
                        principalTable: "orcamento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_orcamentoitem_produto_ProdutoId",
                        column: x => x.ProdutoId,
                        principalSchema: "almoxarifado",
                        principalTable: "produto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "produtofornecedor",
                schema: "almoxarifado",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ProdutoId = table.Column<int>(type: "integer", nullable: false),
                    FornecedorId = table.Column<int>(type: "integer", nullable: false),
                    Codigo = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_produtofornecedor", x => x.Id);
                    table.ForeignKey(
                        name: "FK_produtofornecedor_pessoa_FornecedorId",
                        column: x => x.FornecedorId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_produtofornecedor_produto_ProdutoId",
                        column: x => x.ProdutoId,
                        principalSchema: "almoxarifado",
                        principalTable: "produto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "parametrocobranca",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ParametroId = table.Column<int>(type: "integer", nullable: false),
                    Dias = table.Column<int>(type: "integer", nullable: false),
                    PosVencimento = table.Column<bool>(type: "boolean", nullable: false),
                    LayoutCobrancaId = table.Column<int>(type: "integer", nullable: false),
                    EnviarSms = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_parametrocobranca", x => x.Id);
                    table.ForeignKey(
                        name: "FK_parametrocobranca_layoutcobranca_LayoutCobrancaId",
                        column: x => x.LayoutCobrancaId,
                        principalSchema: "financeiro",
                        principalTable: "layoutcobranca",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_parametrocobranca_parametro_ParametroId",
                        column: x => x.ParametroId,
                        principalSchema: "financeiro",
                        principalTable: "parametro",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "parametrogatway",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Principal = table.Column<bool>(type: "boolean", nullable: false),
                    ParametroId = table.Column<int>(type: "integer", nullable: false),
                    TipoId = table.Column<int>(type: "integer", nullable: false),
                    EncargoFinanceiro_JurosDia = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_Multa = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DescontoVencimento = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DiasDescontoVencimento = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_IsDescontoVencimentoPercentual = table.Column<bool>(type: "boolean", nullable: true),
                    EncargoFinanceiro_DescontoAntecipacao = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_CorrecaoMonetaria = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DiasAposVencimentoNaoReceber = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_DiasProtesto = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_DiasNegativacao = table.Column<int>(type: "integer", nullable: true),
                    TaxaBoleto = table.Column<decimal>(type: "numeric", nullable: false),
                    Instrucao1 = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Instrucao2 = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Instrucao3 = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Safra_ClientId = table.Column<string>(type: "character varying(25)", maxLength: 25, nullable: true),
                    Safra_Usuario = table.Column<string>(type: "character varying(25)", maxLength: 25, nullable: true),
                    Safra_Senha = table.Column<string>(type: "character varying(25)", maxLength: 25, nullable: true),
                    Safra_Agencia = table.Column<string>(type: "text", nullable: true),
                    Safra_Conta = table.Column<string>(type: "text", nullable: true),
                    Safra_NossoNumeroInicial = table.Column<string>(type: "text", nullable: true),
                    GalaxPay_Id = table.Column<string>(type: "character varying(25)", maxLength: 25, nullable: true),
                    GalaxPay_Hash = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Asaas_AccessToken = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_parametrogatway", x => x.Id);
                    table.ForeignKey(
                        name: "FK_parametrogatway_parametro_ParametroId",
                        column: x => x.ParametroId,
                        principalSchema: "financeiro",
                        principalTable: "parametro",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_parametrogatway_tipogateway_TipoId",
                        column: x => x.TipoId,
                        principalSchema: "financeiro",
                        principalTable: "tipogateway",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "empreendimento",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    EmpresaAdministradoraId = table.Column<int>(type: "integer", nullable: true),
                    Nome = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false),
                    TipoId = table.Column<int>(type: "integer", nullable: false),
                    PercentualAdiministradora = table.Column<decimal>(type: "numeric", nullable: false),
                    PercentualCorretor = table.Column<decimal>(type: "numeric", nullable: false),
                    AjusteIndice = table.Column<short>(type: "smallint", nullable: false),
                    Observacao = table.Column<string>(type: "text", nullable: true),
                    Endereco_Cep = table.Column<string>(type: "character varying(9)", maxLength: 9, nullable: true),
                    Endereco_Logradouro = table.Column<string>(type: "character varying(80)", maxLength: 80, nullable: true),
                    Endereco_Numero = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Endereco_Complemento = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Endereco_Bairro = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Endereco_MunicipioId = table.Column<int>(type: "integer", nullable: true),
                    Endereco_EstadoId = table.Column<int>(type: "integer", nullable: true),
                    Legalizacao_Matricula = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    Legalizacao_Rgi = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    Legalizacao_NumeroProcesso = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    Legalizacao_OrgaoEmissor = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    Legalizacao_LivroNumero = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Legalizacao_EscrituraLavrada = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Legalizacao_IncricaoCadastral = table.Column<string>(type: "character varying(25)", maxLength: 25, nullable: true),
                    Legalizacao_CartorioId = table.Column<int>(type: "integer", nullable: true),
                    Legalizacao_Observacao = table.Column<string>(type: "text", nullable: true),
                    Infraestrutura_Descricao = table.Column<string>(type: "text", nullable: true),
                    Infraestrutura_Lazer_Academia = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_Piscina = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_SalaMassagem = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_Churrasqueira = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_HomeCinema = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_QuadraTenis = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_Sauna = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_Hidromassagem = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_QuadraPoliesportiva = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_SalaoJogos = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_SalaoFesta = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_Wifi = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_Playground = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_AreaUnidade = table.Column<decimal>(type: "numeric", nullable: true),
                    Infraestrutura_AreaRua = table.Column<decimal>(type: "numeric", nullable: true),
                    Infraestrutura_AreaPrefeitura = table.Column<decimal>(type: "numeric", nullable: true),
                    Infraestrutura_AreaVerde = table.Column<decimal>(type: "numeric", nullable: true),
                    Infraestrutura_AreaReservadoProprietario = table.Column<decimal>(type: "numeric", nullable: true),
                    Infraestrutura_AreaOutras = table.Column<decimal>(type: "numeric", nullable: true),
                    Infraestrutura_DimensaoLotePadrao_Frente = table.Column<decimal>(type: "numeric", nullable: true),
                    Infraestrutura_DimensaoLotePadrao_Fundo = table.Column<decimal>(type: "numeric", nullable: true),
                    Infraestrutura_DimensaoLotePadrao_LadoEsquerdo = table.Column<decimal>(type: "numeric", nullable: true),
                    Infraestrutura_DimensaoLotePadrao_LadoDireito = table.Column<decimal>(type: "numeric", nullable: true),
                    Infraestrutura_DimensaoLotePadrao_Curva = table.Column<decimal>(type: "numeric", nullable: true),
                    Infraestrutura_DimensaoLotePadrao_AreaTotal = table.Column<decimal>(type: "numeric", nullable: true),
                    MapaInterativo_Altura = table.Column<decimal>(type: "numeric", nullable: true),
                    MapaInterativo_Largura = table.Column<decimal>(type: "numeric", nullable: true),
                    MapaInterativo_Imagem = table.Column<byte[]>(type: "bytea", nullable: true),
                    CodigoOrigem = table.Column<int>(type: "integer", nullable: true),
                    FotoPrincipal = table.Column<byte[]>(type: "bytea", nullable: true),
                    Kml = table.Column<string>(type: "text", nullable: true),
                    PlanoPagamentoModeloId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_empreendimento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_empreendimento_cartorio_Legalizacao_CartorioId",
                        column: x => x.Legalizacao_CartorioId,
                        principalSchema: "geral",
                        principalTable: "cartorio",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_empreendimento_empresa_EmpresaAdministradoraId",
                        column: x => x.EmpresaAdministradoraId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_empreendimento_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_empreendimento_estado_Endereco_EstadoId",
                        column: x => x.Endereco_EstadoId,
                        principalSchema: "geral",
                        principalTable: "estado",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_empreendimento_municipio_Endereco_MunicipioId",
                        column: x => x.Endereco_MunicipioId,
                        principalSchema: "geral",
                        principalTable: "municipio",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_empreendimento_planopagamentomodelo_PlanoPagamentoModeloId",
                        column: x => x.PlanoPagamentoModeloId,
                        principalSchema: "financeiro",
                        principalTable: "planopagamentomodelo",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_empreendimento_tipoempreendimento_TipoId",
                        column: x => x.TipoId,
                        principalSchema: "empreendimento",
                        principalTable: "tipoempreendimento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "arquivoremessadocumento",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    RemessaId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_arquivoremessadocumento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_arquivoremessadocumento_remessa_RemessaId",
                        column: x => x.RemessaId,
                        principalSchema: "financeiro",
                        principalTable: "remessa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_arquivoremessadocumento_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "orcamentoitem_fornecedor",
                schema: "compras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    OrcamentoItemId = table.Column<int>(type: "integer", nullable: false),
                    FornecedorId = table.Column<int>(type: "integer", nullable: false),
                    ValorUnitario = table.Column<decimal>(type: "numeric", nullable: false),
                    ValorTotal = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_orcamentoitem_fornecedor", x => x.Id);
                    table.ForeignKey(
                        name: "FK_orcamentoitem_fornecedor_orcamentoitem_OrcamentoItemId",
                        column: x => x.OrcamentoItemId,
                        principalSchema: "compras",
                        principalTable: "orcamentoitem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_orcamentoitem_fornecedor_pessoa_FornecedorId",
                        column: x => x.FornecedorId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "almoxarifado",
                schema: "almoxarifado",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpreendimentoId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_almoxarifado", x => x.Id);
                    table.ForeignKey(
                        name: "FK_almoxarifado_empreendimento_EmpreendimentoId",
                        column: x => x.EmpreendimentoId,
                        principalSchema: "empreendimento",
                        principalTable: "empreendimento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ContratoFornecedor",
                schema: "projeto",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Numero = table.Column<int>(type: "integer", nullable: false),
                    FornecedorId = table.Column<int>(type: "integer", nullable: false),
                    EmpreendimentoId = table.Column<int>(type: "integer", nullable: false),
                    PrazoInicio = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    PrazoFim = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    PrazoGarantiaInicio = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    PrazoGarantiaFim = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    TipoId = table.Column<int>(type: "integer", nullable: false),
                    CentroCustoId = table.Column<int>(type: "integer", nullable: false),
                    ContaGerencialId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContratoFornecedor", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ContratoFornecedor_TipoContratoFornecedor_TipoId",
                        column: x => x.TipoId,
                        principalSchema: "projeto",
                        principalTable: "TipoContratoFornecedor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ContratoFornecedor_empreendimento_EmpreendimentoId",
                        column: x => x.EmpreendimentoId,
                        principalSchema: "empreendimento",
                        principalTable: "empreendimento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ContratoFornecedor_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ContratoFornecedor_pessoa_FornecedorId",
                        column: x => x.FornecedorId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "empreendimento_proprietario",
                schema: "geral",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpreendimentoId = table.Column<int>(type: "integer", nullable: false),
                    ProprietarioId = table.Column<int>(type: "integer", nullable: false),
                    Participacao = table.Column<decimal>(type: "numeric", nullable: false),
                    Observacao = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_empreendimento_proprietario", x => x.Id);
                    table.ForeignKey(
                        name: "FK_empreendimento_proprietario_empreendimento_EmpreendimentoId",
                        column: x => x.EmpreendimentoId,
                        principalSchema: "empreendimento",
                        principalTable: "empreendimento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_empreendimento_proprietario_pessoa_ProprietarioId",
                        column: x => x.ProprietarioId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "empreendimentodocumento",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpreendimentoId = table.Column<int>(type: "integer", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_empreendimentodocumento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_empreendimentodocumento_empreendimento_EmpreendimentoId",
                        column: x => x.EmpreendimentoId,
                        principalSchema: "empreendimento",
                        principalTable: "empreendimento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_empreendimentodocumento_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "empreendimentofoto",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpreendimentoId = table.Column<int>(type: "integer", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_empreendimentofoto", x => x.Id);
                    table.ForeignKey(
                        name: "FK_empreendimentofoto_empreendimento_EmpreendimentoId",
                        column: x => x.EmpreendimentoId,
                        principalSchema: "empreendimento",
                        principalTable: "empreendimento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_empreendimentofoto_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "grupo",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpreendimentoId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: false),
                    CodigoOrigem = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_grupo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_grupo_empreendimento_EmpreendimentoId",
                        column: x => x.EmpreendimentoId,
                        principalSchema: "empreendimento",
                        principalTable: "empreendimento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "modelocontratodigitalempreendimento",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ModeloContratoDigitalId = table.Column<int>(type: "integer", nullable: false),
                    EmpreendimentoId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_modelocontratodigitalempreendimento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_modelocontratodigitalempreendimento_empreendimento_Empreend~",
                        column: x => x.EmpreendimentoId,
                        principalSchema: "empreendimento",
                        principalTable: "empreendimento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_modelocontratodigitalempreendimento_modelocontratodigital_M~",
                        column: x => x.ModeloContratoDigitalId,
                        principalSchema: "clientes",
                        principalTable: "modelocontratodigital",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "orcado",
                schema: "projeto",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    EmpreendimentoId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_orcado", x => x.Id);
                    table.ForeignKey(
                        name: "FK_orcado_empreendimento_EmpreendimentoId",
                        column: x => x.EmpreendimentoId,
                        principalSchema: "empreendimento",
                        principalTable: "empreendimento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_orcado_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "orcamentoobras",
                schema: "orcamentoobras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    DataHora = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    DataHoraAtualizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    EmpreendimentoId = table.Column<int>(type: "integer", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    Observacao = table.Column<string>(type: "text", nullable: true),
                    Referencia = table.Column<string>(type: "text", nullable: true),
                    EstadoId = table.Column<int>(type: "integer", nullable: false),
                    OrigemId = table.Column<int>(type: "integer", nullable: false),
                    EncargosDesonerados = table.Column<bool>(type: "boolean", nullable: false),
                    PercentualBDI = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_orcamentoobras", x => x.Id);
                    table.ForeignKey(
                        name: "FK_orcamentoobras_empreendimento_EmpreendimentoId",
                        column: x => x.EmpreendimentoId,
                        principalSchema: "empreendimento",
                        principalTable: "empreendimento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_orcamentoobras_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_orcamentoobras_estado_EstadoId",
                        column: x => x.EstadoId,
                        principalSchema: "geral",
                        principalTable: "estado",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_orcamentoobras_origemdados_OrigemId",
                        column: x => x.OrigemId,
                        principalSchema: "orcamentoobras",
                        principalTable: "origemdados",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "almoxarifadoitem",
                schema: "almoxarifado",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ProdutoId = table.Column<int>(type: "integer", nullable: false),
                    AlmoxarifadoId = table.Column<int>(type: "integer", nullable: false),
                    Quantidade = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_almoxarifadoitem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_almoxarifadoitem_almoxarifado_AlmoxarifadoId",
                        column: x => x.AlmoxarifadoId,
                        principalSchema: "almoxarifado",
                        principalTable: "almoxarifado",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_almoxarifadoitem_produto_ProdutoId",
                        column: x => x.ProdutoId,
                        principalSchema: "almoxarifado",
                        principalTable: "produto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "inventario",
                schema: "almoxarifado",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Data = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    AlmoxarifadoId = table.Column<int>(type: "integer", nullable: false),
                    DataHoraExecucao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Executada = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_inventario", x => x.Id);
                    table.ForeignKey(
                        name: "FK_inventario_almoxarifado_AlmoxarifadoId",
                        column: x => x.AlmoxarifadoId,
                        principalSchema: "almoxarifado",
                        principalTable: "almoxarifado",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "parametro",
                schema: "compras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    AlmoxarifadoPadraoId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_parametro", x => x.Id);
                    table.ForeignKey(
                        name: "FK_parametro_almoxarifado_AlmoxarifadoPadraoId",
                        column: x => x.AlmoxarifadoPadraoId,
                        principalSchema: "almoxarifado",
                        principalTable: "almoxarifado",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_parametro_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ContratoFornecedorDocumento",
                schema: "projeto",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ContratoFornecedorId = table.Column<int>(type: "integer", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContratoFornecedorDocumento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ContratoFornecedorDocumento_ContratoFornecedor_ContratoForn~",
                        column: x => x.ContratoFornecedorId,
                        principalSchema: "projeto",
                        principalTable: "ContratoFornecedor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ContratoFornecedorDocumento_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "ContratoFornecedorItem",
                schema: "projeto",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EtapaId = table.Column<int>(type: "integer", nullable: false),
                    ContratoFornecedorId = table.Column<int>(type: "integer", nullable: false),
                    ValorUnitario = table.Column<decimal>(type: "numeric", nullable: false),
                    Quantidade = table.Column<decimal>(type: "numeric", nullable: false),
                    Caucao = table.Column<decimal>(type: "numeric", nullable: false),
                    DataInicio = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    DataFim = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContratoFornecedorItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ContratoFornecedorItem_ContratoFornecedor_ContratoFornecedo~",
                        column: x => x.ContratoFornecedorId,
                        principalSchema: "projeto",
                        principalTable: "ContratoFornecedor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ContratoFornecedorItem_etapa_EtapaId",
                        column: x => x.EtapaId,
                        principalSchema: "projeto",
                        principalTable: "etapa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ContratoFornecedorObservacao",
                schema: "projeto",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ContratoFornecedorId = table.Column<int>(type: "integer", nullable: false),
                    Observacao = table.Column<string>(type: "text", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: false),
                    DataHora = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContratoFornecedorObservacao", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ContratoFornecedorObservacao_ContratoFornecedor_ContratoFor~",
                        column: x => x.ContratoFornecedorId,
                        principalSchema: "projeto",
                        principalTable: "ContratoFornecedor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ContratoFornecedorObservacao_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "unidade",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    GrupoId = table.Column<int>(type: "integer", nullable: false),
                    Codigo = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Nome = table.Column<string>(type: "character varying(150)", maxLength: 150, nullable: false),
                    Endereco_Cep = table.Column<string>(type: "character varying(9)", maxLength: 9, nullable: true),
                    Endereco_Logradouro = table.Column<string>(type: "character varying(80)", maxLength: 80, nullable: true),
                    Endereco_Numero = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Endereco_Complemento = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Endereco_Bairro = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Endereco_MunicipioId = table.Column<int>(type: "integer", nullable: true),
                    Endereco_EstadoId = table.Column<int>(type: "integer", nullable: true),
                    SituacaoId = table.Column<int>(type: "integer", nullable: false),
                    TipoId = table.Column<int>(type: "integer", nullable: false),
                    DestinoLixo = table.Column<string>(type: "text", nullable: true),
                    EnergiaEletrica = table.Column<string>(type: "text", nullable: true),
                    Iptu = table.Column<string>(type: "text", nullable: true),
                    FormaAquisicaoUnidade = table.Column<string>(type: "text", nullable: true),
                    Edificacao = table.Column<string>(type: "text", nullable: true),
                    RegularizacaoFundiaria = table.Column<bool>(type: "boolean", nullable: false),
                    AbastecimentoAgua = table.Column<string>(type: "text", nullable: true),
                    EscoamentoSanitario = table.Column<string>(type: "text", nullable: true),
                    Ocupacoes = table.Column<int>(type: "integer", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    ConstrutoraId = table.Column<int>(type: "integer", nullable: true),
                    AdministradoraId = table.Column<int>(type: "integer", nullable: true),
                    ValorVenda = table.Column<decimal>(type: "numeric", nullable: false),
                    TaxaAdmMensal = table.Column<decimal>(type: "numeric", nullable: false),
                    ValorIndicacao = table.Column<decimal>(type: "numeric", nullable: false),
                    PercentualIndicacao = table.Column<decimal>(type: "numeric", nullable: false),
                    DisponibilidadeOperacao_Venda = table.Column<bool>(type: "boolean", nullable: true),
                    DisponibilidadeOperacao_Locacao = table.Column<bool>(type: "boolean", nullable: true),
                    MapaCoordenada_X = table.Column<decimal>(type: "numeric", nullable: true),
                    MapaCoordenada_Y = table.Column<decimal>(type: "numeric", nullable: true),
                    Legalizacao_Matricula = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    Legalizacao_Rgi = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    Legalizacao_NumeroProcesso = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    Legalizacao_OrgaoEmissor = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    Legalizacao_LivroNumero = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Legalizacao_EscrituraLavrada = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Legalizacao_IncricaoCadastral = table.Column<string>(type: "character varying(25)", maxLength: 25, nullable: true),
                    Legalizacao_CartorioId = table.Column<int>(type: "integer", nullable: true),
                    Legalizacao_Observacao = table.Column<string>(type: "text", nullable: true),
                    Confrontante_FrenteNome = table.Column<string>(type: "text", nullable: true),
                    Confrontante_Frente = table.Column<decimal>(type: "numeric", nullable: true),
                    Confrontante_FundoNome = table.Column<string>(type: "text", nullable: true),
                    Confrontante_Fundo = table.Column<decimal>(type: "numeric", nullable: true),
                    Confrontante_LadoEsquerdoNome = table.Column<string>(type: "text", nullable: true),
                    Confrontante_LadoEsquerdo = table.Column<decimal>(type: "numeric", nullable: true),
                    Confrontante_LadoDireitoNome = table.Column<string>(type: "text", nullable: true),
                    Confrontante_LadoDireito = table.Column<decimal>(type: "numeric", nullable: true),
                    CodigoOrigem = table.Column<int>(type: "integer", nullable: true),
                    KmlId = table.Column<string>(type: "text", nullable: true),
                    ModeloPlanoPagamentoId = table.Column<int>(type: "integer", nullable: true),
                    AtualizarComPlanoPagamentoModelo = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_unidade", x => x.Id);
                    table.ForeignKey(
                        name: "FK_unidade_cartorio_Legalizacao_CartorioId",
                        column: x => x.Legalizacao_CartorioId,
                        principalSchema: "geral",
                        principalTable: "cartorio",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_unidade_estado_Endereco_EstadoId",
                        column: x => x.Endereco_EstadoId,
                        principalSchema: "geral",
                        principalTable: "estado",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_unidade_grupo_GrupoId",
                        column: x => x.GrupoId,
                        principalSchema: "empreendimento",
                        principalTable: "grupo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_unidade_municipio_Endereco_MunicipioId",
                        column: x => x.Endereco_MunicipioId,
                        principalSchema: "geral",
                        principalTable: "municipio",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_unidade_pessoa_AdministradoraId",
                        column: x => x.AdministradoraId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_unidade_pessoa_ConstrutoraId",
                        column: x => x.ConstrutoraId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_unidade_planopagamentomodelo_ModeloPlanoPagamentoId",
                        column: x => x.ModeloPlanoPagamentoId,
                        principalSchema: "financeiro",
                        principalTable: "planopagamentomodelo",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_unidade_situacaounidade_SituacaoId",
                        column: x => x.SituacaoId,
                        principalSchema: "empreendimento",
                        principalTable: "situacaounidade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_unidade_tipounidade_TipoId",
                        column: x => x.TipoId,
                        principalSchema: "empreendimento",
                        principalTable: "tipounidade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "orcadoitem",
                schema: "projeto",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    OrcadoId = table.Column<int>(type: "integer", nullable: false),
                    EtapaId = table.Column<int>(type: "integer", nullable: false),
                    ProdutoId = table.Column<int>(type: "integer", nullable: false),
                    Quantidade = table.Column<decimal>(type: "numeric", nullable: false),
                    ValorUnitario = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_orcadoitem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_orcadoitem_etapa_EtapaId",
                        column: x => x.EtapaId,
                        principalSchema: "projeto",
                        principalTable: "etapa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_orcadoitem_orcado_OrcadoId",
                        column: x => x.OrcadoId,
                        principalSchema: "projeto",
                        principalTable: "orcado",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_orcadoitem_produto_ProdutoId",
                        column: x => x.ProdutoId,
                        principalSchema: "almoxarifado",
                        principalTable: "produto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "orcamentoetapa",
                schema: "orcamentoobras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    OrcamentoId = table.Column<int>(type: "integer", nullable: false),
                    EtapaPaiId = table.Column<int>(type: "integer", nullable: true),
                    Titulo = table.Column<string>(type: "text", nullable: true),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    Quantidade = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_orcamentoetapa", x => x.Id);
                    table.ForeignKey(
                        name: "FK_orcamentoetapa_orcamentoetapa_EtapaPaiId",
                        column: x => x.EtapaPaiId,
                        principalSchema: "orcamentoobras",
                        principalTable: "orcamentoetapa",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_orcamentoetapa_orcamentoobras_OrcamentoId",
                        column: x => x.OrcamentoId,
                        principalSchema: "orcamentoobras",
                        principalTable: "orcamentoobras",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "inventarioitem",
                schema: "almoxarifado",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    InventarioId = table.Column<int>(type: "integer", nullable: false),
                    ProdutoId = table.Column<int>(type: "integer", nullable: false),
                    Quantidade = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_inventarioitem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_inventarioitem_inventario_InventarioId",
                        column: x => x.InventarioId,
                        principalSchema: "almoxarifado",
                        principalTable: "inventario",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_inventarioitem_produto_ProdutoId",
                        column: x => x.ProdutoId,
                        principalSchema: "almoxarifado",
                        principalTable: "produto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "confrontanteadicional",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false),
                    UnidadeId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_confrontanteadicional", x => x.Id);
                    table.ForeignKey(
                        name: "FK_confrontanteadicional_unidade_UnidadeId",
                        column: x => x.UnidadeId,
                        principalSchema: "empreendimento",
                        principalTable: "unidade",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "contrato",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    Numero = table.Column<int>(type: "integer", nullable: false),
                    Sequencia = table.Column<int>(type: "integer", nullable: false),
                    UnidadePrincipalId = table.Column<int>(type: "integer", nullable: true),
                    TipoId = table.Column<int>(type: "integer", nullable: false),
                    TipoProdutoId = table.Column<int>(type: "integer", nullable: false),
                    TipoAditamentoId = table.Column<int>(type: "integer", nullable: true),
                    PercentualAdiministradora = table.Column<decimal>(type: "numeric", nullable: false),
                    Data = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    TipoIndiceId = table.Column<int>(type: "integer", nullable: false),
                    IntervaloReajusteId = table.Column<int>(type: "integer", nullable: false),
                    TipoAmortizacaoId = table.Column<int>(type: "integer", nullable: false),
                    JurosAmortizacao = table.Column<decimal>(type: "numeric", nullable: false),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false),
                    EncargoFinanceiro_JurosDia = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_Multa = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DescontoVencimento = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DiasDescontoVencimento = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_IsDescontoVencimentoPercentual = table.Column<bool>(type: "boolean", nullable: true),
                    EncargoFinanceiro_DescontoAntecipacao = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_CorrecaoMonetaria = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DiasAposVencimentoNaoReceber = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_DiasProtesto = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_DiasNegativacao = table.Column<int>(type: "integer", nullable: true),
                    QuantidadeParcela = table.Column<int>(type: "integer", nullable: false),
                    Renovavel = table.Column<bool>(type: "boolean", nullable: false),
                    PeriodicidadeReajuste = table.Column<int>(type: "integer", nullable: false),
                    PeriodicidadeRenovacao = table.Column<int>(type: "integer", nullable: false),
                    MesReajuste = table.Column<int>(type: "integer", nullable: false),
                    EmpreendimentoId = table.Column<int>(type: "integer", nullable: false),
                    PrazoContratual = table.Column<int>(type: "integer", nullable: false),
                    PrimeiroVencimento = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataVencimentoOriginal = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    MelhorDia = table.Column<short>(type: "smallint", nullable: false),
                    NumeroProcessoJudicial = table.Column<string>(type: "text", nullable: true),
                    TipoProcessoJudicialId = table.Column<int>(type: "integer", nullable: true),
                    SituacaoId = table.Column<int>(type: "integer", nullable: false),
                    Prazo = table.Column<int>(type: "integer", nullable: false),
                    Responsavel = table.Column<string>(type: "text", nullable: true),
                    CodigoOrigem = table.Column<int>(type: "integer", nullable: true),
                    ContratoAnteriorAditadoId = table.Column<int>(type: "integer", nullable: true),
                    AnoPrimeiroReajuste = table.Column<int>(type: "integer", nullable: false),
                    TipoGatewayId = table.Column<int>(type: "integer", nullable: true),
                    ContaCorrenteId = table.Column<int>(type: "integer", nullable: true),
                    TipoOperacaoId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_contrato", x => x.Id);
                    table.ForeignKey(
                        name: "FK_contrato_contacorrente_ContaCorrenteId",
                        column: x => x.ContaCorrenteId,
                        principalSchema: "financeiro",
                        principalTable: "contacorrente",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_contrato_contrato_ContratoAnteriorAditadoId",
                        column: x => x.ContratoAnteriorAditadoId,
                        principalSchema: "clientes",
                        principalTable: "contrato",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_contrato_empreendimento_EmpreendimentoId",
                        column: x => x.EmpreendimentoId,
                        principalSchema: "empreendimento",
                        principalTable: "empreendimento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contrato_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contrato_intervaloreajuste_IntervaloReajusteId",
                        column: x => x.IntervaloReajusteId,
                        principalSchema: "financeiro",
                        principalTable: "intervaloreajuste",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contrato_situacaocontrato_SituacaoId",
                        column: x => x.SituacaoId,
                        principalSchema: "clientes",
                        principalTable: "situacaocontrato",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contrato_tipoAmortizacao_TipoAmortizacaoId",
                        column: x => x.TipoAmortizacaoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoAmortizacao",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contrato_tipoOperacaofinanceira_TipoOperacaoId",
                        column: x => x.TipoOperacaoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoOperacaofinanceira",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contrato_tipoaditamento_TipoAditamentoId",
                        column: x => x.TipoAditamentoId,
                        principalSchema: "clientes",
                        principalTable: "tipoaditamento",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_contrato_tipocontrato_TipoId",
                        column: x => x.TipoId,
                        principalSchema: "clientes",
                        principalTable: "tipocontrato",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contrato_tipocontratoproduto_TipoProdutoId",
                        column: x => x.TipoProdutoId,
                        principalSchema: "clientes",
                        principalTable: "tipocontratoproduto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contrato_tipogateway_TipoGatewayId",
                        column: x => x.TipoGatewayId,
                        principalSchema: "financeiro",
                        principalTable: "tipogateway",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_contrato_tipoindice_TipoIndiceId",
                        column: x => x.TipoIndiceId,
                        principalSchema: "financeiro",
                        principalTable: "tipoindice",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contrato_tipoprocessojudicial_TipoProcessoJudicialId",
                        column: x => x.TipoProcessoJudicialId,
                        principalSchema: "geral",
                        principalTable: "tipoprocessojudicial",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_contrato_unidade_UnidadePrincipalId",
                        column: x => x.UnidadePrincipalId,
                        principalSchema: "empreendimento",
                        principalTable: "unidade",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "imovel",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UnidadeId = table.Column<int>(type: "integer", nullable: false),
                    Exclusivo = table.Column<bool>(type: "boolean", nullable: false),
                    Ocupado = table.Column<bool>(type: "boolean", nullable: false),
                    Alugado = table.Column<bool>(type: "boolean", nullable: false),
                    Placa = table.Column<bool>(type: "boolean", nullable: false),
                    Financiavel = table.Column<bool>(type: "boolean", nullable: false),
                    NaPlanta = table.Column<bool>(type: "boolean", nullable: false),
                    TipoImovelId = table.Column<int>(type: "integer", nullable: false),
                    SeguradoraId = table.Column<int>(type: "integer", nullable: true),
                    DataVencimentoAutorizacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    ValorAluguel = table.Column<decimal>(type: "numeric", nullable: false),
                    Taxa_CodigoLixo = table.Column<string>(type: "text", nullable: true),
                    Taxa_CodigoSequencial = table.Column<string>(type: "text", nullable: true),
                    Taxa_CodigoAgua = table.Column<string>(type: "text", nullable: true),
                    Taxa_CodigoEnergia = table.Column<string>(type: "text", nullable: true),
                    Taxa_CodigoGas = table.Column<string>(type: "text", nullable: true),
                    Taxa_CodigoSpu = table.Column<string>(type: "text", nullable: true),
                    Taxa_CodigoHidrometro = table.Column<string>(type: "text", nullable: true),
                    Taxa_Descricao = table.Column<string>(type: "text", nullable: true),
                    Taxa_ApoliceSeguro = table.Column<decimal>(type: "numeric", nullable: true),
                    Taxa_ValorCaucao = table.Column<decimal>(type: "numeric", nullable: true),
                    Taxa_ValorCondominio = table.Column<decimal>(type: "numeric", nullable: true),
                    Taxa_Iptu_NumeroRegistro = table.Column<string>(type: "text", nullable: true),
                    Taxa_Iptu_ValorVenal = table.Column<decimal>(type: "numeric", nullable: true),
                    Taxa_Iptu_ValorRealImposto = table.Column<decimal>(type: "numeric", nullable: true),
                    Taxa_Iptu_ValorTaxas = table.Column<decimal>(type: "numeric", nullable: true),
                    Taxa_Iptu_ValorTotal = table.Column<decimal>(type: "numeric", nullable: true),
                    Taxa_Cmb_NumeroRegistro = table.Column<string>(type: "text", nullable: true),
                    Taxa_Cmb_Valor = table.Column<decimal>(type: "numeric", nullable: true),
                    Taxa_Cmb_Multa = table.Column<decimal>(type: "numeric", nullable: true),
                    Taxa_Cmb_Vencimento = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Infraestrutura_Dimensao_AreaImovel = table.Column<decimal>(type: "numeric", nullable: true),
                    Infraestrutura_Dimensao_AreaTerreno = table.Column<decimal>(type: "numeric", nullable: true),
                    Infraestrutura_Dimensao_QuantidadeQuarto = table.Column<int>(type: "integer", nullable: true),
                    Infraestrutura_Dimensao_QuantidadeBanheiro = table.Column<int>(type: "integer", nullable: true),
                    Infraestrutura_Dimensao_QuantidadeVagas = table.Column<int>(type: "integer", nullable: true),
                    Infraestrutura_Dimensao_ZonaUso = table.Column<int>(type: "integer", nullable: true),
                    Infraestrutura_Dimensao_CoeficienteAproveitamento = table.Column<decimal>(type: "numeric", nullable: true),
                    Infraestrutura_Interna_ArCondicionado = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Interna_AreaServico = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Interna_ArmarioQuarto = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Interna_ArmarioCozinha = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Interna_ArmarioBanheiro = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Interna_Dispensa = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Interna_Lavabo = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Interna_VarandaGourmet = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Interna_AreaPrivativa = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Interna_BoxBanheiro = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Interna_Closet = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Interna_Mobiliado = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Interna_SolManha = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Interna_VistaMar = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Interna_Dce = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Interna_Escritorio = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Interna_Rouparia = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Externa_VagaGaragem = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Externa_AguaIndividual = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Externa_CercaEletrica = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Externa_PortaoEletrico = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Externa_BoxDespejo = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Externa_Elevador = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Externa_AquiecimentoEletrico = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Externa_AquecimentoGas = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Externa_GasCanalizado = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Externa_Alarme = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Externa_Cftv = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Externa_Lavanderia = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Externa_AquecimentoSolar = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Externa_Jardim = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Externa_Interfone = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Externa_Portaria24Hrs = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Observacao = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_imovel", x => x.Id);
                    table.ForeignKey(
                        name: "FK_imovel_pessoa_SeguradoraId",
                        column: x => x.SeguradoraId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_imovel_tipoimovel_TipoImovelId",
                        column: x => x.TipoImovelId,
                        principalSchema: "empreendimento",
                        principalTable: "tipoimovel",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_imovel_unidade_UnidadeId",
                        column: x => x.UnidadeId,
                        principalSchema: "empreendimento",
                        principalTable: "unidade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Jazigo",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UnidadeId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Jazigo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Jazigo_unidade_UnidadeId",
                        column: x => x.UnidadeId,
                        principalSchema: "empreendimento",
                        principalTable: "unidade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "lote",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UnidadeId = table.Column<int>(type: "integer", nullable: false),
                    Dimensao_Frente = table.Column<decimal>(type: "numeric", nullable: true),
                    Dimensao_Fundo = table.Column<decimal>(type: "numeric", nullable: true),
                    Dimensao_LadoEsquerdo = table.Column<decimal>(type: "numeric", nullable: true),
                    Dimensao_LadoDireito = table.Column<decimal>(type: "numeric", nullable: true),
                    Dimensao_Curva = table.Column<decimal>(type: "numeric", nullable: true),
                    Dimensao_AreaTotal = table.Column<decimal>(type: "numeric", nullable: true),
                    Infraestrutura_Lazer_Academia = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_Piscina = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_SalaMassagem = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_Churrasqueira = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_HomeCinema = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_QuadraTenis = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_Sauna = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_Hidromassagem = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_QuadraPoliesportiva = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_SalaoJogos = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_SalaoFesta = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_Wifi = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Lazer_Playground = table.Column<bool>(type: "boolean", nullable: true),
                    Infraestrutura_Observacao = table.Column<string>(type: "text", nullable: true),
                    Legalizacao_Matricula = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    Legalizacao_Rgi = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    Legalizacao_NumeroProcesso = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    Legalizacao_OrgaoEmissor = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    Legalizacao_LivroNumero = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Legalizacao_EscrituraLavrada = table.Column<string>(type: "character varying(15)", maxLength: 15, nullable: true),
                    Legalizacao_IncricaoCadastral = table.Column<string>(type: "character varying(25)", maxLength: 25, nullable: true),
                    Legalizacao_CartorioId = table.Column<int>(type: "integer", nullable: true),
                    Legalizacao_Observacao = table.Column<string>(type: "text", nullable: true),
                    Confrontante_Frente = table.Column<decimal>(type: "numeric", nullable: true),
                    Confrontante_Fundo = table.Column<decimal>(type: "numeric", nullable: true),
                    Confrontante_LadoEsquerdo = table.Column<decimal>(type: "numeric", nullable: true),
                    Confrontante_LadoDireito = table.Column<decimal>(type: "numeric", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_lote", x => x.Id);
                    table.ForeignKey(
                        name: "FK_lote_cartorio_Legalizacao_CartorioId",
                        column: x => x.Legalizacao_CartorioId,
                        principalSchema: "geral",
                        principalTable: "cartorio",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_lote_unidade_UnidadeId",
                        column: x => x.UnidadeId,
                        principalSchema: "empreendimento",
                        principalTable: "unidade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "planopagamentounidade",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UnidadeId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "text", nullable: true),
                    IntervaloReajusteId = table.Column<int>(type: "integer", nullable: false),
                    TipoIndiceId = table.Column<int>(type: "integer", nullable: false),
                    TipoAmortizacaoId = table.Column<int>(type: "integer", nullable: false),
                    TipoMesReajusteId = table.Column<int>(type: "integer", nullable: false),
                    TipoAnoInicioReajusteId = table.Column<int>(type: "integer", nullable: false),
                    JurosTabela = table.Column<decimal>(type: "numeric", nullable: false),
                    TaxaGestao = table.Column<decimal>(type: "numeric", nullable: false),
                    SeguroMPI = table.Column<decimal>(type: "numeric", nullable: false),
                    SeguroDFI = table.Column<decimal>(type: "numeric", nullable: false),
                    IsDFIFixo = table.Column<bool>(type: "boolean", nullable: false),
                    TipoValorTotalId = table.Column<int>(type: "integer", nullable: false),
                    ValorMetroQuadrado = table.Column<decimal>(type: "numeric", nullable: false),
                    ValorUnidade = table.Column<decimal>(type: "numeric", nullable: false),
                    Entrada_GerarFinanciamentoComIntermediaria = table.Column<bool>(type: "boolean", nullable: true),
                    Entrada_GerarFinanciamentoPosEntrada = table.Column<bool>(type: "boolean", nullable: true),
                    Entrada_IsReajustavel = table.Column<bool>(type: "boolean", nullable: true),
                    Entrada_TipoId = table.Column<int>(type: "integer", nullable: true),
                    Entrada_TipoIntervaloParcelaId = table.Column<int>(type: "integer", nullable: true),
                    Entrada_PorcentagemValorTotal = table.Column<decimal>(type: "numeric", nullable: true),
                    Entrada_Valor = table.Column<decimal>(type: "numeric", nullable: true),
                    Entrada_PrazosDisponiveis = table.Column<List<int>>(type: "integer[]", nullable: true),
                    Entrada_Prazo = table.Column<int>(type: "integer", nullable: true),
                    Intermediaria_GerarFinanciamentoComIntermediaria = table.Column<bool>(type: "boolean", nullable: true),
                    Intermediaria_GerarFinanciamentoPosEntrada = table.Column<bool>(type: "boolean", nullable: true),
                    Intermediaria_IsReajustavel = table.Column<bool>(type: "boolean", nullable: true),
                    Intermediaria_TipoId = table.Column<int>(type: "integer", nullable: true),
                    Intermediaria_TipoIntervaloParcelaId = table.Column<int>(type: "integer", nullable: true),
                    Intermediaria_PorcentagemValorTotal = table.Column<decimal>(type: "numeric", nullable: true),
                    Intermediaria_Valor = table.Column<decimal>(type: "numeric", nullable: true),
                    Intermediaria_PrazosDisponiveis = table.Column<List<int>>(type: "integer[]", nullable: true),
                    Intermediaria_Prazo = table.Column<int>(type: "integer", nullable: true),
                    Financiamento_GerarFinanciamentoComIntermediaria = table.Column<bool>(type: "boolean", nullable: true),
                    Financiamento_GerarFinanciamentoPosEntrada = table.Column<bool>(type: "boolean", nullable: true),
                    Financiamento_IsReajustavel = table.Column<bool>(type: "boolean", nullable: true),
                    Financiamento_TipoId = table.Column<int>(type: "integer", nullable: true),
                    Financiamento_TipoIntervaloParcelaId = table.Column<int>(type: "integer", nullable: true),
                    Financiamento_PorcentagemValorTotal = table.Column<decimal>(type: "numeric", nullable: true),
                    Financiamento_Valor = table.Column<decimal>(type: "numeric", nullable: true),
                    Financiamento_PrazosDisponiveis = table.Column<List<int>>(type: "integer[]", nullable: true),
                    Financiamento_Prazo = table.Column<int>(type: "integer", nullable: true),
                    TipoOperacaoId = table.Column<int>(type: "integer", nullable: true),
                    TipoGatewayId = table.Column<int>(type: "integer", nullable: true),
                    ContaCorrenteId = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_JurosDia = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_Multa = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DescontoVencimento = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DiasDescontoVencimento = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_IsDescontoVencimentoPercentual = table.Column<bool>(type: "boolean", nullable: true),
                    EncargoFinanceiro_DescontoAntecipacao = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_CorrecaoMonetaria = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DiasAposVencimentoNaoReceber = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_DiasProtesto = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_DiasNegativacao = table.Column<int>(type: "integer", nullable: true),
                    TaxaBoleto = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_planopagamentounidade", x => x.Id);
                    table.ForeignKey(
                        name: "FK_planopagamentounidade_contacorrente_ContaCorrenteId",
                        column: x => x.ContaCorrenteId,
                        principalSchema: "financeiro",
                        principalTable: "contacorrente",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentounidade_intervaloreajuste_IntervaloReajusteId",
                        column: x => x.IntervaloReajusteId,
                        principalSchema: "financeiro",
                        principalTable: "intervaloreajuste",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_planopagamentounidade_tipoAmortizacao_TipoAmortizacaoId",
                        column: x => x.TipoAmortizacaoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoAmortizacao",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_planopagamentounidade_tipoOperacaofinanceira_TipoOperacaoId",
                        column: x => x.TipoOperacaoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoOperacaofinanceira",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentounidade_tipoanoinicioreajuste_TipoAnoInicioRe~",
                        column: x => x.TipoAnoInicioReajusteId,
                        principalSchema: "financeiro",
                        principalTable: "tipoanoinicioreajuste",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_planopagamentounidade_tipogateway_TipoGatewayId",
                        column: x => x.TipoGatewayId,
                        principalSchema: "financeiro",
                        principalTable: "tipogateway",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentounidade_tipoindice_TipoIndiceId",
                        column: x => x.TipoIndiceId,
                        principalSchema: "financeiro",
                        principalTable: "tipoindice",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_planopagamentounidade_tipointervaloparcelas_Entrada_TipoInt~",
                        column: x => x.Entrada_TipoIntervaloParcelaId,
                        principalSchema: "financeiro",
                        principalTable: "tipointervaloparcelas",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentounidade_tipointervaloparcelas_Financiamento_T~",
                        column: x => x.Financiamento_TipoIntervaloParcelaId,
                        principalSchema: "financeiro",
                        principalTable: "tipointervaloparcelas",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentounidade_tipointervaloparcelas_Intermediaria_T~",
                        column: x => x.Intermediaria_TipoIntervaloParcelaId,
                        principalSchema: "financeiro",
                        principalTable: "tipointervaloparcelas",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentounidade_tipomesreajuste_TipoMesReajusteId",
                        column: x => x.TipoMesReajusteId,
                        principalSchema: "financeiro",
                        principalTable: "tipomesreajuste",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_planopagamentounidade_tipoplanopagamento_Entrada_TipoId",
                        column: x => x.Entrada_TipoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoplanopagamento",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentounidade_tipoplanopagamento_Financiamento_Tipo~",
                        column: x => x.Financiamento_TipoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoplanopagamento",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentounidade_tipoplanopagamento_Intermediaria_Tipo~",
                        column: x => x.Intermediaria_TipoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoplanopagamento",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_planopagamentounidade_tipoplanopagamento_TipoValorTotalId",
                        column: x => x.TipoValorTotalId,
                        principalSchema: "financeiro",
                        principalTable: "tipoplanopagamento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_planopagamentounidade_unidade_UnidadeId",
                        column: x => x.UnidadeId,
                        principalSchema: "empreendimento",
                        principalTable: "unidade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "unidade_proprietario",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UnidadeId = table.Column<int>(type: "integer", nullable: false),
                    ProprietarioId = table.Column<int>(type: "integer", nullable: false),
                    Participacao = table.Column<decimal>(type: "numeric", nullable: false),
                    Observacao = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_unidade_proprietario", x => x.Id);
                    table.ForeignKey(
                        name: "FK_unidade_proprietario_pessoa_ProprietarioId",
                        column: x => x.ProprietarioId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_unidade_proprietario_unidade_UnidadeId",
                        column: x => x.UnidadeId,
                        principalSchema: "empreendimento",
                        principalTable: "unidade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "unidadefoto",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UnidadeId = table.Column<int>(type: "integer", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_unidadefoto", x => x.Id);
                    table.ForeignKey(
                        name: "FK_unidadefoto_unidade_UnidadeId",
                        column: x => x.UnidadeId,
                        principalSchema: "empreendimento",
                        principalTable: "unidade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_unidadefoto_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "unidadevicio",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UnidadeId = table.Column<int>(type: "integer", nullable: false),
                    VicioId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_unidadevicio", x => x.Id);
                    table.ForeignKey(
                        name: "FK_unidadevicio_unidade_UnidadeId",
                        column: x => x.UnidadeId,
                        principalSchema: "empreendimento",
                        principalTable: "unidade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_unidadevicio_vicio_VicioId",
                        column: x => x.VicioId,
                        principalSchema: "empreendimento",
                        principalTable: "vicio",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "orcamentoetapaitem",
                schema: "orcamentoobras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EtapaId = table.Column<int>(type: "integer", nullable: false),
                    ComposicaoId = table.Column<int>(type: "integer", nullable: false),
                    Quantidade = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_orcamentoetapaitem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_orcamentoetapaitem_composicao_ComposicaoId",
                        column: x => x.ComposicaoId,
                        principalSchema: "orcamentoobras",
                        principalTable: "composicao",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_orcamentoetapaitem_orcamentoetapa_EtapaId",
                        column: x => x.EtapaId,
                        principalSchema: "orcamentoobras",
                        principalTable: "orcamentoetapa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "contratocliente",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ContratoId = table.Column<int>(type: "integer", nullable: false),
                    ClienteId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_contratocliente", x => x.Id);
                    table.ForeignKey(
                        name: "FK_contratocliente_contrato_ContratoId",
                        column: x => x.ContratoId,
                        principalSchema: "clientes",
                        principalTable: "contrato",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contratocliente_pessoa_ClienteId",
                        column: x => x.ClienteId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "contratocorretor",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ContratoId = table.Column<int>(type: "integer", nullable: false),
                    CorretorId = table.Column<int>(type: "integer", nullable: false),
                    Percentual = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_contratocorretor", x => x.Id);
                    table.ForeignKey(
                        name: "FK_contratocorretor_contrato_ContratoId",
                        column: x => x.ContratoId,
                        principalSchema: "clientes",
                        principalTable: "contrato",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contratocorretor_pessoa_CorretorId",
                        column: x => x.CorretorId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "contratodigital",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "text", nullable: true),
                    TipoId = table.Column<int>(type: "integer", nullable: false),
                    ConteudoEditavel = table.Column<string>(type: "text", nullable: true),
                    SituacaoId = table.Column<int>(type: "integer", nullable: false),
                    DFourSignDocumentId = table.Column<string>(type: "text", nullable: true),
                    ContratoId = table.Column<int>(type: "integer", nullable: false),
                    DataUploadDocumento = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataEnvioAssinatura = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataFinalizado = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataCancelado = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_contratodigital", x => x.Id);
                    table.ForeignKey(
                        name: "FK_contratodigital_contrato_ContratoId",
                        column: x => x.ContratoId,
                        principalSchema: "clientes",
                        principalTable: "contrato",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contratodigital_situacaocontratodigital_SituacaoId",
                        column: x => x.SituacaoId,
                        principalSchema: "clientes",
                        principalTable: "situacaocontratodigital",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contratodigital_tipocontratodigital_TipoId",
                        column: x => x.TipoId,
                        principalSchema: "clientes",
                        principalTable: "tipocontratodigital",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "contratodocumento",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ContratoId = table.Column<int>(type: "integer", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_contratodocumento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_contratodocumento_contrato_ContratoId",
                        column: x => x.ContratoId,
                        principalSchema: "clientes",
                        principalTable: "contrato",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contratodocumento_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "contratoobservacao",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ContratoId = table.Column<int>(type: "integer", nullable: false),
                    Observacao = table.Column<string>(type: "text", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: false),
                    DataHora = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_contratoobservacao", x => x.Id);
                    table.ForeignKey(
                        name: "FK_contratoobservacao_contrato_ContratoId",
                        column: x => x.ContratoId,
                        principalSchema: "clientes",
                        principalTable: "contrato",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contratoobservacao_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "contratounidadeadicional",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ContratoId = table.Column<int>(type: "integer", nullable: false),
                    UnidadeId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_contratounidadeadicional", x => x.Id);
                    table.ForeignKey(
                        name: "FK_contratounidadeadicional_contrato_ContratoId",
                        column: x => x.ContratoId,
                        principalSchema: "clientes",
                        principalTable: "contrato",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contratounidadeadicional_unidade_UnidadeId",
                        column: x => x.UnidadeId,
                        principalSchema: "empreendimento",
                        principalTable: "unidade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "contratovistoria",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ContratoId = table.Column<int>(type: "integer", nullable: false),
                    Data = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Observacao = table.Column<string>(type: "text", nullable: true),
                    DescricaoReparo = table.Column<string>(type: "text", nullable: true),
                    ValorReparo = table.Column<decimal>(type: "numeric", nullable: false),
                    Vistoriador = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_contratovistoria", x => x.Id);
                    table.ForeignKey(
                        name: "FK_contratovistoria_contrato_ContratoId",
                        column: x => x.ContratoId,
                        principalSchema: "clientes",
                        principalTable: "contrato",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "despesa",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    CodigoOrigem = table.Column<int>(type: "integer", nullable: true),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    EmpreendimentoId = table.Column<int>(type: "integer", nullable: true),
                    ContratoId = table.Column<int>(type: "integer", nullable: true),
                    TipoId = table.Column<int>(type: "integer", nullable: false),
                    OrigemId = table.Column<int>(type: "integer", nullable: false),
                    FornecedorId = table.Column<int>(type: "integer", nullable: false),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false),
                    TipoDocumentoId = table.Column<int>(type: "integer", nullable: false),
                    NumeroDocumento = table.Column<string>(type: "character varying(35)", maxLength: 35, nullable: true),
                    ChaveDfe = table.Column<string>(type: "character varying(44)", maxLength: 44, nullable: true),
                    Observacao = table.Column<string>(type: "text", nullable: true),
                    SaldoPreAditamento = table.Column<decimal>(type: "numeric", nullable: false),
                    IsMultiplosPedidos = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_despesa", x => x.Id);
                    table.ForeignKey(
                        name: "FK_despesa_contrato_ContratoId",
                        column: x => x.ContratoId,
                        principalSchema: "clientes",
                        principalTable: "contrato",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_despesa_empreendimento_EmpreendimentoId",
                        column: x => x.EmpreendimentoId,
                        principalSchema: "empreendimento",
                        principalTable: "empreendimento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_despesa_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_despesa_origemdespesa_OrigemId",
                        column: x => x.OrigemId,
                        principalSchema: "financeiro",
                        principalTable: "origemdespesa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_despesa_pessoa_FornecedorId",
                        column: x => x.FornecedorId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_despesa_tipodespesa_TipoId",
                        column: x => x.TipoId,
                        principalSchema: "financeiro",
                        principalTable: "tipodespesa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_despesa_tipodocumento_TipoDocumentoId",
                        column: x => x.TipoDocumentoId,
                        principalSchema: "financeiro",
                        principalTable: "tipodocumento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "historicosituacaocontrato",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    DataAlteracao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    SituacaoId = table.Column<int>(type: "integer", nullable: false),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true),
                    ContratoId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_historicosituacaocontrato", x => x.Id);
                    table.ForeignKey(
                        name: "FK_historicosituacaocontrato_contrato_ContratoId",
                        column: x => x.ContratoId,
                        principalSchema: "clientes",
                        principalTable: "contrato",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_historicosituacaocontrato_situacaocontrato_SituacaoId",
                        column: x => x.SituacaoId,
                        principalSchema: "clientes",
                        principalTable: "situacaocontrato",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_historicosituacaocontrato_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "receita",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    EmpreendimentoId = table.Column<int>(type: "integer", nullable: true),
                    TipoId = table.Column<int>(type: "integer", nullable: false),
                    ClienteId = table.Column<int>(type: "integer", nullable: false),
                    ContratoId = table.Column<int>(type: "integer", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false),
                    TipoDocumentoId = table.Column<int>(type: "integer", nullable: false),
                    NumeroDocumento = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    Observacao = table.Column<string>(type: "text", nullable: true),
                    SaldoPreAditamento = table.Column<decimal>(type: "numeric", nullable: false),
                    GerarBoletoAutomatico = table.Column<bool>(type: "boolean", nullable: false),
                    RealizarCobrancaAutomatica = table.Column<bool>(type: "boolean", nullable: false),
                    TipoGatewayId = table.Column<int>(type: "integer", nullable: true),
                    IsReajustavel = table.Column<bool>(type: "boolean", nullable: false),
                    ContaCorrenteId = table.Column<int>(type: "integer", nullable: true),
                    TipoOperacaoId = table.Column<int>(type: "integer", nullable: false),
                    IsReceitaAgua = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_receita", x => x.Id);
                    table.ForeignKey(
                        name: "FK_receita_contacorrente_ContaCorrenteId",
                        column: x => x.ContaCorrenteId,
                        principalSchema: "financeiro",
                        principalTable: "contacorrente",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_receita_contrato_ContratoId",
                        column: x => x.ContratoId,
                        principalSchema: "clientes",
                        principalTable: "contrato",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_receita_empreendimento_EmpreendimentoId",
                        column: x => x.EmpreendimentoId,
                        principalSchema: "empreendimento",
                        principalTable: "empreendimento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_receita_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_receita_pessoa_ClienteId",
                        column: x => x.ClienteId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_receita_tipoOperacaofinanceira_TipoOperacaoId",
                        column: x => x.TipoOperacaoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoOperacaofinanceira",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_receita_tipodocumento_TipoDocumentoId",
                        column: x => x.TipoDocumentoId,
                        principalSchema: "financeiro",
                        principalTable: "tipodocumento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_receita_tipogateway_TipoGatewayId",
                        column: x => x.TipoGatewayId,
                        principalSchema: "financeiro",
                        principalTable: "tipogateway",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_receita_tiporeceita_TipoId",
                        column: x => x.TipoId,
                        principalSchema: "financeiro",
                        principalTable: "tiporeceita",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "reserva",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UnidadeId = table.Column<int>(type: "integer", nullable: false),
                    LeadId = table.Column<int>(type: "integer", nullable: true),
                    CorretorId = table.Column<int>(type: "integer", nullable: true),
                    TipoReservaId = table.Column<int>(type: "integer", nullable: false),
                    SituacaoId = table.Column<int>(type: "integer", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    MotivoCancelamentoReservaId = table.Column<int>(type: "integer", nullable: true),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    DataExpiracao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    DataCadastroPreReserva = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataCadastroReserva = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataCancelamento = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataEnvioAprovacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataVenda = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    ContratoId = table.Column<int>(type: "integer", nullable: true),
                    PosicaoFunil = table.Column<int>(type: "integer", nullable: false),
                    ColunaFunilId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_reserva", x => x.Id);
                    table.ForeignKey(
                        name: "FK_reserva_colunafunil_ColunaFunilId",
                        column: x => x.ColunaFunilId,
                        principalSchema: "geral",
                        principalTable: "colunafunil",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_reserva_contrato_ContratoId",
                        column: x => x.ContratoId,
                        principalSchema: "clientes",
                        principalTable: "contrato",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_reserva_lead_LeadId",
                        column: x => x.LeadId,
                        principalSchema: "geral",
                        principalTable: "lead",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_reserva_motivocancelamentoreserva_MotivoCancelamentoReserva~",
                        column: x => x.MotivoCancelamentoReservaId,
                        principalSchema: "geral",
                        principalTable: "motivocancelamentoreserva",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_reserva_situacaoreserva_SituacaoId",
                        column: x => x.SituacaoId,
                        principalSchema: "empreendimento",
                        principalTable: "situacaoreserva",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_reserva_tiporeserva_TipoReservaId",
                        column: x => x.TipoReservaId,
                        principalSchema: "empreendimento",
                        principalTable: "tiporeserva",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_reserva_unidade_UnidadeId",
                        column: x => x.UnidadeId,
                        principalSchema: "empreendimento",
                        principalTable: "unidade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_reserva_usuario_CorretorId",
                        column: x => x.CorretorId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "ladoadicional",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Nome = table.Column<string>(type: "character varying(40)", maxLength: 40, nullable: true),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false),
                    EmpreendimentoId = table.Column<int>(type: "integer", nullable: true),
                    LoteId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ladoadicional", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ladoadicional_empreendimento_EmpreendimentoId",
                        column: x => x.EmpreendimentoId,
                        principalSchema: "empreendimento",
                        principalTable: "empreendimento",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ladoadicional_lote_LoteId",
                        column: x => x.LoteId,
                        principalSchema: "empreendimento",
                        principalTable: "lote",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "contratodigitaldocumento",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ContratoDigitalId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_contratodigitaldocumento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_contratodigitaldocumento_contratodigital_ContratoDigitalId",
                        column: x => x.ContratoDigitalId,
                        principalSchema: "clientes",
                        principalTable: "contratodigital",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contratodigitaldocumento_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "signatariocontratodigital",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ClienteId = table.Column<int>(type: "integer", nullable: true),
                    Email = table.Column<string>(type: "text", nullable: true),
                    ContratoDigitalId = table.Column<int>(type: "integer", nullable: false),
                    SituacaoId = table.Column<int>(type: "integer", nullable: false),
                    TipoAssinaturaId = table.Column<int>(type: "integer", nullable: false),
                    DFourSignKeySigner = table.Column<string>(type: "text", nullable: true),
                    DataRegistroDFourSign = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataAssinaturaDocumento = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_signatariocontratodigital", x => x.Id);
                    table.ForeignKey(
                        name: "FK_signatariocontratodigital_contratodigital_ContratoDigitalId",
                        column: x => x.ContratoDigitalId,
                        principalSchema: "clientes",
                        principalTable: "contratodigital",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_signatariocontratodigital_pessoa_ClienteId",
                        column: x => x.ClienteId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_signatariocontratodigital_situacaoemailsignatario_SituacaoId",
                        column: x => x.SituacaoId,
                        principalSchema: "clientes",
                        principalTable: "situacaoemailsignatario",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_signatariocontratodigital_tipoassinatura_TipoAssinaturaId",
                        column: x => x.TipoAssinaturaId,
                        principalSchema: "clientes",
                        principalTable: "tipoassinatura",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "contratovistoriafoto",
                schema: "clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ContratoVistoriaId = table.Column<int>(type: "integer", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_contratovistoriafoto", x => x.Id);
                    table.ForeignKey(
                        name: "FK_contratovistoriafoto_contratovistoria_ContratoVistoriaId",
                        column: x => x.ContratoVistoriaId,
                        principalSchema: "clientes",
                        principalTable: "contratovistoria",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_contratovistoriafoto_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "despesaclassificacao",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    DespesaId = table.Column<int>(type: "integer", nullable: false),
                    CentroCustoId = table.Column<int>(type: "integer", nullable: false),
                    ContaGerencialId = table.Column<int>(type: "integer", nullable: false),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false),
                    Percentual = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_despesaclassificacao", x => x.Id);
                    table.ForeignKey(
                        name: "FK_despesaclassificacao_centrodecusto_CentroCustoId",
                        column: x => x.CentroCustoId,
                        principalSchema: "financeiro",
                        principalTable: "centrodecusto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_despesaclassificacao_contagerencial_ContaGerencialId",
                        column: x => x.ContaGerencialId,
                        principalSchema: "financeiro",
                        principalTable: "contagerencial",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_despesaclassificacao_despesa_DespesaId",
                        column: x => x.DespesaId,
                        principalSchema: "financeiro",
                        principalTable: "despesa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "despesadocumento",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    DespesaId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_despesadocumento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_despesadocumento_despesa_DespesaId",
                        column: x => x.DespesaId,
                        principalSchema: "financeiro",
                        principalTable: "despesa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_despesadocumento_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "despesaparcela",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    DespesaId = table.Column<int>(type: "integer", nullable: false),
                    Parcela = table.Column<int>(type: "integer", nullable: false),
                    DataVencimento = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false),
                    LinhaDigitavelBoleto = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    SituacaoId = table.Column<int>(type: "integer", nullable: false),
                    Observacao = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_despesaparcela", x => x.Id);
                    table.ForeignKey(
                        name: "FK_despesaparcela_despesa_DespesaId",
                        column: x => x.DespesaId,
                        principalSchema: "financeiro",
                        principalTable: "despesa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_despesaparcela_situacaodespesaparcela_SituacaoId",
                        column: x => x.SituacaoId,
                        principalSchema: "financeiro",
                        principalTable: "situacaodespesaparcela",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Medicao",
                schema: "projeto",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ContratoFornecedorId = table.Column<int>(type: "integer", nullable: false),
                    DespesaId = table.Column<int>(type: "integer", nullable: true),
                    Data = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Medicao", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Medicao_ContratoFornecedor_ContratoFornecedorId",
                        column: x => x.ContratoFornecedorId,
                        principalSchema: "projeto",
                        principalTable: "ContratoFornecedor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Medicao_despesa_DespesaId",
                        column: x => x.DespesaId,
                        principalSchema: "financeiro",
                        principalTable: "despesa",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "pedido",
                schema: "compras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpresaId = table.Column<int>(type: "integer", nullable: false),
                    OrcamentoId = table.Column<int>(type: "integer", nullable: false),
                    TipoId = table.Column<int>(type: "integer", nullable: false),
                    FornecedorId = table.Column<int>(type: "integer", nullable: false),
                    SituacaoFreteId = table.Column<int>(type: "integer", nullable: false),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    DataEntrega = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Conferente = table.Column<string>(type: "text", nullable: true),
                    Frete = table.Column<decimal>(type: "numeric", nullable: false),
                    DespesaId = table.Column<int>(type: "integer", nullable: true),
                    RecebidoPorXML = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_pedido", x => x.Id);
                    table.ForeignKey(
                        name: "FK_pedido_despesa_DespesaId",
                        column: x => x.DespesaId,
                        principalSchema: "financeiro",
                        principalTable: "despesa",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_pedido_empresa_EmpresaId",
                        column: x => x.EmpresaId,
                        principalSchema: "geral",
                        principalTable: "empresa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pedido_orcamento_OrcamentoId",
                        column: x => x.OrcamentoId,
                        principalSchema: "compras",
                        principalTable: "orcamento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pedido_pessoa_FornecedorId",
                        column: x => x.FornecedorId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pedido_situacaofrete_SituacaoFreteId",
                        column: x => x.SituacaoFreteId,
                        principalSchema: "geral",
                        principalTable: "situacaofrete",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pedido_tipoproduto_TipoId",
                        column: x => x.TipoId,
                        principalSchema: "almoxarifado",
                        principalTable: "tipoproduto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hidrometro",
                schema: "controleagua",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Codigo = table.Column<string>(type: "text", nullable: true),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    PessoaId = table.Column<int>(type: "integer", nullable: false),
                    NumeroHidrometro = table.Column<string>(type: "text", nullable: true),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false),
                    ContratoId = table.Column<int>(type: "integer", nullable: true),
                    ReceitaId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_hidrometro", x => x.Id);
                    table.ForeignKey(
                        name: "FK_hidrometro_contrato_ContratoId",
                        column: x => x.ContratoId,
                        principalSchema: "clientes",
                        principalTable: "contrato",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_hidrometro_pessoa_PessoaId",
                        column: x => x.PessoaId,
                        principalSchema: "geral",
                        principalTable: "pessoa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_hidrometro_receita_ReceitaId",
                        column: x => x.ReceitaId,
                        principalSchema: "financeiro",
                        principalTable: "receita",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "receitaclassificacao",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ReceitaId = table.Column<int>(type: "integer", nullable: false),
                    CentroCustoId = table.Column<int>(type: "integer", nullable: false),
                    ContaGerencialId = table.Column<int>(type: "integer", nullable: false),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false),
                    Percentual = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_receitaclassificacao", x => x.Id);
                    table.ForeignKey(
                        name: "FK_receitaclassificacao_centrodecusto_CentroCustoId",
                        column: x => x.CentroCustoId,
                        principalSchema: "financeiro",
                        principalTable: "centrodecusto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_receitaclassificacao_contagerencial_ContaGerencialId",
                        column: x => x.ContaGerencialId,
                        principalSchema: "financeiro",
                        principalTable: "contagerencial",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_receitaclassificacao_receita_ReceitaId",
                        column: x => x.ReceitaId,
                        principalSchema: "financeiro",
                        principalTable: "receita",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "receitadocumento",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ReceitaId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_receitadocumento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_receitadocumento_receita_ReceitaId",
                        column: x => x.ReceitaId,
                        principalSchema: "financeiro",
                        principalTable: "receita",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_receitadocumento_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "receitaparcela",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ReceitaId = table.Column<int>(type: "integer", nullable: false),
                    Parcela = table.Column<int>(type: "integer", nullable: false),
                    ContratoNumeroSequencia = table.Column<string>(type: "character varying(25)", maxLength: 25, nullable: true),
                    DataVencimento = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    DataVencimentoOriginal = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false),
                    LinhaDigitavelBoleto = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    QrCode = table.Column<string>(type: "text", nullable: true),
                    SituacaoId = table.Column<int>(type: "integer", nullable: false),
                    NossoNumero = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    TipoGatewayId = table.Column<int>(type: "integer", nullable: true),
                    Remessa = table.Column<int>(type: "integer", nullable: true),
                    DataRemessa = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    EncargoFinanceiro_JurosDia = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_Multa = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DescontoVencimento = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DiasDescontoVencimento = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_IsDescontoVencimentoPercentual = table.Column<bool>(type: "boolean", nullable: true),
                    EncargoFinanceiro_DescontoAntecipacao = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_CorrecaoMonetaria = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DiasAposVencimentoNaoReceber = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_DiasProtesto = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_DiasNegativacao = table.Column<int>(type: "integer", nullable: true),
                    CodigoMovimentoRetorno = table.Column<string>(type: "text", nullable: true),
                    CodigoZoop = table.Column<string>(type: "character varying(45)", maxLength: 45, nullable: true),
                    Instrucao1 = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Instrucao2 = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    Instrucao3 = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    UrlBoleto = table.Column<string>(type: "text", nullable: true),
                    AgrupadorId = table.Column<int>(type: "integer", nullable: true),
                    AntecipadorId = table.Column<int>(type: "integer", nullable: true),
                    IsAgrupador = table.Column<bool>(type: "boolean", nullable: false),
                    IsAntecipador = table.Column<bool>(type: "boolean", nullable: false),
                    ContaCorrenteId = table.Column<int>(type: "integer", nullable: true),
                    TipoOperacaoId = table.Column<int>(type: "integer", nullable: false),
                    ParcelasAgrupadasNumero = table.Column<string>(type: "text", nullable: true),
                    TipoServicoId = table.Column<int>(type: "integer", nullable: true),
                    DataEnvioCobranca = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataEnvioCobrancaSms = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Amortizacao = table.Column<decimal>(type: "numeric", nullable: false),
                    Juros = table.Column<decimal>(type: "numeric", nullable: false),
                    SaldoAmortizacaoInicioPeriodoCorrigido = table.Column<decimal>(type: "numeric", nullable: false),
                    SaldoAmortizacaoFimPeriodoCorrigido = table.Column<decimal>(type: "numeric", nullable: false),
                    SaldoAmortizacaoPeriodoOriginal = table.Column<decimal>(type: "numeric", nullable: false),
                    CorrecaoSaldo = table.Column<decimal>(type: "numeric", nullable: false),
                    ValoresAdicionais_Gestao = table.Column<decimal>(type: "numeric", nullable: true),
                    ValoresAdicionais_ValorMPI = table.Column<decimal>(type: "numeric", nullable: true),
                    ValoresAdicionais_PercentualMPI = table.Column<decimal>(type: "numeric", nullable: true),
                    ValoresAdicionais_ValorDFI = table.Column<decimal>(type: "numeric", nullable: true),
                    ValoresAdicionais_PercentualDFI = table.Column<decimal>(type: "numeric", nullable: true),
                    ValoresAdicionais_IsDFIFixo = table.Column<bool>(type: "boolean", nullable: true),
                    ValoresAdicionais_CorrecaoIndice = table.Column<decimal>(type: "numeric", nullable: true),
                    ValoresAdicionais_TaxaBoleto = table.Column<decimal>(type: "numeric", nullable: true),
                    ValoresAdicionais_NomeTaxaAdicional = table.Column<string>(type: "text", nullable: true),
                    ValoresAdicionais_ValorFixoTaxaAdicional = table.Column<decimal>(type: "numeric", nullable: true),
                    Observacao = table.Column<string>(type: "text", nullable: true),
                    Conciliado = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_receitaparcela", x => x.Id);
                    table.ForeignKey(
                        name: "FK_receitaparcela_contacorrente_ContaCorrenteId",
                        column: x => x.ContaCorrenteId,
                        principalSchema: "financeiro",
                        principalTable: "contacorrente",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_receitaparcela_receita_ReceitaId",
                        column: x => x.ReceitaId,
                        principalSchema: "financeiro",
                        principalTable: "receita",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_receitaparcela_receitaparcela_AgrupadorId",
                        column: x => x.AgrupadorId,
                        principalSchema: "financeiro",
                        principalTable: "receitaparcela",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_receitaparcela_situacaoreceitaparcela_SituacaoId",
                        column: x => x.SituacaoId,
                        principalSchema: "financeiro",
                        principalTable: "situacaoreceitaparcela",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_receitaparcela_tipoOperacaofinanceira_TipoOperacaoId",
                        column: x => x.TipoOperacaoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoOperacaofinanceira",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_receitaparcela_tipogateway_TipoGatewayId",
                        column: x => x.TipoGatewayId,
                        principalSchema: "financeiro",
                        principalTable: "tipogateway",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_receitaparcela_tiposervico_TipoServicoId",
                        column: x => x.TipoServicoId,
                        principalSchema: "financeiro",
                        principalTable: "tiposervico",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "reservaobservacao",
                schema: "empreendimento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ReservaId = table.Column<int>(type: "integer", nullable: false),
                    Observacao = table.Column<string>(type: "text", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Ativo = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_reservaobservacao", x => x.Id);
                    table.ForeignKey(
                        name: "FK_reservaobservacao_reserva_ReservaId",
                        column: x => x.ReservaId,
                        principalSchema: "empreendimento",
                        principalTable: "reserva",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_reservaobservacao_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "despesabaixa",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ParcelaId = table.Column<int>(type: "integer", nullable: false),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true),
                    DataPagamento = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Juros = table.Column<decimal>(type: "numeric", nullable: false),
                    Multa = table.Column<decimal>(type: "numeric", nullable: false),
                    Desconto = table.Column<decimal>(type: "numeric", nullable: false),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false),
                    ContaCorrenteId = table.Column<int>(type: "integer", nullable: true),
                    FormaPagamentoId = table.Column<int>(type: "integer", nullable: false),
                    Cancelado = table.Column<bool>(type: "boolean", nullable: false),
                    Automatica = table.Column<bool>(type: "boolean", nullable: false),
                    CodigoIntegracao = table.Column<string>(type: "text", nullable: true),
                    Conciliado = table.Column<bool>(type: "boolean", nullable: false),
                    FitId = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_despesabaixa", x => x.Id);
                    table.ForeignKey(
                        name: "FK_despesabaixa_contacorrente_ContaCorrenteId",
                        column: x => x.ContaCorrenteId,
                        principalSchema: "financeiro",
                        principalTable: "contacorrente",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_despesabaixa_despesaparcela_ParcelaId",
                        column: x => x.ParcelaId,
                        principalSchema: "financeiro",
                        principalTable: "despesaparcela",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_despesabaixa_formapagamento_FormaPagamentoId",
                        column: x => x.FormaPagamentoId,
                        principalSchema: "financeiro",
                        principalTable: "formapagamento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_despesabaixa_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Execucao",
                schema: "projeto",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ContratoItemId = table.Column<int>(type: "integer", nullable: false),
                    MedicaoId = table.Column<int>(type: "integer", nullable: false),
                    Data = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Quantidade = table.Column<decimal>(type: "numeric", nullable: false),
                    ValorUnitario = table.Column<decimal>(type: "numeric", nullable: false),
                    ResponsavelId = table.Column<int>(type: "integer", nullable: false),
                    Observacao = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Execucao", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Execucao_ContratoFornecedorItem_ContratoItemId",
                        column: x => x.ContratoItemId,
                        principalSchema: "projeto",
                        principalTable: "ContratoFornecedorItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Execucao_Medicao_MedicaoId",
                        column: x => x.MedicaoId,
                        principalSchema: "projeto",
                        principalTable: "Medicao",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Execucao_usuario_ResponsavelId",
                        column: x => x.ResponsavelId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "movimentacao",
                schema: "almoxarifado",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpreendimentoConsumidorId = table.Column<int>(type: "integer", nullable: true),
                    PedidoId = table.Column<int>(type: "integer", nullable: true),
                    EtapaId = table.Column<int>(type: "integer", nullable: true),
                    AlmoxarifadoItemId = table.Column<int>(type: "integer", nullable: false),
                    TipoId = table.Column<int>(type: "integer", nullable: false),
                    TipoOrigemId = table.Column<int>(type: "integer", nullable: false),
                    Quantidade = table.Column<decimal>(type: "numeric", nullable: false),
                    Custo = table.Column<decimal>(type: "numeric", nullable: false),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false),
                    DataHora = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_movimentacao", x => x.Id);
                    table.ForeignKey(
                        name: "FK_movimentacao_almoxarifadoitem_AlmoxarifadoItemId",
                        column: x => x.AlmoxarifadoItemId,
                        principalSchema: "almoxarifado",
                        principalTable: "almoxarifadoitem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_movimentacao_empreendimento_EmpreendimentoConsumidorId",
                        column: x => x.EmpreendimentoConsumidorId,
                        principalSchema: "empreendimento",
                        principalTable: "empreendimento",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_movimentacao_etapa_EtapaId",
                        column: x => x.EtapaId,
                        principalSchema: "projeto",
                        principalTable: "etapa",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_movimentacao_pedido_PedidoId",
                        column: x => x.PedidoId,
                        principalSchema: "compras",
                        principalTable: "pedido",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_movimentacao_tipomovimentacao_TipoId",
                        column: x => x.TipoId,
                        principalSchema: "almoxarifado",
                        principalTable: "tipomovimentacao",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_movimentacao_tipoorigem_TipoOrigemId",
                        column: x => x.TipoOrigemId,
                        principalSchema: "geral",
                        principalTable: "tipoorigem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "pedidoclassificacao",
                schema: "compras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    PedidoId = table.Column<int>(type: "integer", nullable: false),
                    CentroCustoId = table.Column<int>(type: "integer", nullable: false),
                    ContaGerencialId = table.Column<int>(type: "integer", nullable: false),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false),
                    Percentual = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_pedidoclassificacao", x => x.Id);
                    table.ForeignKey(
                        name: "FK_pedidoclassificacao_centrodecusto_CentroCustoId",
                        column: x => x.CentroCustoId,
                        principalSchema: "financeiro",
                        principalTable: "centrodecusto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pedidoclassificacao_contagerencial_ContaGerencialId",
                        column: x => x.ContaGerencialId,
                        principalSchema: "financeiro",
                        principalTable: "contagerencial",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pedidoclassificacao_pedido_PedidoId",
                        column: x => x.PedidoId,
                        principalSchema: "compras",
                        principalTable: "pedido",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "pedidoitem",
                schema: "compras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    PedidoId = table.Column<int>(type: "integer", nullable: false),
                    ProdutoId = table.Column<int>(type: "integer", nullable: false),
                    SituacaoId = table.Column<int>(type: "integer", nullable: false),
                    Quantidade = table.Column<decimal>(type: "numeric", nullable: false),
                    QuantidadeRecebida = table.Column<decimal>(type: "numeric", nullable: false),
                    ValorUnitario = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_pedidoitem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_pedidoitem_pedido_PedidoId",
                        column: x => x.PedidoId,
                        principalSchema: "compras",
                        principalTable: "pedido",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pedidoitem_produto_ProdutoId",
                        column: x => x.ProdutoId,
                        principalSchema: "almoxarifado",
                        principalTable: "produto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pedidoitem_situacaopedidoitem_SituacaoId",
                        column: x => x.SituacaoId,
                        principalSchema: "compras",
                        principalTable: "situacaopedidoitem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "pedidoxmlarquivo",
                schema: "compras",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    PedidoId = table.Column<int>(type: "integer", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_pedidoxmlarquivo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_pedidoxmlarquivo_pedido_PedidoId",
                        column: x => x.PedidoId,
                        principalSchema: "compras",
                        principalTable: "pedido",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_pedidoxmlarquivo_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "requisicao",
                schema: "almoxarifado",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    EmpreendimentoId = table.Column<int>(type: "integer", nullable: false),
                    Data = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Solicitante = table.Column<string>(type: "text", nullable: true),
                    Descricao = table.Column<string>(type: "text", nullable: false),
                    AlmoxarifadoId = table.Column<int>(type: "integer", nullable: false),
                    PedidoId = table.Column<int>(type: "integer", nullable: true),
                    DataHoraExecucao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Executada = table.Column<bool>(type: "boolean", nullable: false),
                    Titulo = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_requisicao", x => x.Id);
                    table.ForeignKey(
                        name: "FK_requisicao_almoxarifado_AlmoxarifadoId",
                        column: x => x.AlmoxarifadoId,
                        principalSchema: "almoxarifado",
                        principalTable: "almoxarifado",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_requisicao_empreendimento_EmpreendimentoId",
                        column: x => x.EmpreendimentoId,
                        principalSchema: "empreendimento",
                        principalTable: "empreendimento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_requisicao_pedido_PedidoId",
                        column: x => x.PedidoId,
                        principalSchema: "compras",
                        principalTable: "pedido",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "hidrometrounidade",
                schema: "controleagua",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    HidrometroId = table.Column<int>(type: "integer", nullable: false),
                    UnidadeId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_hidrometrounidade", x => x.Id);
                    table.ForeignKey(
                        name: "FK_hidrometrounidade_hidrometro_HidrometroId",
                        column: x => x.HidrometroId,
                        principalSchema: "controleagua",
                        principalTable: "hidrometro",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_hidrometrounidade_unidade_UnidadeId",
                        column: x => x.UnidadeId,
                        principalSchema: "empreendimento",
                        principalTable: "unidade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "antecipacaoamortizacao",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    DataAntecipacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    TipoAntecipacaoId = table.Column<int>(type: "integer", nullable: false),
                    ParcelaId = table.Column<int>(type: "integer", nullable: false),
                    PrimeiraParcelaAjustadaId = table.Column<int>(type: "integer", nullable: true),
                    QuantidadeParcelasAmortizadas = table.Column<int>(type: "integer", nullable: false),
                    ValorAmortizado = table.Column<decimal>(type: "numeric", nullable: false),
                    SaldoAmortizacaoPreAntecipacao = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_antecipacaoamortizacao", x => x.Id);
                    table.ForeignKey(
                        name: "FK_antecipacaoamortizacao_receitaparcela_ParcelaId",
                        column: x => x.ParcelaId,
                        principalSchema: "financeiro",
                        principalTable: "receitaparcela",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_antecipacaoamortizacao_tipoantecipacao_TipoAntecipacaoId",
                        column: x => x.TipoAntecipacaoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoantecipacao",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "antecipacaocomprovante",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    IsQuitacao = table.Column<bool>(type: "boolean", nullable: false),
                    Protocolo = table.Column<string>(type: "text", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: false),
                    DataEmissaoComprovante = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    DataCriacaoAntecipacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    ReceitaParcelaId = table.Column<int>(type: "integer", nullable: false),
                    EncargoContrato_JurosDia = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoContrato_Multa = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoContrato_DescontoVencimento = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoContrato_DiasDescontoVencimento = table.Column<int>(type: "integer", nullable: true),
                    EncargoContrato_IsDescontoVencimentoPercentual = table.Column<bool>(type: "boolean", nullable: true),
                    EncargoContrato_DescontoAntecipacao = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoContrato_CorrecaoMonetaria = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoContrato_DiasAposVencimentoNaoReceber = table.Column<int>(type: "integer", nullable: true),
                    EncargoContrato_DiasProtesto = table.Column<int>(type: "integer", nullable: true),
                    EncargoContrato_DiasNegativacao = table.Column<int>(type: "integer", nullable: true),
                    Documento = table.Column<byte[]>(type: "bytea", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_antecipacaocomprovante", x => x.Id);
                    table.ForeignKey(
                        name: "FK_antecipacaocomprovante_receitaparcela_ReceitaParcelaId",
                        column: x => x.ReceitaParcelaId,
                        principalSchema: "financeiro",
                        principalTable: "receitaparcela",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_antecipacaocomprovante_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "marcacaoagua",
                schema: "controleagua",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    DataAfericao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    HidrometroId = table.Column<int>(type: "integer", nullable: false),
                    Leitura = table.Column<int>(type: "integer", nullable: false),
                    ResponsavelId = table.Column<int>(type: "integer", nullable: false),
                    Consumo = table.Column<int>(type: "integer", nullable: false),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false),
                    ParcelaId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_marcacaoagua", x => x.Id);
                    table.ForeignKey(
                        name: "FK_marcacaoagua_hidrometro_HidrometroId",
                        column: x => x.HidrometroId,
                        principalSchema: "controleagua",
                        principalTable: "hidrometro",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_marcacaoagua_receitaparcela_ParcelaId",
                        column: x => x.ParcelaId,
                        principalSchema: "financeiro",
                        principalTable: "receitaparcela",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_marcacaoagua_usuario_ResponsavelId",
                        column: x => x.ResponsavelId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "receitatransacao",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ParcelaId = table.Column<int>(type: "integer", nullable: false),
                    BancoNumero = table.Column<string>(type: "text", nullable: true),
                    TipoGatewayId = table.Column<int>(type: "integer", nullable: true),
                    TipoOperacaoId = table.Column<int>(type: "integer", nullable: false),
                    CodigoIntegracao = table.Column<string>(type: "text", nullable: true),
                    UrlBoleto = table.Column<string>(type: "text", nullable: true),
                    LinhaDigitavelBoleto = table.Column<string>(type: "character varying(60)", maxLength: 60, nullable: true),
                    QrCode = table.Column<string>(type: "text", nullable: true),
                    DataRemessa = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioBoletoGeradoId = table.Column<int>(type: "integer", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    SituacaoId = table.Column<int>(type: "integer", nullable: false),
                    FormaPagamentoId = table.Column<int>(type: "integer", nullable: false),
                    ContaCorrenteId = table.Column<int>(type: "integer", nullable: true),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false),
                    Vencimento = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Juros = table.Column<decimal>(type: "numeric", nullable: false),
                    Multa = table.Column<decimal>(type: "numeric", nullable: false),
                    Desconto = table.Column<decimal>(type: "numeric", nullable: false),
                    UsuarioTransacaoId = table.Column<int>(type: "integer", nullable: true),
                    RemessaId = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_JurosDia = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_Multa = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DescontoVencimento = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DiasDescontoVencimento = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_IsDescontoVencimentoPercentual = table.Column<bool>(type: "boolean", nullable: true),
                    EncargoFinanceiro_DescontoAntecipacao = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_CorrecaoMonetaria = table.Column<decimal>(type: "numeric", nullable: true),
                    EncargoFinanceiro_DiasAposVencimentoNaoReceber = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_DiasProtesto = table.Column<int>(type: "integer", nullable: true),
                    EncargoFinanceiro_DiasNegativacao = table.Column<int>(type: "integer", nullable: true),
                    TaxaBoleto = table.Column<decimal>(type: "numeric", nullable: false),
                    NossoNumero = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    CriadoPorUmReajusteIndice = table.Column<bool>(type: "boolean", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_receitatransacao", x => x.Id);
                    table.ForeignKey(
                        name: "FK_receitatransacao_contacorrente_ContaCorrenteId",
                        column: x => x.ContaCorrenteId,
                        principalSchema: "financeiro",
                        principalTable: "contacorrente",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_receitatransacao_formapagamento_FormaPagamentoId",
                        column: x => x.FormaPagamentoId,
                        principalSchema: "financeiro",
                        principalTable: "formapagamento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_receitatransacao_receitaparcela_ParcelaId",
                        column: x => x.ParcelaId,
                        principalSchema: "financeiro",
                        principalTable: "receitaparcela",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_receitatransacao_remessa_RemessaId",
                        column: x => x.RemessaId,
                        principalSchema: "financeiro",
                        principalTable: "remessa",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_receitatransacao_situacaoreceitaparcela_SituacaoId",
                        column: x => x.SituacaoId,
                        principalSchema: "financeiro",
                        principalTable: "situacaoreceitaparcela",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_receitatransacao_tipoOperacaofinanceira_TipoOperacaoId",
                        column: x => x.TipoOperacaoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoOperacaofinanceira",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_receitatransacao_tipogateway_TipoGatewayId",
                        column: x => x.TipoGatewayId,
                        principalSchema: "financeiro",
                        principalTable: "tipogateway",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_receitatransacao_usuario_UsuarioBoletoGeradoId",
                        column: x => x.UsuarioBoletoGeradoId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_receitatransacao_usuario_UsuarioTransacaoId",
                        column: x => x.UsuarioTransacaoId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "despesabaixacomprovante",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    DespesaBaixaId = table.Column<int>(type: "integer", nullable: false),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_despesabaixacomprovante", x => x.Id);
                    table.ForeignKey(
                        name: "FK_despesabaixacomprovante_despesabaixa_DespesaBaixaId",
                        column: x => x.DespesaBaixaId,
                        principalSchema: "financeiro",
                        principalTable: "despesabaixa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_despesabaixacomprovante_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "ExecucaoDocumento",
                schema: "projeto",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ExecucaoId = table.Column<int>(type: "integer", nullable: false),
                    Descricao = table.Column<string>(type: "text", nullable: true),
                    Nome = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Tamanho = table.Column<decimal>(type: "numeric", nullable: false),
                    Tipo = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    Dados = table.Column<byte[]>(type: "bytea", nullable: true),
                    DataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExecucaoDocumento", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExecucaoDocumento_Execucao_ExecucaoId",
                        column: x => x.ExecucaoId,
                        principalSchema: "projeto",
                        principalTable: "Execucao",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ExecucaoDocumento_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "ExecucaoUnidade",
                schema: "projeto",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ExecucaoId = table.Column<int>(type: "integer", nullable: false),
                    UnidadeId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExecucaoUnidade", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExecucaoUnidade_Execucao_ExecucaoId",
                        column: x => x.ExecucaoId,
                        principalSchema: "projeto",
                        principalTable: "Execucao",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ExecucaoUnidade_unidade_UnidadeId",
                        column: x => x.UnidadeId,
                        principalSchema: "empreendimento",
                        principalTable: "unidade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "requisicaoitem",
                schema: "almoxarifado",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    RequisicaoId = table.Column<int>(type: "integer", nullable: false),
                    ProdutoId = table.Column<int>(type: "integer", nullable: false),
                    UnidadeMedidaId = table.Column<int>(type: "integer", nullable: true),
                    CustoMedio = table.Column<decimal>(type: "numeric", nullable: false),
                    EtapaId = table.Column<int>(type: "integer", nullable: false),
                    Quantidade = table.Column<decimal>(type: "numeric", nullable: false),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_requisicaoitem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_requisicaoitem_etapa_EtapaId",
                        column: x => x.EtapaId,
                        principalSchema: "projeto",
                        principalTable: "etapa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_requisicaoitem_produto_ProdutoId",
                        column: x => x.ProdutoId,
                        principalSchema: "almoxarifado",
                        principalTable: "produto",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_requisicaoitem_requisicao_RequisicaoId",
                        column: x => x.RequisicaoId,
                        principalSchema: "almoxarifado",
                        principalTable: "requisicao",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_requisicaoitem_unidademedida_UnidadeMedidaId",
                        column: x => x.UnidadeMedidaId,
                        principalSchema: "almoxarifado",
                        principalTable: "unidademedida",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "antecipacaoamortizacaoitem",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    AntecipacaoAmortizacaoId = table.Column<int>(type: "integer", nullable: false),
                    ParcelaId = table.Column<int>(type: "integer", nullable: false),
                    DadosParcelaPreAmortizacao_ValorParcela = table.Column<decimal>(type: "numeric", nullable: true),
                    DadosParcelaPreAmortizacao_Amortizacao = table.Column<decimal>(type: "numeric", nullable: true),
                    DadosParcelaPreAmortizacao_Juros = table.Column<decimal>(type: "numeric", nullable: true),
                    DadosParcelaPreAmortizacao_SaldoAmortizacaoInicioPeriodo = table.Column<decimal>(type: "numeric", nullable: true),
                    DadosParcelaPreAmortizacao_SaldoAmortizacaoFimPeriodo = table.Column<decimal>(type: "numeric", nullable: true),
                    DadosParcelaPreAmortizacao_ValorMPI = table.Column<decimal>(type: "numeric", nullable: true),
                    DadosParcelaPreAmortizacao_ValorDFI = table.Column<decimal>(type: "numeric", nullable: true),
                    ValorParcelaPosAmortizacao = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_antecipacaoamortizacaoitem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_antecipacaoamortizacaoitem_antecipacaoamortizacao_Antecipac~",
                        column: x => x.AntecipacaoAmortizacaoId,
                        principalSchema: "financeiro",
                        principalTable: "antecipacaoamortizacao",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_antecipacaoamortizacaoitem_receitaparcela_ParcelaId",
                        column: x => x.ParcelaId,
                        principalSchema: "financeiro",
                        principalTable: "receitaparcela",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "receitabaixa",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ParcelaId = table.Column<int>(type: "integer", nullable: false),
                    UsuarioId = table.Column<int>(type: "integer", nullable: true),
                    DataPagamento = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    DataCriacao = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Multa = table.Column<decimal>(type: "numeric", nullable: false),
                    Juros = table.Column<decimal>(type: "numeric", nullable: false),
                    Desconto = table.Column<decimal>(type: "numeric", nullable: false),
                    CorrecaoMonetaria = table.Column<decimal>(type: "numeric", nullable: false),
                    Valor = table.Column<decimal>(type: "numeric", nullable: false),
                    ContaCorrenteId = table.Column<int>(type: "integer", nullable: true),
                    FormaPagamentoId = table.Column<int>(type: "integer", nullable: false),
                    Cancelado = table.Column<bool>(type: "boolean", nullable: false),
                    Automatica = table.Column<bool>(type: "boolean", nullable: false),
                    CodigoIntegracao = table.Column<string>(type: "text", nullable: true),
                    TransacaoId = table.Column<int>(type: "integer", nullable: true),
                    TipoOperacaoId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_receitabaixa", x => x.Id);
                    table.ForeignKey(
                        name: "FK_receitabaixa_contacorrente_ContaCorrenteId",
                        column: x => x.ContaCorrenteId,
                        principalSchema: "financeiro",
                        principalTable: "contacorrente",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_receitabaixa_formapagamento_FormaPagamentoId",
                        column: x => x.FormaPagamentoId,
                        principalSchema: "financeiro",
                        principalTable: "formapagamento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_receitabaixa_receitaparcela_ParcelaId",
                        column: x => x.ParcelaId,
                        principalSchema: "financeiro",
                        principalTable: "receitaparcela",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_receitabaixa_receitatransacao_TransacaoId",
                        column: x => x.TransacaoId,
                        principalSchema: "financeiro",
                        principalTable: "receitatransacao",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_receitabaixa_tipoOperacaofinanceira_TipoOperacaoId",
                        column: x => x.TipoOperacaoId,
                        principalSchema: "financeiro",
                        principalTable: "tipoOperacaofinanceira",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_receitabaixa_usuario_UsuarioId",
                        column: x => x.UsuarioId,
                        principalSchema: "geral",
                        principalTable: "usuario",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "receitabaixacomprovante",
                schema: "financeiro",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    dataEmissao = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    ReceitaBaixaId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_receitabaixacomprovante", x => x.Id);
                    table.ForeignKey(
                        name: "FK_receitabaixacomprovante_receitabaixa_ReceitaBaixaId",
                        column: x => x.ReceitaBaixaId,
                        principalSchema: "financeiro",
                        principalTable: "receitabaixa",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.InsertData(
                schema: "projeto",
                table: "TipoContratoFornecedor",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Produto" },
                    { 2, "Serviço e Produto" },
                    { 3, "Serviço" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "colunafunil",
                columns: new[] { "Id", "Ativo", "ColunaFunilPaiId", "Descricao", "Nome", "Posicao" },
                values: new object[,]
                {
                    { -16, true, null, "Registra-se a perda da venda caso o cliente decida não prosseguir em qualquer etapa do processo.", "Venda Perdida", 8 },
                    { -11, true, null, "Fase subdividida em etapas detalhadas que acompanham o processo de formalização do contrato de compra.", "Contrato", 7 },
                    { -6, true, null, "Elaboração e apresentação de uma proposta formal de compra ao cliente.", "Proposta", 6 },
                    { -5, true, null, "Após a seleção de um terreno, procede-se com a análise de crédito do cliente para garantir a viabilidade financeira da compra.", "Reservas", 5 },
                    { -4, true, null, "Organizar visitas aos terrenos de interesse.", "Visita", 4 },
                    { -3, true, null, "Leads que mostraram interesse ativo e possuem uma intenção de compra mais imediata.", "Atendimento Quente", 3 },
                    { -2, true, null, "Contato inicial feito com leads que ainda não demonstraram um interesse ativo ou específico em comprar um terreno.", "Atendimento Frio", 2 },
                    { -1, true, null, "Fase que envolve a preparação para o contato inicial com o potencial cliente.", "Pré-atendimento", 1 }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "comoleadcontactou",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Não informado pelo vendedor" },
                    { 2, "Whatsapp" },
                    { 3, "Telefone" },
                    { 4, "Visita na sede" },
                    { 5, "Rede social" },
                    { 6, "Corretores" },
                    { 7, "Imobiliária" },
                    { 8, "Email" },
                    { 9, "Site" },
                    { 10, "Plantão de vendas" },
                    { 11, "Outros" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "comoleadnosencontrou",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Não informado pelo vendedor" },
                    { 2, "Outdoor fora do empreendimento" },
                    { 3, "Rádio" },
                    { 4, "Outdoor / Placa / Faixa no Empreendimento" },
                    { 5, "Faixa horizontal fora do empreendimento" },
                    { 6, "Indicação de terceiros" },
                    { 7, "Jornais / Revistas / Mala Direta Impressa" },
                    { 8, "Plantão de vendas" },
                    { 9, "Eventos" },
                    { 10, "Propaganda volante (sonora)" },
                    { 11, "Propaganda (Flyer e folders)" },
                    { 12, "Site" },
                    { 13, "Telemarketing" },
                    { 14, "Visita no empreendimento" },
                    { 15, "Mala direta digital (E-mail)" },
                    { 16, "Televisão" },
                    { 17, "Corretores" },
                    { 18, "Imobiliárias" },
                    { 19, "Outros" },
                    { 20, "Propaganda (Sonora, Flyer e Folders)" },
                    { 21, "Marketing Digital" },
                    { 22, "Facebook" },
                    { 23, "Twitter (X)" },
                    { 24, "Instagram" },
                    { 25, "Youtube" },
                    { 26, "TikTok" },
                    { 27, "Linkedin" },
                    { 28, "GoogleAds" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "estado",
                columns: new[] { "Id", "Nome", "Uf" },
                values: new object[,]
                {
                    { 0, "Exterior", "EX" },
                    { 11, "Rondônia", "RO" },
                    { 12, "Acre", "AC" },
                    { 13, "Amazonas", "AM" },
                    { 14, "Roraima", "RR" },
                    { 15, "Pará", "PA" },
                    { 16, "Amapá", "AP" },
                    { 17, "Tocantins", "TO" },
                    { 21, "Maranhão", "MA" },
                    { 22, "Piauí", "PI" },
                    { 23, "Ceará", "CE" },
                    { 24, "Rio Grande do Norte", "RN" },
                    { 25, "Paraíba", "PB" },
                    { 26, "Pernambuco", "PE" },
                    { 27, "Alagoas", "AL" },
                    { 28, "Sergipe", "SE" },
                    { 29, "Bahia", "BA" },
                    { 31, "Minas Gerais", "MG" },
                    { 32, "Espírito Santo", "ES" },
                    { 33, "Rio de Janeiro", "RJ" },
                    { 35, "São Paulo", "SP" },
                    { 41, "Paraná", "PR" },
                    { 42, "Santa Catarina", "SC" },
                    { 43, "Rio Grande do Sul", "RS" },
                    { 50, "Mato Grosso do Sul", "MS" },
                    { 51, "Mato Grosso", "MT" },
                    { 52, "Goiás", "GO" },
                    { 53, "Distrito Federal", "DF" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "estadocivil",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Solteiro(a)" },
                    { 2, "Casado(a)" },
                    { 3, "Viúvo(a)" },
                    { 4, "Divorciado(a)" },
                    { 5, "Separado(a) Judicialmente" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "grauinteresse",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Quente" },
                    { 3, "Frio" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "grauparentesco",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Pai" },
                    { 2, "Mãe" },
                    { 3, "Avô" },
                    { 4, "Avó" },
                    { 5, "Bisavô" },
                    { 6, "Bisavó" },
                    { 7, "Filho" },
                    { 8, "Filha" },
                    { 9, "Neto" },
                    { 10, "Neta" },
                    { 11, "Bisneto" },
                    { 12, "Bisneta" },
                    { 13, "Irmão" },
                    { 14, "Irmã" },
                    { 15, "Tio" },
                    { 16, "Tia" },
                    { 17, "Sobrinho" },
                    { 18, "Sobrinha" },
                    { 19, "Primo" },
                    { 20, "Prima" },
                    { 21, "Sogro" },
                    { 22, "Sogra" },
                    { 23, "Cunhado" },
                    { 24, "Cunhada" },
                    { 25, "Outro" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "intervaloreajuste",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Anual" },
                    { 2, "Mensal" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "layoutcobranca",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Seu boleto está disponível (10 dias antes)" },
                    { 2, "Seu boleto está disponível (3 dias antes)" },
                    { 3, "Pagamento atrasado (3 dias depois)" },
                    { 4, "Pagamento atrasado (10 dias depois)" },
                    { 5, "Pagamento atrasado (17 dias depois)" },
                    { 6, "Pagamento atrasado (26 dias depois)" },
                    { 7, "Pagamento atrasado (32 dias depois)" },
                    { 8, "Pagamento atrasado (46 dias depois)" },
                    { 9, "Pagamento atrasado (62 dias depois)" },
                    { 10, "Pagamento atrasado (74 dias depois)" },
                    { 11, "Pagamento atrasado (88 dias depois)" },
                    { 12, "Pagamento atrasado (94 dias depois)" },
                    { 13, "Pagamento a vencer" },
                    { 14, "Pagamento vencido" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "motivocancelamentoreserva",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Não informado" },
                    { 2, "Imóvel vendido" },
                    { 3, "Achou caro" },
                    { 4, "Valor da parcela alta" },
                    { 5, "Valor da entrada alta" },
                    { 6, "Taxa de juros alta" },
                    { 7, "Entrada e parcela alta" },
                    { 8, "Proposta recusada" },
                    { 9, "Não deu retorno" },
                    { 10, "Comprou em outro local (Concorrente)" },
                    { 11, "Comprou outro imovel" },
                    { 12, "Por ser condomínio ou loteamento fechado" },
                    { 13, "Obras não concluídas" },
                    { 14, "Dimensões do imóvel" },
                    { 15, "Localização do imóvel" },
                    { 16, "Topografia do imóvel" },
                    { 17, "Não conseguiu financiar" },
                    { 18, "Não enquadrou no MCMV" },
                    { 19, "Sem oferta do imóvel" },
                    { 20, "Vendas não Iniciadas" },
                    { 21, "Outros motivos" },
                    { 22, "Interesse em lote comercial" },
                    { 23, "Sem interesse na compra" },
                    { 24, "Expirado" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "nacionalidade",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 10, "Brasileiro" },
                    { 20, "Naturalizado Brasileiro" },
                    { 21, "Argentino" },
                    { 22, "Boliviano" },
                    { 23, "Chileno" },
                    { 24, "Paraguaio" },
                    { 25, "Uruguaio" },
                    { 30, "Alemão" },
                    { 31, "Belga" },
                    { 32, "Britânico" },
                    { 34, "Canadense" },
                    { 35, "Espanhol" },
                    { 36, "Norte-Americano (EUA)" },
                    { 37, "Francês" },
                    { 38, "Suíço" },
                    { 39, "Italiano" },
                    { 41, "Japonês" },
                    { 42, "Chinês" },
                    { 43, "Coreano" },
                    { 45, "Português" },
                    { 48, "Outros Latino-Americanos" },
                    { 49, "Outros Asiáticos" },
                    { 50, "Outros" }
                });

            migrationBuilder.InsertData(
                schema: "orcamentoobras",
                table: "origemdados",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Manual" },
                    { 2, "Sinapi" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "origemdespesa",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Contrato" },
                    { 2, "Documentação" },
                    { 3, "Financeiro" },
                    { 4, "Pedido de Compra" },
                    { 5, "Serviço" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "origemlead",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Corretor - Manual" },
                    { 2, "Empresa - Manual" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "profissao",
                columns: new[] { "Id", "Codigo", "Nome" },
                values: new object[,]
                {
                    { 1, 848505, "Abatedor" },
                    { 2, 764305, "Acabador de calçados" },
                    { 3, 766305, "Acabador de embalagens (flexíveis e cartotécnicas)" },
                    { 4, 716105, "Acabador de superfícies de concreto" },
                    { 5, 848510, "Açougueiro" },
                    { 6, 376205, "Acrobata" },
                    { 7, 623005, "Adestrador de animais" },
                    { 8, 252105, "Administrador" },
                    { 9, 212305, "Administrador de banco de dados" },
                    { 10, 510110, "Administrador de edifícios" },
                    { 11, 252505, "Administrador de fundos e carteiras de investimento" },
                    { 12, 212310, "Administrador de redes" },
                    { 13, 212315, "Administrador de sistemas operacionais" },
                    { 14, 212320, "Administrador em segurança da informação" },
                    { 15, 241005, "Advogado" },
                    { 16, 241030, "Advogado (áreas especiais)" },
                    { 17, 241015, "Advogado (direito civil)" },
                    { 18, 241035, "Advogado (direito do trabalho)" },
                    { 19, 241025, "Advogado (direito penal)" },
                    { 20, 241020, "Advogado (direito público)" },
                    { 21, 241205, "Advogado da união" },
                    { 22, 241010, "Advogado de empresa" },
                    { 23, 721305, "Afiador de cardas" },
                    { 24, 721310, "Afiador de cutelaria" },
                    { 25, 721315, "Afiador de ferramentas" },
                    { 26, 721320, "Afiador de serras" },
                    { 27, 742105, "Afinador de instrumentos musicais" },
                    { 28, 342120, "Afretador" },
                    { 29, 253140, "Agenciador de propaganda" },
                    { 30, 515105, "Agente comunitário de saúde" },
                    { 31, 515310, "Agente de ação social" },
                    { 32, 515140, "Agente de combate às endemias" },
                    { 33, 352205, "Agente de defesa ambiental" },
                    { 34, 352405, "Agente de direitos autorais" },
                    { 35, 342405, "Agente de estação (ferrovia e metrô)" },
                    { 36, 254310, "Agente de higiene e segurança" },
                    { 37, 351905, "Agente de inteligência" },
                    { 38, 215105, "Agente de manobra e docagem" },
                    { 39, 411050, "Agente de microcrédito" },
                    { 40, 783105, "Agente de pátio" },
                    { 41, 517205, "Agente de polícia federal" },
                    { 42, 517415, "Agente de portaria" },
                    { 43, 517305, "Agente de proteção de aeroporto" },
                    { 44, 342550, "Agente de proteção de aviação civil" },
                    { 45, 351315, "Agente de recrutamento e seleção" },
                    { 46, 352210, "Agente de saúde pública" },
                    { 47, 517310, "Agente de segurança" },
                    { 48, 517315, "Agente de segurança penitenciária" },
                    { 49, 517220, "Agente de trânsito" },
                    { 50, 354120, "Agente de vendas de serviços" },
                    { 51, 354815, "Agente de viagem" },
                    { 52, 352310, "Agente fiscal de qualidade" },
                    { 53, 352315, "Agente fiscal metrológico" },
                    { 54, 352320, "Agente fiscal têxtil" },
                    { 55, 516505, "Agente funerário" },
                    { 56, 515130, "Agente indígena de saneamento" },
                    { 57, 515125, "Agente indígena de saúde" },
                    { 58, 351910, "Agente técnico de inteligência" },
                    { 59, 632615, "Ajudante de carvoaria" },
                    { 60, 763125, "Ajudante de confecção" },
                    { 61, 342205, "Ajudante de despachante aduaneiro" },
                    { 62, 783225, "Ajudante de motorista" },
                    { 63, 741105, "Ajustador de instrumentos de precisão" },
                    { 64, 725005, "Ajustador ferramenteiro" },
                    { 65, 725010, "Ajustador mecânico" },
                    { 66, 725015, "Ajustador mecânico (usinagem em bancada e em máquinas-ferramentas)" },
                    { 67, 725020, "Ajustador mecânico em bancada" },
                    { 68, 725025, "Ajustador naval (reparo e construção)" },
                    { 69, 841705, "Alambiqueiro" },
                    { 70, 763005, "Alfaiate" },
                    { 71, 784205, "Alimentador de linha de produção" },
                    { 72, 992105, "Alinhador de pneus" },
                    { 73, 414105, "Almoxarife" },
                    { 74, 761405, "Alvejador (tecidos)" },
                    { 75, 783240, "Amarrador e desamarrado de embarcações" },
                    { 76, 711105, "Amostrador de minérios" },
                    { 77, 252510, "Analista de câmbio" },
                    { 78, 252515, "Analista de cobrança (instituições financeiras)" },
                    { 79, 142125, "Analista de compliance" },
                    { 80, 252525, "Analista de crédito (instituições financeiras)" },
                    { 81, 252530, "Analista de crédito rural" },
                    { 82, 342215, "Analista de desembaraço aduaneiro" },
                    { 83, 212405, "Analista de desenvolvimento de sistemas" },
                    { 84, 354305, "Analista de exportação e importação" },
                    { 85, 413105, "Analista de folha de pagamento" },
                    { 86, 252725, "Analista de gestão de estoque" },
                    { 87, 415310, "Analista de informação em saúde" },
                    { 88, 261215, "Analista de informações (pesquisador de informações de rede)" },
                    { 89, 252535, "Analista de leasing" },
                    { 90, 252715, "Analista de logistica" },
                    { 91, 391140, "Analista de manutenção (equipamentos aéreos)" },
                    { 92, 253405, "Analista de mídias sociais" },
                    { 93, 142330, "Analista de negócios" },
                    { 94, 252705, "Analista de pcp (programação e controle da produção)" },
                    { 95, 142335, "Analista de pesquisa de mercado" },
                    { 96, 391145, "Analista de planejamento de manutenção" },
                    { 97, 252710, "Analista de planejamento de materias" },
                    { 98, 111510, "Analista de planejamento e orçamento - apo" },
                    { 99, 252540, "Analista de produtos bancários" },
                    { 100, 252720, "Analista de projetos logisticos" },
                    { 101, 252405, "Analista de recursos humanos" },
                    { 102, 212410, "Analista de redes e de comunicação de dados" },
                    { 103, 142130, "Analista de riscos" },
                    { 104, 351705, "Analista de seguros (técnico)" },
                    { 105, 351710, "Analista de sinistros" },
                    { 106, 212415, "Analista de sistemas de automação" },
                    { 107, 212420, "Analista de suporte computacional" },
                    { 108, 212430, "Analista de testes de tecnologia da informação" },
                    { 109, 342105, "Analista de transporte em comércio exterior" },
                    { 110, 252545, "Analista financeiro (instituições financeiras)" },
                    { 111, 374155, "Analista musical" },
                    { 112, 261705, "Âncora de mídias audiovisuais" },
                    { 113, 251105, "Antropólogo" },
                    { 114, 613405, "Apicultor" },
                    { 115, 715705, "Aplicador de asfalto impermeabilizante (coberturas)" },
                    { 116, 424210, "Aplicador de provas (concurso, avaliação,exame)" },
                    { 117, 523120, "Aplicador de vinil autoadesivo" },
                    { 118, 752205, "Aplicador serigráfico em vidros" },
                    { 119, 414205, "Apontador de mão-de-obra" },
                    { 120, 414210, "Apontador de produção" },
                    { 121, 376325, "Apresentador de circo" },
                    { 122, 376305, "Apresentador de eventos" },
                    { 123, 376310, "Apresentador de festas populares" },
                    { 124, 376315, "Apresentador de programas de rádio" },
                    { 125, 376320, "Apresentador de programas de televisão" },
                    { 126, 377210, "Árbitro de atletismo" },
                    { 127, 377215, "Árbitro de basquete" },
                    { 128, 377220, "Árbitro de futebol" },
                    { 129, 377225, "Árbitro de futebol de salão" },
                    { 130, 377230, "Árbitro de judô" },
                    { 131, 377235, "Árbitro de karatê" },
                    { 132, 377240, "Árbitro de poló aquático" },
                    { 133, 377245, "Árbitro de vôlei" },
                    { 134, 377205, "Árbitro desportivo" },
                    { 135, 351440, "Árbitro extrajudicial" },
                    { 136, 715305, "Armador de estrutura de concreto" },
                    { 137, 715315, "Armador de estrutura de concreto armado" },
                    { 138, 414110, "Armazenista" },
                    { 139, 325010, "Aromista" },
                    { 140, 251110, "Arqueólogo" },
                    { 141, 214105, "Arquiteto de edificações" },
                    { 142, 214110, "Arquiteto de interiores" },
                    { 143, 214115, "Arquiteto de patrimônio" },
                    { 144, 212425, "Arquiteto de soluções de tecnologia da informação" },
                    { 145, 214120, "Arquiteto paisagista" },
                    { 146, 214125, "Arquiteto urbanista" },
                    { 147, 261305, "Arquivista" },
                    { 148, 415105, "Arquivista de documentos" },
                    { 149, 261105, "Arquivista pesquisador (jornalismo)" },
                    { 150, 763305, "Arrematadeira" },
                    { 151, 791105, "Artesão bordador" },
                    { 152, 791110, "Artesão ceramista" },
                    { 153, 791115, "Artesão com material reciclável" },
                    { 154, 791120, "Artesão confeccionador de biojóias e ecojóias" },
                    { 155, 791150, "Artesão crocheteiro" },
                    { 156, 791125, "Artesão do couro" },
                    { 157, 791130, "Artesão escultor" },
                    { 158, 752105, "Artesão modelador (vidros)" },
                    { 159, 791135, "Artesão moveleiro (exceto reciclado)" },
                    { 160, 791160, "Artesão rendeiro" },
                    { 161, 791140, "Artesão tecelão" },
                    { 162, 791145, "Artesão trançador" },
                    { 163, 791155, "Artesão tricoteiro" },
                    { 164, 226310, "Arteterapeuta" },
                    { 165, 768305, "Artífice do couro" },
                    { 166, 262405, "Artista (artes visuais)" },
                    { 167, 376210, "Artista aéreo" },
                    { 168, 376215, "Artista de circo (outros)" },
                    { 169, 514105, "Ascensorista" },
                    { 170, 724105, "Assentador de canalização (edificações)" },
                    { 171, 716510, "Assentador de revestimentos cerâmicos" },
                    { 172, 261110, "Assessor de imprensa" },
                    { 173, 411010, "Assistente administrativo" },
                    { 174, 351715, "Assistente comercial de seguros" },
                    { 175, 262805, "Assistente de coreografia" },
                    { 176, 261910, "Assistente de direção (tv)" },
                    { 177, 818105, "Assistente de laboratório industrial" },
                    { 178, 373145, "Assistente de operações audiovisuais" },
                    { 179, 354125, "Assistente de vendas" },
                    { 180, 251605, "Assistente social" },
                    { 181, 351720, "Assistente técnico de seguros" },
                    { 182, 716505, "Assoalhador" },
                    { 183, 516705, "Astrólogo" },
                    { 184, 213305, "Astrônomo" },
                    { 185, 421105, "Atendente comercial (agência postal)" },
                    { 186, 413205, "Atendente de agência" },
                    { 187, 515110, "Atendente de enfermagem" },
                    { 188, 521130, "Atendente de farmácia - balconista" },
                    { 189, 411015, "Atendente de judiciário" },
                    { 190, 513435, "Atendente de lanchonete" },
                    { 191, 516340, "Atendente de lavanderia" },
                    { 192, 521140, "Atendente de lojas e mercados" },
                    { 193, 377105, "Atleta profissional (outras modalidades)" },
                    { 194, 377110, "Atleta profissional de futebol" },
                    { 195, 377115, "Atleta profissional de golfe" },
                    { 196, 377120, "Atleta profissional de luta" },
                    { 197, 377125, "Atleta profissional de tênis" },
                    { 198, 262505, "Ator" },
                    { 199, 211105, "Atuário" },
                    { 200, 261430, "Audiodescritor" },
                    { 201, 252205, "Auditor (contadores e afins)" },
                    { 202, 254205, "Auditor-fiscal da previdência social" },
                    { 203, 254105, "Auditor-fiscal da receita federal" },
                    { 204, 254305, "Auditor-fiscal do trabalho" },
                    { 205, 261505, "Autor-roteirista" },
                    { 206, 515205, "Auxiliar de banco de sangue" },
                    { 207, 371105, "Auxiliar de biblioteca" },
                    { 208, 411025, "Auxiliar de cartório" },
                    { 209, 413110, "Auxiliar de contabilidade" },
                    { 210, 763105, "Auxiliar de corte (preparação da confecção de roupas)" },
                    { 211, 331110, "Auxiliar de desenvolvimento infantil" },
                    { 212, 322230, "Auxiliar de enfermagem" },
                    { 213, 322250, "Auxiliar de enfermagem da estratégia de saúde da família" },
                    { 214, 322235, "Auxiliar de enfermagem do trabalho" },
                    { 215, 411005, "Auxiliar de escritório" },
                    { 216, 411035, "Auxiliar de estatística" },
                    { 217, 515210, "Auxiliar de farmácia de manipulação" },
                    { 218, 413115, "Auxiliar de faturamento" },
                    { 219, 411020, "Auxiliar de judiciário" },
                    { 220, 515215, "Auxiliar de laboratório de análises clínicas" },
                    { 221, 818110, "Auxiliar de laboratório de análises físico-químicas" },
                    { 222, 515220, "Auxiliar de laboratório de imunobiológicos" },
                    { 223, 516345, "Auxiliar de lavanderia" },
                    { 224, 414140, "Auxiliar de logistica" },
                    { 225, 514310, "Auxiliar de manutenção predial" },
                    { 226, 782625, "Auxiliar de maquinista de trem" },
                    { 227, 411030, "Auxiliar de pessoal" },
                    { 228, 842120, "Auxiliar de processamento de fumo" },
                    { 229, 515225, "Auxiliar de produção farmacêutica" },
                    { 230, 322420, "Auxiliar de prótese dentária" },
                    { 231, 766420, "Auxiliar de radiologia (revelação fotográfica)" },
                    { 232, 322240, "Auxiliar de saúde (navegação marítima)" },
                    { 233, 411040, "Auxiliar de seguros" },
                    { 234, 411045, "Auxiliar de serviços de importação e exportação" },
                    { 235, 351430, "Auxiliar de serviços jurídicos" },
                    { 236, 519305, "Auxiliar de veterinário" },
                    { 237, 322415, "Auxiliar em saúde bucal" },
                    { 238, 322430, "Auxiliar em saúde bucal da estratégia de saúde da família" },
                    { 239, 992225, "Auxiliar geral de conservação de vias permanentes (exceto trilhos)" },
                    { 240, 513505, "Auxiliar nos serviços de alimentação" },
                    { 241, 341250, "Auxiliar técnico de sinalização nautica" },
                    { 242, 325105, "Auxiliar técnico em laboratório de farmácia" },
                    { 243, 354415, "Avaliador de bens móveis" },
                    { 244, 354410, "Avaliador de imóveis" },
                    { 245, 352410, "Avaliador de produtos dos meios de comunicação" },
                    { 246, 224105, "Avaliador físico" },
                    { 247, 613305, "Avicultor" },
                    { 248, 516205, "Babá" },
                    { 249, 524315, "Baiana de acarajé" },
                    { 250, 262810, "Bailarino (exceto danças populares)" },
                    { 251, 992110, "Balanceador" },
                    { 252, 414115, "Balanceiro" },
                    { 253, 811705, "Bamburista" },
                    { 254, 519315, "Banhista de animais domésticos" },
                    { 255, 516105, "Barbeiro" },
                    { 256, 513440, "Barista" },
                    { 257, 513420, "Barman" },
                    { 258, 751105, "Bate-folha a  máquina" },
                    { 259, 261205, "Bibliotecário" },
                    { 260, 511220, "Bilheteiro (estações de metrô, ferroviárias e assemelhadas)" },
                    { 261, 421110, "Bilheteiro de transportes coletivos" },
                    { 262, 421115, "Bilheteiro no serviço de diversões" },
                    { 263, 201105, "Bioengenheiro" },
                    { 264, 221105, "Biólogo" },
                    { 265, 221205, "Biomédico" },
                    { 266, 201110, "Biotecnologista" },
                    { 267, 783230, "Bloqueiro (trabalhador portuário)" },
                    { 268, 731165, "Bobinador eletricista, à mão" },
                    { 269, 731170, "Bobinador eletricista, à máquina" },
                    { 270, 782815, "Boiadeiro" },
                    { 271, 517110, "Bombeiro civil" },
                    { 272, 517105, "Bombeiro de aeródromo" },
                    { 273, 765015, "Boneleiro" },
                    { 274, 768205, "Bordador, a  mão" },
                    { 275, 763310, "Bordador, à máquina" },
                    { 276, 992115, "Borracheiro" },
                    { 277, 724305, "Brasador" },
                    { 278, 517120, "Brigadista florestal" },
                    { 279, 516110, "Cabeleireiro" },
                    { 280, 722405, "Cableador" },
                    { 281, 31205, "Cabo bombeiro militar" },
                    { 282, 21205, "Cabo da polícia militar" },
                    { 283, 113005, "Cacique" },
                    { 284, 612605, "Cafeicultor" },
                    { 285, 413210, "Caixa de banco" },
                    { 286, 716605, "Calafetador" },
                    { 287, 811710, "Calandrista de borracha" },
                    { 288, 832105, "Calandrista de papel" },
                    { 289, 715205, "Calceteiro" },
                    { 290, 724405, "Caldeireiro (chapas de cobre)" },
                    { 291, 724410, "Caldeireiro (chapas de ferro e aço)" },
                    { 292, 513315, "Camareiro  de hotel" },
                    { 293, 513320, "Camareiro de embarcações" },
                    { 294, 513305, "Camareiro de teatro" },
                    { 295, 513310, "Camareiro de televisão" },
                    { 296, 782505, "Caminhoneiro autônomo (rotas regionais e internacionais)" },
                    { 297, 711110, "Canteiro" },
                    { 298, 30205, "Capitão bombeiro militar" },
                    { 299, 20205, "Capitão da polícia militar" },
                    { 300, 215110, "Capitão de manobra da marinha mercante" },
                    { 301, 411055, "Captador de recursos" },
                    { 302, 632610, "Carbonizador" },
                    { 303, 715505, "Carpinteiro" },
                    { 304, 715515, "Carpinteiro (cenários)" },
                    { 305, 715510, "Carpinteiro (esquadrias)" },
                    { 306, 715520, "Carpinteiro (mineração)" },
                    { 307, 715530, "Carpinteiro (telhados)" },
                    { 308, 777205, "Carpinteiro de carretas" },
                    { 309, 777210, "Carpinteiro de carrocerias" },
                    { 310, 715535, "Carpinteiro de fôrmas para concreto" },
                    { 311, 715525, "Carpinteiro de obras" },
                    { 312, 715540, "Carpinteiro de obras civis de arte (pontes, túneis, barragens)" },
                    { 313, 777105, "Carpinteiro naval (construção de pequenas embarcações)" },
                    { 314, 777110, "Carpinteiro naval (embarcações)" },
                    { 315, 777115, "Carpinteiro naval (estaleiros)" },
                    { 316, 783205, "Carregador (aeronaves)" },
                    { 317, 783210, "Carregador (armazém)" },
                    { 318, 783215, "Carregador (veículos de transportes terrestres)" },
                    { 319, 519905, "Cartazeiro" },
                    { 320, 415205, "Carteiro" },
                    { 321, 833205, "Cartonageiro, a mão (caixas de papelão)" },
                    { 322, 833105, "Cartonageiro, a máquina" },
                    { 323, 632605, "Carvoeiro" },
                    { 324, 622005, "Caseiro (agricultura)" },
                    { 325, 623025, "Casqueador de animais" },
                    { 326, 631005, "Catador de caranguejos e siris" },
                    { 327, 631010, "Catador de mariscos" },
                    { 328, 519205, "Catador de material reciclável" },
                    { 329, 842225, "Celofanista na fabricação de charutos" },
                    { 330, 723105, "Cementador de metais" },
                    { 331, 262305, "Cenógrafo carnavalesco e festas populares" },
                    { 332, 262310, "Cenógrafo de cinema" },
                    { 333, 262315, "Cenógrafo de eventos" },
                    { 334, 262320, "Cenógrafo de teatro" },
                    { 335, 262325, "Cenógrafo de tv" },
                    { 336, 374205, "Cenotécnico (cinema, vídeo, televisão, teatro e espetáculos)" },
                    { 337, 752305, "Ceramista" },
                    { 338, 752310, "Ceramista (torno de pedal e motor)" },
                    { 339, 752315, "Ceramista (torno semi-automático)" },
                    { 340, 752320, "Ceramista modelador" },
                    { 341, 752325, "Ceramista moldador" },
                    { 342, 752330, "Ceramista prensador" },
                    { 343, 354825, "Cerimonialista" },
                    { 344, 768210, "Cerzidor" },
                    { 345, 776405, "Cesteiro" },
                    { 346, 724415, "Chapeador" },
                    { 347, 724430, "Chapeador de aeronaves" },
                    { 348, 724420, "Chapeador de carrocerias metálicas (fabricação)" },
                    { 349, 724425, "Chapeador naval" },
                    { 350, 768125, "Chapeleiro (chapéus de palha)" },
                    { 351, 765010, "Chapeleiro de senhoras" },
                    { 352, 842230, "Charuteiro a mão" },
                    { 353, 523115, "Chaveiro" },
                    { 354, 510130, "Chefe de bar" },
                    { 355, 517125, "Chefe de brigada" },
                    { 356, 840120, "Chefe de confeitaria" },
                    { 357, 351110, "Chefe de contabilidade (técnico)" },
                    { 358, 271105, "Chefe de cozinha" },
                    { 359, 342605, "Chefe de estação portuária" },
                    { 360, 510120, "Chefe de portaria de hotel" },
                    { 361, 342305, "Chefe de serviço de transporte rodoviário (passageiros e cargas)" },
                    { 362, 353235, "Chefe de serviços bancários" },
                    { 363, 513605, "Churrasqueiro" },
                    { 364, 519105, "Ciclista mensageiro" },
                    { 365, 251115, "Cientista político" },
                    { 366, 831105, "Cilindreiro na preparação de pasta para fabricação de papel" },
                    { 367, 813105, "Cilindrista (petroquímica e afins)" },
                    { 368, 316340, "Cimentador (poços de petróleo)" },
                    { 369, 223204, "Cirurgião dentista - auditor" },
                    { 370, 223208, "Cirurgião dentista - clínico geral" },
                    { 371, 223280, "Cirurgião dentista - dentística" },
                    { 372, 223284, "Cirurgião dentista - disfunção temporomandibular e dor orofacial" },
                    { 373, 223212, "Cirurgião dentista - endodontista" },
                    { 374, 223216, "Cirurgião dentista - epidemiologista" },
                    { 375, 223220, "Cirurgião dentista - estomatologista" },
                    { 376, 223224, "Cirurgião dentista - implantodontista" },
                    { 377, 223228, "Cirurgião dentista - odontogeriatra" },
                    { 378, 223276, "Cirurgião dentista - odontologia do trabalho" },
                    { 379, 223288, "Cirurgião dentista - odontologia para pacientes com necessidades especiais" },
                    { 380, 223232, "Cirurgião dentista - odontologista legal" },
                    { 381, 223236, "Cirurgião dentista - odontopediatra" },
                    { 382, 223240, "Cirurgião dentista - ortopedista e ortodontista" },
                    { 383, 223244, "Cirurgião dentista - patologista bucal" },
                    { 384, 223248, "Cirurgião dentista - periodontista" },
                    { 385, 223252, "Cirurgião dentista - protesiólogo bucomaxilofacial" },
                    { 386, 223256, "Cirurgião dentista - protesista" },
                    { 387, 223260, "Cirurgião dentista - radiologista" },
                    { 388, 223264, "Cirurgião dentista - reabilitador oral" },
                    { 389, 223268, "Cirurgião dentista - traumatologista bucomaxilofacial" },
                    { 390, 223272, "Cirurgião dentista de saúde coletiva" },
                    { 391, 223293, "Cirurgião-dentista da estratégia de saúde da família" },
                    { 392, 324215, "Citotécnico" },
                    { 393, 842215, "Classificador de charutos" },
                    { 394, 762210, "Classificador de couros" },
                    { 395, 761105, "Classificador de fibras têxteis" },
                    { 396, 842115, "Classificador de fumo" },
                    { 397, 848425, "Classificador de grãos" },
                    { 398, 772105, "Classificador de madeira" },
                    { 399, 762105, "Classificador de peles" },
                    { 400, 632105, "Classificador de toras" },
                    { 401, 823305, "Classificador e empilhador de tijolos refratários" },
                    { 402, 511215, "Cobrador de transportes coletivos (exceto trem)" },
                    { 403, 421305, "Cobrador externo" },
                    { 404, 421310, "Cobrador interno" },
                    { 405, 415115, "Codificador de dados" },
                    { 406, 765205, "Colchoeiro (confecção de colchões)" },
                    { 407, 371205, "Colecionador de selos e moedas" },
                    { 408, 514205, "Coletor de lixo domiciliar" },
                    { 409, 514230, "Coletor de resíduos sólidos de serviços de saúde" },
                    { 410, 311705, "Colorista de papel" },
                    { 411, 311710, "Colorista têxtil" },
                    { 412, 215115, "Comandante da marinha mercante" },
                    { 413, 261710, "Comentarista de mídias audiovisuais" },
                    { 414, 141405, "Comerciante atacadista" },
                    { 415, 141410, "Comerciante varejista" },
                    { 416, 511110, "Comissário de trem" },
                    { 417, 511105, "Comissário de vôo" },
                    { 418, 413215, "Compensador de banco" },
                    { 419, 262605, "Compositor" },
                    { 420, 354205, "Comprador" },
                    { 421, 422130, "Concierge" },
                    { 422, 782320, "Condutor de ambulância" },
                    { 423, 341310, "Condutor de máquinas" },
                    { 424, 341320, "Condutor de máquinas (bombeador)" },
                    { 425, 341325, "Condutor de máquinas (mecânico)" },
                    { 426, 781105, "Condutor de processos robotizados de pintura" },
                    { 427, 781110, "Condutor de processos robotizados de soldagem" },
                    { 428, 511505, "Condutor de turismo de aventura" },
                    { 429, 511510, "Condutor de turismo de pesca" },
                    { 430, 782820, "Condutor de veículos a pedais" },
                    { 431, 782805, "Condutor de veículos de tração animal (ruas e estradas)" },
                    { 432, 341305, "Condutor maquinista motorista fluvial" },
                    { 433, 742110, "Confeccionador de acordeão" },
                    { 434, 765005, "Confeccionador de artefatos de couro (exceto sapatos)" },
                    { 435, 833110, "Confeccionador de bolsas, sacos e sacolas e papel, a máquina" },
                    { 436, 765215, "Confeccionador de brinquedos de pano" },
                    { 437, 768630, "Confeccionador de carimbos de borracha" },
                    { 438, 776410, "Confeccionador de escovas, pincéis e produtos similares (a mão)" },
                    { 439, 776415, "Confeccionador de escovas, pincéis e produtos similares (a máquina)" },
                    { 440, 742115, "Confeccionador de instrumentos de corda" },
                    { 441, 742120, "Confeccionador de instrumentos de percussão (pele, couro ou plástico)" },
                    { 442, 742125, "Confeccionador de instrumentos de sopro (madeira)" },
                    { 443, 742130, "Confeccionador de instrumentos de sopro (metal)" },
                    { 444, 776420, "Confeccionador de móveis de vime, junco e bambu" },
                    { 445, 742135, "Confeccionador de órgão" },
                    { 446, 742140, "Confeccionador de piano" },
                    { 447, 811715, "Confeccionador de pneumáticos" },
                    { 448, 833115, "Confeccionador de sacos de celofane, a máquina" },
                    { 449, 765225, "Confeccionador de velas náuticas, barracas e toldos" },
                    { 450, 811725, "Confeccionador de velas por imersão" },
                    { 451, 811735, "Confeccionador de velas por moldagem" },
                    { 452, 848310, "Confeiteiro" },
                    { 453, 414215, "Conferente de carga e descarga" },
                    { 454, 413220, "Conferente de serviços bancários" },
                    { 455, 414120, "Conferente mercadoria (exceto carga e descarga)" },
                    { 456, 516335, "Conferente-expedidor de roupas (lavanderias)" },
                    { 457, 241405, "Conselheiro julgador" },
                    { 458, 515320, "Conselheiro tutelar" },
                    { 459, 991105, "Conservador de via permanente (trilhos)" },
                    { 460, 262415, "Conservador-restaurador de bens  culturais" },
                    { 461, 351115, "Consultor contábil (técnico)" },
                    { 462, 241040, "Consultor jurídico" },
                    { 463, 252210, "Contador" },
                    { 464, 261905, "Continuista" },
                    { 465, 412205, "Contínuo" },
                    { 466, 376220, "Contorcionista" },
                    { 467, 760105, "Contramestre de acabamento (indústria têxtil)" },
                    { 468, 341205, "Contramestre de cabotagem" },
                    { 469, 760110, "Contramestre de fiação (indústria têxtil)" },
                    { 470, 760115, "Contramestre de malharia (indústria têxtil)" },
                    { 471, 760120, "Contramestre de tecelagem (indústria têxtil)" },
                    { 472, 391115, "Controlador de entrada e saída" },
                    { 473, 519910, "Controlador de pragas" },
                    { 474, 342115, "Controlador de serviços de máquinas e veículos" },
                    { 475, 342505, "Controlador de tráfego aéreo" },
                    { 476, 215120, "Coordenador de operações de combate à poluição no meio aquaviário" },
                    { 477, 373140, "Coordenador de programação" },
                    { 478, 424205, "Coordenador de provas (concurso, avaliação, exame)" },
                    { 479, 239405, "Coordenador pedagógico" },
                    { 480, 513425, "Copeiro" },
                    { 481, 513430, "Copeiro de hospital" },
                    { 482, 766105, "Copiador de chapa" },
                    { 483, 262815, "Coreógrafo" },
                    { 484, 30105, "Coronel bombeiro militar" },
                    { 485, 20105, "Coronel da polícia militar" },
                    { 486, 354610, "Corretor de grãos" },
                    { 487, 354605, "Corretor de imóveis" },
                    { 488, 354505, "Corretor de seguros" },
                    { 489, 253305, "Corretor de valores, ativos financeiros, mercadorias e derivativos" },
                    { 490, 765105, "Cortador de artefatos de couro (exceto roupas e calçados)" },
                    { 491, 768310, "Cortador de calçados, a  mão (exceto solas)" },
                    { 492, 764105, "Cortador de calçados, a  máquina (exceto solas e palmilhas)" },
                    { 493, 842220, "Cortador de charutos" },
                    { 494, 773105, "Cortador de laminados de madeira" },
                    { 495, 712205, "Cortador de pedras" },
                    { 496, 763110, "Cortador de roupas" },
                    { 497, 764110, "Cortador de solas e palmilhas, a  máquina" },
                    { 498, 765110, "Cortador de tapeçaria" },
                    { 499, 752210, "Cortador de vidro" },
                    { 500, 768315, "Costurador de artefatos de couro, a  mão (exceto roupas e calçados)" },
                    { 501, 765310, "Costurador de artefatos de couro, a  máquina (exceto roupas e calçados)" },
                    { 502, 764205, "Costurador de calçados, a  máquina" },
                    { 503, 763010, "Costureira de peças sob encomenda" },
                    { 504, 763015, "Costureira de reparação de roupas" },
                    { 505, 763020, "Costureiro de roupa de couro e pele" },
                    { 506, 763205, "Costureiro de roupas de couro e pele, a  máquina na  confecção em série" },
                    { 507, 763210, "Costureiro na confecção em série" },
                    { 508, 763215, "Costureiro, a  máquina  na confecção em série" },
                    { 509, 841408, "Cozinhador (conservação de alimentos)" },
                    { 510, 841416, "Cozinhador de carnes" },
                    { 511, 841420, "Cozinhador de frutas e legumes" },
                    { 512, 841730, "Cozinhador de malte" },
                    { 513, 841428, "Cozinhador de pescado" },
                    { 514, 513225, "Cozinheiro de embarcações" },
                    { 515, 513220, "Cozinheiro de hospital" },
                    { 516, 513210, "Cozinheiro do serviço doméstico" },
                    { 517, 513205, "Cozinheiro geral" },
                    { 518, 513215, "Cozinheiro industrial" },
                    { 519, 613010, "Criador de animais domésticos" },
                    { 520, 613410, "Criador de animais produtores de veneno" },
                    { 521, 613105, "Criador de asininos e muares" },
                    { 522, 613110, "Criador de bovinos (corte)" },
                    { 523, 613115, "Criador de bovinos (leite)" },
                    { 524, 613120, "Criador de bubalinos (corte)" },
                    { 525, 613125, "Criador de bubalinos (leite)" },
                    { 526, 631305, "Criador de camarões" },
                    { 527, 613205, "Criador de caprinos" },
                    { 528, 613130, "Criador de eqüínos" },
                    { 529, 631310, "Criador de jacarés" },
                    { 530, 631315, "Criador de mexilhões" },
                    { 531, 631320, "Criador de ostras" },
                    { 532, 613210, "Criador de ovinos" },
                    { 533, 631325, "Criador de peixes" },
                    { 534, 631330, "Criador de quelônios" },
                    { 535, 631335, "Criador de rãs" },
                    { 536, 613215, "Criador de suínos" },
                    { 537, 613005, "Criador em pecuária polivalente" },
                    { 538, 261510, "Crítico" },
                    { 539, 768130, "Crocheteiro, a  mão" },
                    { 540, 391105, "Cronoanalista" },
                    { 541, 391110, "Cronometrista" },
                    { 542, 632110, "Cubador de madeira" },
                    { 543, 516210, "Cuidador de idosos" },
                    { 544, 516220, "Cuidador em saúde" },
                    { 545, 513415, "Cumim" },
                    { 546, 613310, "Cunicultor" },
                    { 547, 762205, "Curtidor (couros e peles)" },
                    { 548, 376110, "Dançarino popular" },
                    { 549, 376105, "Dançarino tradicional" },
                    { 550, 412105, "Datilógrafo" },
                    { 551, 723205, "Decapador" },
                    { 552, 752405, "Decorador de cerâmica" },
                    { 553, 375120, "Decorador de eventos" },
                    { 554, 262905, "Decorador de interiores de nível superior" },
                    { 555, 752410, "Decorador de vidro" },
                    { 556, 752415, "Decorador de vidro à pincel" },
                    { 557, 242405, "Defensor público" },
                    { 558, 848105, "Defumador de carnes e pescados" },
                    { 559, 848405, "Degustador de café" },
                    { 560, 848410, "Degustador de chá" },
                    { 561, 842235, "Degustador de charutos" },
                    { 562, 848415, "Degustador de derivados de cacau" },
                    { 563, 848420, "Degustador de vinhos ou licores" },
                    { 564, 242305, "Delegado de polícia" },
                    { 565, 717005, "Demolidor de edificações" },
                    { 566, 521120, "Demonstrador de mercadorias" },
                    { 567, 111115, "Deputado estadual e distrital" },
                    { 568, 111110, "Deputado federal" },
                    { 569, 762110, "Descarnador de couros e peles, à maquina" },
                    { 570, 318010, "Desenhista copista" },
                    { 571, 318015, "Desenhista detalhista" },
                    { 572, 262420, "Desenhista industrial de produto (designer de produto)" },
                    { 573, 262425, "Desenhista industrial de produto de moda (designer de moda)" },
                    { 574, 262410, "Desenhista industrial gráfico (designer gráfico)" },
                    { 575, 318505, "Desenhista projetista de arquitetura" },
                    { 576, 318510, "Desenhista projetista de construção civil" },
                    { 577, 318705, "Desenhista projetista de eletricidade" },
                    { 578, 318605, "Desenhista projetista de máquinas" },
                    { 579, 318710, "Desenhista projetista eletrônico" },
                    { 580, 318610, "Desenhista projetista mecânico" },
                    { 581, 318005, "Desenhista técnico" },
                    { 582, 318105, "Desenhista técnico (arquitetura)" },
                    { 583, 318405, "Desenhista técnico (artes gráficas)" },
                    { 584, 318310, "Desenhista técnico (calefação, ventilação e refrigeração)" },
                    { 585, 318110, "Desenhista técnico (cartografia)" },
                    { 586, 318115, "Desenhista técnico (construção civil)" },
                    { 587, 318305, "Desenhista técnico (eletricidade e eletrônica)" },
                    { 588, 318410, "Desenhista técnico (ilustrações artísticas)" },
                    { 589, 318415, "Desenhista técnico (ilustrações técnicas)" },
                    { 590, 318420, "Desenhista técnico (indústria têxtil)" },
                    { 591, 318120, "Desenhista técnico (instalações hidrossanitárias)" },
                    { 592, 318425, "Desenhista técnico (mobiliário)" },
                    { 593, 318210, "Desenhista técnico aeronáutico" },
                    { 594, 318430, "Desenhista técnico de embalagens, maquetes e leiautes" },
                    { 595, 318205, "Desenhista técnico mecânico" },
                    { 596, 318215, "Desenhista técnico naval" },
                    { 597, 317120, "Desenvolvedor de multimídia" },
                    { 598, 317110, "Desenvolvedor de sistemas de tecnologia da informação (técnico)" },
                    { 599, 317105, "Desenvolvedor web (técnico)" },
                    { 600, 841432, "Desidratador de alimentos" },
                    { 601, 375105, "Designer de interiores" },
                    { 602, 375110, "Designer de vitrines" },
                    { 603, 239435, "Designer educacional" },
                    { 604, 316335, "Desincrustador (poços de petróleo)" },
                    { 605, 848515, "Desossador" },
                    { 606, 342210, "Despachante aduaneiro" },
                    { 607, 423110, "Despachante de trânsito" },
                    { 608, 511210, "Despachante de transportes coletivos (exceto trem)" },
                    { 609, 423105, "Despachante documentalista" },
                    { 610, 342510, "Despachante operacional de vôo" },
                    { 611, 841735, "Dessecador de malte" },
                    { 612, 811405, "Destilador de madeira" },
                    { 613, 811410, "Destilador de produtos químicos (exceto petróleo)" },
                    { 614, 711115, "Destroçador de pedra" },
                    { 615, 351805, "Detetive profissional" },
                    { 616, 711120, "Detonador" },
                    { 617, 223705, "Dietista" },
                    { 618, 412110, "Digitador" },
                    { 619, 123105, "Diretor administrativo" },
                    { 620, 123110, "Diretor administrativo e financeiro" },
                    { 621, 262235, "Diretor artistíco" },
                    { 622, 123305, "Diretor comercial" },
                    { 623, 122705, "Diretor comercial em operações de intermediação financeira" },
                    { 624, 122505, "Diretor de  produção e operações de alimentação" },
                    { 625, 122510, "Diretor de  produção e operações de hotel" },
                    { 626, 122515, "Diretor de  produção e operações de turismo" },
                    { 627, 262330, "Diretor de arte" },
                    { 628, 253125, "Diretor de arte (publicidade)" },
                    { 629, 122720, "Diretor de câmbio e comércio exterior" },
                    { 630, 262205, "Diretor de cinema" },
                    { 631, 122725, "Diretor de compliance" },
                    { 632, 253135, "Diretor de contas (publicidade)" },
                    { 633, 122730, "Diretor de crédito (exceto crédito imobiliário)" },
                    { 634, 122735, "Diretor de crédito imobiliário" },
                    { 635, 122715, "Diretor de crédito rural" },
                    { 636, 253130, "Diretor de criação" },
                    { 637, 372105, "Diretor de fotografia" },
                    { 638, 374425, "Diretor de imagens (tv)" },
                    { 639, 131305, "Diretor de instituição educacional da área privada" },
                    { 640, 131310, "Diretor de instituição educacional pública" },
                    { 641, 122740, "Diretor de leasing" },
                    { 642, 123805, "Diretor de manutenção" },
                    { 643, 123310, "Diretor de marketing" },
                    { 644, 122745, "Diretor de mercado de capitais" },
                    { 645, 253120, "Diretor de mídia (publicidade)" },
                    { 646, 122405, "Diretor de operações comerciais (comércio atacadista e varejista)" },
                    { 647, 122605, "Diretor de operações de correios" },
                    { 648, 122305, "Diretor de operações de obras pública e civil" },
                    { 649, 122610, "Diretor de operações de serviços de armazenamento" },
                    { 650, 122615, "Diretor de operações de serviços de telecomunicações" },
                    { 651, 122620, "Diretor de operações de serviços de transporte" },
                    { 652, 123705, "Diretor de pesquisa e desenvolvimento (p&d)" },
                    { 653, 121005, "Diretor de planejamento estratégico" },
                    { 654, 262230, "Diretor de produção" },
                    { 655, 122205, "Diretor de produção e operações da indústria de transformação, extração mineral e utilidades" },
                    { 656, 122105, "Diretor de produção e operações em empresa agropecuária" },
                    { 657, 122110, "Diretor de produção e operações em empresa aqüícola" },
                    { 658, 122115, "Diretor de produção e operações em empresa florestal" },
                    { 659, 122120, "Diretor de produção e operações em empresa pesqueira" },
                    { 660, 122710, "Diretor de produtos bancários" },
                    { 661, 262225, "Diretor de programação" },
                    { 662, 262210, "Diretor de programas de rádio" },
                    { 663, 262215, "Diretor de programas de televisão" },
                    { 664, 122750, "Diretor de recuperação de créditos em operações de intermediação financeira" },
                    { 665, 123205, "Diretor de recursos humanos" },
                    { 666, 261115, "Diretor de redação" },
                    { 667, 123210, "Diretor de relações de trabalho" },
                    { 668, 122755, "Diretor de riscos de mercado" },
                    { 669, 131105, "Diretor de serviços culturais" },
                    { 670, 131205, "Diretor de serviços de saúde" },
                    { 671, 131110, "Diretor de serviços sociais" },
                    { 672, 123405, "Diretor de suprimentos" },
                    { 673, 123410, "Diretor de suprimentos no serviço público" },
                    { 674, 123605, "Diretor de tecnologia da informação" },
                    { 675, 123115, "Diretor financeiro" },
                    { 676, 121010, "Diretor geral de empresa e organizações (exceto de interesse público)" },
                    { 677, 262220, "Diretor teatral" },
                    { 678, 114105, "Dirigente de partido político" },
                    { 679, 111410, "Dirigente do serviço público estadual e distrital" },
                    { 680, 111405, "Dirigente do serviço público federal" },
                    { 681, 111415, "Dirigente do serviço público municipal" },
                    { 682, 114405, "Dirigente e administrador de organização da sociedade civil sem fins lucrativos" },
                    { 683, 114305, "Dirigente e administrador de organização religiosa" },
                    { 684, 114205, "Dirigentes de entidades de trabalhadores" },
                    { 685, 114210, "Dirigentes de entidades patronais" },
                    { 686, 374145, "Dj (disc jockey)" },
                    { 687, 261210, "Documentalista" },
                    { 688, 376225, "Domador de animais (circense)" },
                    { 689, 322135, "Doula" },
                    { 690, 811810, "Drageador (medicamentos)" },
                    { 691, 262820, "Dramaturgo de dança" },
                    { 692, 251205, "Economista" },
                    { 693, 251210, "Economista agroindustrial" },
                    { 694, 251230, "Economista ambiental" },
                    { 695, 251225, "Economista do setor público" },
                    { 696, 251610, "Economista doméstico" },
                    { 697, 251215, "Economista financeiro" },
                    { 698, 251220, "Economista industrial" },
                    { 699, 251235, "Economista regional e urbano" },
                    { 700, 261120, "Editor" },
                    { 701, 261605, "Editor de jornal" },
                    { 702, 261610, "Editor de livro" },
                    { 703, 374405, "Editor de mídia audiovisual" },
                    { 704, 261615, "Editor de mídia eletrônica" },
                    { 705, 261620, "Editor de revista" },
                    { 706, 261625, "Editor de revista científica" },
                    { 707, 766120, "Editor de texto e imagem" },
                    { 708, 515305, "Educador social" },
                    { 709, 341315, "Eletricista de bordo" },
                    { 710, 715615, "Eletricista de instalações" },
                    { 711, 953105, "Eletricista de instalações (aeronaves)" },
                    { 712, 715605, "Eletricista de instalações (cenários)" },
                    { 713, 715610, "Eletricista de instalações (edifícios)" },
                    { 714, 953110, "Eletricista de instalações (embarcações)" },
                    { 715, 953115, "Eletricista de instalações (veículos automotores e máquinas operatrizes, exceto aeronaves e embarcações)" },
                    { 716, 732105, "Eletricista de manutenção de linhas elétricas, telefônicas e de comunicação de dados" },
                    { 717, 951105, "Eletricista de manutenção eletroeletrônica" },
                    { 718, 954105, "Eletromecânico de manutenção de elevadores" },
                    { 719, 954110, "Eletromecânico de manutenção de escadas rolantes" },
                    { 720, 954115, "Eletromecânico de manutenção de portas automáticas" },
                    { 721, 313105, "Eletrotécnico" },
                    { 722, 313110, "Eletrotécnico (produção de energia)" },
                    { 723, 313115, "Eletrotécnico na fabricação, montagem e instalação de máquinas e equipamentos" },
                    { 724, 784105, "Embalador, a mão" },
                    { 725, 784110, "Embalador, a máquina" },
                    { 726, 328105, "Embalsamador" },
                    { 727, 732110, "Emendador de cabos elétricos e telefônicos (aéreos e subterrâneos)" },
                    { 728, 421120, "Emissor de passagens" },
                    { 729, 512105, "Empregado  doméstico  nos serviços gerais" },
                    { 730, 512110, "Empregado doméstico  arrumador" },
                    { 731, 512115, "Empregado doméstico  faxineiro" },
                    { 732, 512120, "Empregado doméstico diarista" },
                    { 733, 724110, "Encanador" },
                    { 734, 821405, "Encarregado de acabamento de chapas e metais  (têmpera)" },
                    { 735, 760305, "Encarregado de corte na confecção do vestuário" },
                    { 736, 760310, "Encarregado de costura na confecção do vestuário" },
                    { 737, 992210, "Encarregado de equipe de conservação de vias permanentes (exceto trilhos)" },
                    { 738, 313415, "Encarregado de manutenção de instrumentos de controle, medição e similares" },
                    { 739, 950205, "Encarregado de manutenção elétrica de veículos" },
                    { 740, 910105, "Encarregado de manutenção mecânica de sistemas operacionais" },
                    { 741, 992205, "Encarregado geral de operações de conservação de vias permanentes (exceto trilhos)" },
                    { 742, 223505, "Enfermeiro" },
                    { 743, 223510, "Enfermeiro auditor" },
                    { 744, 223565, "Enfermeiro da estratégia de saúde da família" },
                    { 745, 223515, "Enfermeiro de bordo" },
                    { 746, 223520, "Enfermeiro de centro cirúrgico" },
                    { 747, 223525, "Enfermeiro de terapia intensiva" },
                    { 748, 223530, "Enfermeiro do trabalho" },
                    { 749, 223535, "Enfermeiro nefrologista" },
                    { 750, 223540, "Enfermeiro neonatologista" },
                    { 751, 223545, "Enfermeiro obstétrico" },
                    { 752, 223550, "Enfermeiro psiquiátrico" },
                    { 753, 223555, "Enfermeiro puericultor e pediátrico" },
                    { 754, 223560, "Enfermeiro sanitarista" },
                    { 755, 763115, "Enfestador de roupas" },
                    { 756, 751005, "Engastador (jóias)" },
                    { 757, 214425, "Engenheiro aeronáutico" },
                    { 758, 222105, "Engenheiro agrícola" },
                    { 759, 214805, "Engenheiro agrimensor" },
                    { 760, 222110, "Engenheiro agrônomo" },
                    { 761, 214005, "Engenheiro ambiental" },
                    { 762, 214810, "Engenheiro cartógrafo" },
                    { 763, 214205, "Engenheiro civil" },
                    { 764, 214210, "Engenheiro civil (aeroportos)" },
                    { 765, 214215, "Engenheiro civil (edificações)" },
                    { 766, 214220, "Engenheiro civil (estruturas metálicas)" },
                    { 767, 214225, "Engenheiro civil (ferrovias e metrovias)" },
                    { 768, 214230, "Engenheiro civil (geotécnia)" },
                    { 769, 214240, "Engenheiro civil (hidráulica)" },
                    { 770, 214235, "Engenheiro civil (hidrologia)" },
                    { 771, 214245, "Engenheiro civil (pontes e viadutos)" },
                    { 772, 214250, "Engenheiro civil (portos e vias navegáveis)" },
                    { 773, 214255, "Engenheiro civil (rodovias)" },
                    { 774, 214260, "Engenheiro civil (saneamento)" },
                    { 775, 214270, "Engenheiro civil (transportes e trânsito)" },
                    { 776, 214265, "Engenheiro civil (túneis)" },
                    { 777, 222205, "Engenheiro de alimentos" },
                    { 778, 212205, "Engenheiro de aplicativos em computação" },
                    { 779, 214910, "Engenheiro de controle de qualidade" },
                    { 780, 202110, "Engenheiro de controle e automação" },
                    { 781, 212210, "Engenheiro de equipamentos em computação" },
                    { 782, 214945, "Engenheiro de logistica" },
                    { 783, 214335, "Engenheiro de manutenção de telecomunicações" },
                    { 784, 214605, "Engenheiro de materiais" },
                    { 785, 214705, "Engenheiro de minas" },
                    { 786, 214710, "Engenheiro de minas (beneficiamento)" },
                    { 787, 214715, "Engenheiro de minas (lavra a céu aberto)" },
                    { 788, 214720, "Engenheiro de minas (lavra subterrânea)" },
                    { 789, 214725, "Engenheiro de minas (pesquisa mineral)" },
                    { 790, 214730, "Engenheiro de minas (planejamento)" },
                    { 791, 214735, "Engenheiro de minas (processo)" },
                    { 792, 214740, "Engenheiro de minas (projeto)" },
                    { 793, 222115, "Engenheiro de pesca" },
                    { 794, 214905, "Engenheiro de produção" },
                    { 795, 214350, "Engenheiro de redes de comunicação" },
                    { 796, 214920, "Engenheiro de riscos" },
                    { 797, 214915, "Engenheiro de segurança do trabalho" },
                    { 798, 214340, "Engenheiro de telecomunicações" },
                    { 799, 214925, "Engenheiro de tempos e movimentos" },
                    { 800, 214305, "Engenheiro eletricista" },
                    { 801, 214315, "Engenheiro eletricista de manutenção" },
                    { 802, 214320, "Engenheiro eletricista de projetos" },
                    { 803, 214310, "Engenheiro eletrônico" },
                    { 804, 214325, "Engenheiro eletrônico de manutenção" },
                    { 805, 214330, "Engenheiro eletrônico de projetos" },
                    { 806, 222120, "Engenheiro florestal" },
                    { 807, 214405, "Engenheiro mecânico" },
                    { 808, 214415, "Engenheiro mecânico (energia nuclear)" },
                    { 809, 214410, "Engenheiro mecânico automotivo" },
                    { 810, 214420, "Engenheiro mecânico industrial" },
                    { 811, 202105, "Engenheiro mecatrônico" },
                    { 812, 214610, "Engenheiro metalurgista" },
                    { 813, 214430, "Engenheiro naval" },
                    { 814, 214345, "Engenheiro projetista de telecomunicações" },
                    { 815, 214505, "Engenheiro químico" },
                    { 816, 214510, "Engenheiro químico (indústria química)" },
                    { 817, 214515, "Engenheiro químico (mineração, metalurgia, siderurgia, cimenteira e cerâmica)" },
                    { 818, 214520, "Engenheiro químico (papel e celulose)" },
                    { 819, 214525, "Engenheiro químico (petróleo e borracha)" },
                    { 820, 214530, "Engenheiro químico (utilidades e meio ambiente)" },
                    { 821, 212215, "Engenheiros de sistemas operacionais em computação" },
                    { 822, 519915, "Engraxate" },
                    { 823, 325005, "Enólogo" },
                    { 824, 262825, "Ensaiador de dança" },
                    { 825, 775105, "Entalhador  de madeira" },
                    { 826, 415215, "Entregador de publicações" },
                    { 827, 424105, "Entrevistador censitário e de pesquisas amostrais" },
                    { 828, 424110, "Entrevistador de pesquisa de opinião e mídia" },
                    { 829, 424115, "Entrevistador de pesquisas de mercado" },
                    { 830, 424120, "Entrevistador de preços" },
                    { 831, 424130, "Entrevistador social" },
                    { 832, 762215, "Enxugador de couros" },
                    { 833, 376230, "Equilibrista" },
                    { 834, 226315, "Equoterapeuta" },
                    { 835, 821410, "Escarfador" },
                    { 836, 391225, "Escolhedor de papel" },
                    { 837, 711125, "Escorador de minas" },
                    { 838, 351405, "Escrevente" },
                    { 839, 261515, "Escritor de ficção" },
                    { 840, 261520, "Escritor de não ficção" },
                    { 841, 424125, "Escriturário  em  estatística" },
                    { 842, 413225, "Escriturário de banco" },
                    { 843, 351420, "Escrivão de polícia" },
                    { 844, 351415, "Escrivão extra - judicial" },
                    { 845, 351410, "Escrivão judicial" },
                    { 846, 516805, "Esotérico" },
                    { 847, 111505, "Especialista de políticas públicas e gestão governamental - eppgg" },
                    { 848, 201210, "Especialista em calibrações metrológicas" },
                    { 849, 142610, "Especialista em desenvolvimento de cigarros" },
                    { 850, 201215, "Especialista em ensaios metrológicos" },
                    { 851, 201220, "Especialista em instrumentação metrológica" },
                    { 852, 201225, "Especialista em materiais de referência metrológica" },
                    { 853, 211110, "Especialista em pesquisa operacional" },
                    { 854, 761410, "Estampador de tecido" },
                    { 855, 211205, "Estatístico" },
                    { 856, 211210, "Estatístico (estatística aplicada)" },
                    { 857, 211215, "Estatístico teórico" },
                    { 858, 776425, "Esteireiro" },
                    { 859, 351515, "Estenotipista" },
                    { 860, 841440, "Esterilizador de alimentos" },
                    { 861, 322130, "Esteticista" },
                    { 862, 519310, "Esteticista de animais domésticos" },
                    { 863, 762305, "Estirador de couros e peles (acabamento)" },
                    { 864, 762115, "Estirador de couros e peles (preparação)" },
                    { 865, 722410, "Estirador de tubos de metal sem costura" },
                    { 866, 783220, "Estivador" },
                    { 867, 765230, "Estofador de aviões" },
                    { 868, 765235, "Estofador de móveis" },
                    { 869, 414125, "Estoquista" },
                    { 870, 732115, "Examinador de cabos, linhas elétricas e telefônicas" },
                    { 871, 414135, "Expedidor de mercadorias" },
                    { 872, 823210, "Extrusor de fios ou fibras de vidro" },
                    { 873, 223405, "Farmacêutico" },
                    { 874, 223415, "Farmacêutico analista clínico" },
                    { 875, 223420, "Farmacêutico de alimentos" },
                    { 876, 223430, "Farmacêutico em saúde pública" },
                    { 877, 223445, "Farmacêutico hospitalar e clínico" },
                    { 878, 223435, "Farmacêutico industrial" },
                    { 879, 223425, "Farmacêutico práticas integrativas e complementares" },
                    { 880, 223440, "Farmacêutico toxicologista" },
                    { 881, 514320, "Faxineiro" },
                    { 882, 524205, "Feirante" },
                    { 883, 841715, "Fermentador" },
                    { 884, 623030, "Ferrador de animais" },
                    { 885, 721105, "Ferramenteiro" },
                    { 886, 721110, "Ferramenteiro de mandris, calibradores e outros dispositivos" },
                    { 887, 261405, "Filólogo" },
                    { 888, 251405, "Filósofo" },
                    { 889, 841710, "Filtrador de cerveja" },
                    { 890, 374410, "Finalizador de filmes" },
                    { 891, 374415, "Finalizador de vídeo" },
                    { 892, 254505, "Fiscal de atividades urbanas" },
                    { 893, 342515, "Fiscal de aviação civil (fac)" },
                    { 894, 517425, "Fiscal de loja" },
                    { 895, 710225, "Fiscal de pátio de usina de concreto" },
                    { 896, 342555, "Fiscal de pista de aeroporto" },
                    { 897, 511205, "Fiscal de transportes coletivos (exceto trem)" },
                    { 898, 254405, "Fiscal de tributos estadual" },
                    { 899, 254410, "Fiscal de tributos municipal" },
                    { 900, 213105, "Físico" },
                    { 901, 213110, "Físico (acústica)" },
                    { 902, 213115, "Físico (atômica e molecular)" },
                    { 903, 213120, "Físico (cosmologia)" },
                    { 904, 213125, "Físico (estatística e matemática)" },
                    { 905, 213130, "Físico (fluidos)" },
                    { 906, 213135, "Físico (instrumentação)" },
                    { 907, 213140, "Físico (matéria condensada)" },
                    { 908, 213145, "Físico (materiais)" },
                    { 909, 213150, "Físico (medicina)" },
                    { 910, 213155, "Físico (nuclear e reatores)" },
                    { 911, 213160, "Físico (óptica)" },
                    { 912, 213165, "Físico (partículas e campos)" },
                    { 913, 213170, "Físico (plasma)" },
                    { 914, 213175, "Físico (térmica)" },
                    { 915, 223660, "Fisioterapeuta  do trabalho" },
                    { 916, 223650, "Fisioterapeuta acupunturista" },
                    { 917, 223655, "Fisioterapeuta esportivo" },
                    { 918, 223605, "Fisioterapeuta geral" },
                    { 919, 223630, "Fisioterapeuta neurofuncional" },
                    { 920, 223640, "Fisioterapeuta osteopata" },
                    { 921, 223645, "Fisioterapeuta quiropraxista" },
                    { 922, 223625, "Fisioterapeuta respiratória" },
                    { 923, 223635, "Fisioterapeuta traumato-ortopédica funcional" },
                    { 924, 415120, "Fitotecário" },
                    { 925, 862105, "Foguista (locomotivas a vapor)" },
                    { 926, 775110, "Folheador de móveis de madeira" },
                    { 927, 223815, "Fonoaudiólogo educacional" },
                    { 928, 223820, "Fonoaudiólogo em audiologia" },
                    { 929, 223825, "Fonoaudiólogo em disfagia" },
                    { 930, 223830, "Fonoaudiólogo em linguagem" },
                    { 931, 223835, "Fonoaudiólogo em motricidade orofacial" },
                    { 932, 223840, "Fonoaudiólogo em saúde coletiva" },
                    { 933, 223845, "Fonoaudiólogo em voz" },
                    { 934, 223810, "Fonoaudiólogo geral" },
                    { 935, 722105, "Forjador" },
                    { 936, 722110, "Forjador a martelo" },
                    { 937, 722115, "Forjador prensista" },
                    { 938, 823315, "Forneiro (materiais de construção)" },
                    { 939, 822105, "Forneiro de cubilô" },
                    { 940, 822110, "Forneiro de forno-poço" },
                    { 941, 822115, "Forneiro de fundição (forno de redução)" },
                    { 942, 822120, "Forneiro de reaquecimento e tratamento térmico na metalurgia" },
                    { 943, 822125, "Forneiro de revérbero" },
                    { 944, 821205, "Forneiro e operador (alto-forno)" },
                    { 945, 821210, "Forneiro e operador (conversor a oxigênio)" },
                    { 946, 821215, "Forneiro e operador (forno elétrico)" },
                    { 947, 821220, "Forneiro e operador (refino de metais não-ferrosos)" },
                    { 948, 821225, "Forneiro e operador de forno de redução direta" },
                    { 949, 823215, "Forneiro na fundição de vidro" },
                    { 950, 823220, "Forneiro no recozimento de vidro" },
                    { 951, 723210, "Fosfatizador" },
                    { 952, 261805, "Fotógrafo" },
                    { 953, 261810, "Fotógrafo publicitário" },
                    { 954, 261815, "Fotógrafo retratista" },
                    { 955, 521135, "Frentista" },
                    { 956, 762120, "Fuloneiro" },
                    { 957, 762310, "Fuloneiro no acabamento de couros e peles" },
                    { 958, 751110, "Fundidor (joalheria e ourivesaria)" },
                    { 959, 722205, "Fundidor de metais" },
                    { 960, 991305, "Funileiro de veículos (reparação)" },
                    { 961, 724435, "Funileiro industrial" },
                    { 962, 723215, "Galvanizador" },
                    { 963, 519920, "Gandula" },
                    { 964, 514110, "Garagista" },
                    { 965, 513405, "Garçom" },
                    { 966, 513410, "Garçom (serviços de vinhos)" },
                    { 967, 711405, "Garimpeiro" },
                    { 968, 631405, "Gelador industrial" },
                    { 969, 631410, "Gelador profissional" },
                    { 970, 201115, "Geneticista" },
                    { 971, 213415, "Geofísico" },
                    { 972, 213310, "Geofísico espacial" },
                    { 973, 251305, "Geógrafo" },
                    { 974, 213405, "Geólogo" },
                    { 975, 213410, "Geólogo de engenharia" },
                    { 976, 213420, "Geoquímico" },
                    { 977, 142105, "Gerente administrativo" },
                    { 978, 142305, "Gerente comercial" },
                    { 979, 141805, "Gerente de administração em aeroportos" },
                    { 980, 141710, "Gerente de agência" },
                    { 981, 142415, "Gerente de almoxarifado" },
                    { 982, 141515, "Gerente de bar" },
                    { 983, 141715, "Gerente de câmbio e comércio exterior" },
                    { 984, 253205, "Gerente de captação (fundos e investimentos institucionais)" },
                    { 985, 253210, "Gerente de clientes especiais (private)" },
                    { 986, 142405, "Gerente de compras" },
                    { 987, 142310, "Gerente de comunicação" },
                    { 988, 253215, "Gerente de contas - pessoa física e jurídica" },
                    { 989, 141720, "Gerente de crédito e cobrança" },
                    { 990, 141725, "Gerente de crédito imobiliário" },
                    { 991, 141730, "Gerente de crédito rural" },
                    { 992, 142210, "Gerente de departamento pessoal" },
                    { 993, 142510, "Gerente de desenvolvimento de sistemas" },
                    { 994, 141810, "Gerente de empresa aérea e empresa de serviços auxiliares ao transporte aéreo (esata) em aeroportos" },
                    { 995, 253220, "Gerente de grandes contas (corporate)" },
                    { 996, 141505, "Gerente de hotel" },
                    { 997, 142505, "Gerente de infraestrutura de tecnologia da informação" },
                    { 998, 131315, "Gerente de instituição educacional da área privada" },
                    { 999, 141615, "Gerente de logística (armazenagem e distribuição)" },
                    { 1000, 141415, "Gerente de loja e supermercado" },
                    { 1001, 142315, "Gerente de marketing" },
                    { 1002, 142515, "Gerente de operação de tecnologia da informação" },
                    { 1003, 141820, "Gerente de operações de cargas" },
                    { 1004, 141610, "Gerente de operações de correios e telecomunicações" },
                    { 1005, 141420, "Gerente de operações de serviços de assistência técnica" },
                    { 1006, 141605, "Gerente de operações de transportes" },
                    { 1007, 141815, "Gerente de operações em aeroportos" },
                    { 1008, 141520, "Gerente de pensão" },
                    { 1009, 142605, "Gerente de pesquisa e desenvolvimento (p&d)" },
                    { 1010, 141205, "Gerente de produção e operações" },
                    { 1011, 141105, "Gerente de produção e operações  aqüícolas" },
                    { 1012, 141110, "Gerente de produção e operações  florestais" },
                    { 1013, 141115, "Gerente de produção e operações agropecuárias" },
                    { 1014, 141305, "Gerente de produção e operações da construção civil e obras públicas" },
                    { 1015, 141120, "Gerente de produção e operações pesqueiras" },
                    { 1016, 141705, "Gerente de produtos bancários" },
                    { 1017, 142520, "Gerente de projetos de tecnologia da informação" },
                    { 1018, 142705, "Gerente de projetos e serviços de manutenção" },
                    { 1019, 141735, "Gerente de recuperação de crédito" },
                    { 1020, 142205, "Gerente de recursos humanos" },
                    { 1021, 141510, "Gerente de restaurante" },
                    { 1022, 142110, "Gerente de riscos" },
                    { 1023, 141825, "Gerente de segurança da aviação civil" },
                    { 1024, 142525, "Gerente de segurança da informação" },
                    { 1025, 141830, "Gerente de segurança operacional (aviação civil)" },
                    { 1026, 131115, "Gerente de serviços culturais" },
                    { 1027, 131210, "Gerente de serviços de saúde" },
                    { 1028, 131320, "Gerente de serviços educacionais da área pública" },
                    { 1029, 131120, "Gerente de serviços sociais" },
                    { 1030, 142530, "Gerente de suporte técnico de tecnologia da informação" },
                    { 1031, 142410, "Gerente de suprimentos" },
                    { 1032, 141525, "Gerente de turismo" },
                    { 1033, 142320, "Gerente de vendas" },
                    { 1034, 142115, "Gerente financeiro" },
                    { 1035, 131220, "Gerontólogo" },
                    { 1036, 716405, "Gesseiro" },
                    { 1037, 252605, "Gestor em segurança" },
                    { 1038, 111230, "Governador de estado" },
                    { 1039, 111235, "Governador do distrito federal" },
                    { 1040, 513115, "Governanta de hotelaria" },
                    { 1041, 751115, "Gravador (joalheria e ourivesaria)" },
                    { 1042, 712210, "Gravador de inscrições em pedra" },
                    { 1043, 766135, "Gravador de matriz calcográfica" },
                    { 1044, 766115, "Gravador de matriz para flexografia (clicherista)" },
                    { 1045, 766130, "Gravador de matriz para rotogravura (eletromecânico e químico)" },
                    { 1046, 766140, "Gravador de matriz serigráfica" },
                    { 1047, 712215, "Gravador de relevos em pedra" },
                    { 1048, 752215, "Gravador de vidro a  água-forte" },
                    { 1049, 752220, "Gravador de vidro a  esmeril" },
                    { 1050, 752225, "Gravador de vidro a  jato de areia" },
                    { 1051, 768705, "Gravador, à mão (encadernação)" },
                    { 1052, 517335, "Guarda portuário" },
                    { 1053, 517215, "Guarda-civil municipal" },
                    { 1054, 519925, "Guardador de veículos" },
                    { 1055, 513325, "Guarda-roupeiro de cinema" },
                    { 1056, 511405, "Guia de turismo" },
                    { 1057, 632005, "Guia florestal" },
                    { 1058, 782205, "Guincheiro (construção civil)" },
                    { 1059, 841444, "Hidrogenador de óleos e gorduras" },
                    { 1060, 213425, "Hidrogeólogo" },
                    { 1061, 214940, "Higienista ocupacional" },
                    { 1062, 632115, "Identificador florestal" },
                    { 1063, 372110, "Iluminador (televisão)" },
                    { 1064, 215125, "Imediato da marinha mercante" },
                    { 1065, 772110, "Impregnador de madeira" },
                    { 1066, 766205, "Impressor (serigrafia)" },
                    { 1067, 766210, "Impressor calcográfico" },
                    { 1068, 766310, "Impressor de corte e vinco" },
                    { 1069, 766215, "Impressor de ofsete (plano e rotativo)" },
                    { 1070, 766220, "Impressor de rotativa" },
                    { 1071, 766225, "Impressor de rotogravura" },
                    { 1072, 766230, "Impressor digital" },
                    { 1073, 766235, "Impressor flexográfico" },
                    { 1074, 766240, "Impressor letterset" },
                    { 1075, 766245, "Impressor tampográfico" },
                    { 1076, 766250, "Impressor tipográfico" },
                    { 1077, 253410, "Influenciador digital" },
                    { 1078, 623010, "Inseminador" },
                    { 1079, 334105, "Inspetor de alunos de escola privada" },
                    { 1080, 334110, "Inspetor de alunos de escola pública" },
                    { 1081, 342530, "Inspetor de aviação civil" },
                    { 1082, 314830, "Inspetor de controle dimensional" },
                    { 1083, 314825, "Inspetor de dutos" },
                    { 1084, 314815, "Inspetor de ensaios não destrutivos" },
                    { 1085, 314805, "Inspetor de equipamentos" },
                    { 1086, 761805, "Inspetor de estamparia (produção têxtil)" },
                    { 1087, 314810, "Inspetor de fabricação" },
                    { 1088, 314840, "Inspetor de manutenção" },
                    { 1089, 314835, "Inspetor de pintura" },
                    { 1090, 391205, "Inspetor de qualidade" },
                    { 1091, 351725, "Inspetor de risco" },
                    { 1092, 342310, "Inspetor de serviços de transportes rodoviários (passageiros e cargas)" },
                    { 1093, 351730, "Inspetor de sinistros" },
                    { 1094, 314845, "Inspetor de soldagem" },
                    { 1095, 215130, "Inspetor de terminal" },
                    { 1096, 710215, "Inspetor de terraplenagem" },
                    { 1097, 991110, "Inspetor de via permanente (trilhos)" },
                    { 1098, 215135, "Inspetor naval" },
                    { 1099, 523105, "Instalador de cortinas e persianas, portas sanfonadas e boxe" },
                    { 1100, 715710, "Instalador de isolantes acústicos" },
                    { 1101, 715715, "Instalador de isolantes térmicos (refrigeração e climatização)" },
                    { 1102, 715720, "Instalador de isolantes térmicos de caldeira e tubulações" },
                    { 1103, 732120, "Instalador de linhas elétricas de alta e baixa - tensão (rede aérea e subterrânea)" },
                    { 1104, 715725, "Instalador de material isolante, a mão (edificações)" },
                    { 1105, 715730, "Instalador de material isolante, à máquina (edificações)" },
                    { 1106, 951305, "Instalador de sistemas eletroeletrônicos de segurança" },
                    { 1107, 732140, "Instalador de sistemas fotovoltaicos" },
                    { 1108, 523110, "Instalador de som e acessórios de veículos" },
                    { 1109, 724115, "Instalador de tubulações" },
                    { 1110, 724120, "Instalador de tubulações (aeronaves)" },
                    { 1111, 724125, "Instalador de tubulações (embarcações)" },
                    { 1112, 724130, "Instalador de tubulações de gás combustível (produção e distribuição)" },
                    { 1113, 724135, "Instalador de tubulações de vapor (produção e distribuição)" },
                    { 1114, 732125, "Instalador eletricista (tração de veículos)" },
                    { 1115, 731305, "Instalador-reparador de equipamentos de comutação em telefonia" },
                    { 1116, 731310, "Instalador-reparador de equipamentos de energia em telefonia" },
                    { 1117, 731315, "Instalador-reparador de equipamentos de transmissão em telefonia" },
                    { 1118, 731320, "Instalador-reparador de linhas e aparelhos de telecomunicações" },
                    { 1119, 731325, "Instalador-reparador de redes e cabos telefônicos" },
                    { 1120, 732130, "Instalador-reparador de redes telefônicas e de comunicação de dados" },
                    { 1121, 322225, "Instrumentador cirúrgico" },
                    { 1122, 233205, "Instrutor de aprendizagem e treinamento agropecuário" },
                    { 1123, 233215, "Instrutor de aprendizagem e treinamento comercial" },
                    { 1124, 233210, "Instrutor de aprendizagem e treinamento industrial" },
                    { 1125, 333105, "Instrutor de auto-escola" },
                    { 1126, 333110, "Instrutor de cursos livres" },
                    { 1127, 215315, "Instrutor de vôo" },
                    { 1128, 261410, "Intérprete" },
                    { 1129, 261425, "Intérprete de língua de sinais" },
                    { 1130, 351810, "Investigador de polícia" },
                    { 1131, 622010, "Jardineiro" },
                    { 1132, 751010, "Joalheiro" },
                    { 1133, 751015, "Joalheiro (reparações)" },
                    { 1134, 377130, "Jóquei" },
                    { 1135, 524210, "Jornaleiro (em banca de jornal)" },
                    { 1136, 261125, "Jornalista" },
                    { 1137, 111340, "Juiz auditor estadual - justiça militar" },
                    { 1138, 111335, "Juiz auditor federal - justiça militar" },
                    { 1139, 111325, "Juiz de direito" },
                    { 1140, 111345, "Juiz do trabalho" },
                    { 1141, 111330, "Juiz federal" },
                    { 1142, 415125, "Kardexista" },
                    { 1143, 766405, "Laboratorista fotográfico" },
                    { 1144, 841448, "Lagareiro" },
                    { 1145, 751120, "Laminador de metais preciosos a  mão" },
                    { 1146, 811745, "Laminador de plástico" },
                    { 1147, 751020, "Lapidador (jóias)" },
                    { 1148, 752230, "Lapidador de vidros e cristais" },
                    { 1149, 516305, "Lavadeiro, em geral" },
                    { 1150, 516315, "Lavador de artefatos de tapeçaria" },
                    { 1151, 519930, "Lavador de garrafas, vidros e outros utensílios" },
                    { 1152, 761110, "Lavador de lã" },
                    { 1153, 992120, "Lavador de peças" },
                    { 1154, 516405, "Lavador de roupas" },
                    { 1155, 516310, "Lavador de roupas  a maquina" },
                    { 1156, 519935, "Lavador de veículos" },
                    { 1157, 354405, "Leiloeiro" },
                    { 1158, 519940, "Leiturista" },
                    { 1159, 113010, "Líder de comunidade caiçara" },
                    { 1160, 342560, "Lider de rampa ( transporte aéreo)" },
                    { 1161, 732135, "Ligador de linhas telefônicas" },
                    { 1162, 516320, "Limpador a seco, à máquina" },
                    { 1163, 514315, "Limpador de fachadas" },
                    { 1164, 514330, "Limpador de piscinas" },
                    { 1165, 516410, "Limpador de roupas a seco, à mão" },
                    { 1166, 514305, "Limpador de vidros" },
                    { 1167, 722210, "Lingotador" },
                    { 1168, 261415, "Lingüista" },
                    { 1169, 768610, "Linotipista" },
                    { 1170, 762315, "Lixador de couros e peles" },
                    { 1171, 421315, "Localizador (cobrador)" },
                    { 1172, 261715, "Locutor de mídias audiovisuais" },
                    { 1173, 919115, "Lubrificador de embarcações" },
                    { 1174, 919110, "Lubrificador de veículos automotores (exceto embarcações)" },
                    { 1175, 919105, "Lubrificador industrial" },
                    { 1176, 224110, "Ludomotricista" },
                    { 1177, 775115, "Lustrador de peças de madeira" },
                    { 1178, 716520, "Lustrador de piso" },
                    { 1179, 915215, "Luthier (restauração de cordas arcadas)" },
                    { 1180, 722310, "Macheiro, a  máquina" },
                    { 1181, 722305, "Macheiro, a mão" },
                    { 1182, 516215, "Mãe social" },
                    { 1183, 848520, "Magarefe" },
                    { 1184, 376235, "Mágico" },
                    { 1185, 510135, "Maître" },
                    { 1186, 30110, "Major bombeiro militar" },
                    { 1187, 20115, "Major da polícia militar" },
                    { 1188, 376240, "Malabarista" },
                    { 1189, 841725, "Malteiro (germinação)" },
                    { 1190, 516120, "Manicure" },
                    { 1191, 783110, "Manobrador" },
                    { 1192, 848215, "Manteigueiro na fabricação de laticínio" },
                    { 1193, 991205, "Mantenedor de equipamentos de parques de diversões e similares" },
                    { 1194, 951310, "Mantenedor de sistemas eletroeletrônicos de segurança" },
                    { 1195, 771115, "Maquetista na marcenaria" },
                    { 1196, 516125, "Maquiador" },
                    { 1197, 516130, "Maquiador de caracterização" },
                    { 1198, 374210, "Maquinista de cinema e vídeo" },
                    { 1199, 862110, "Maquinista de embarcações" },
                    { 1200, 374215, "Maquinista de teatro e espetáculos" },
                    { 1201, 782610, "Maquinista de trem" },
                    { 1202, 782615, "Maquinista de trem metropolitano" },
                    { 1203, 763315, "Marcador de peças confeccionadas para bordar" },
                    { 1204, 821415, "Marcador de produtos (siderúrgico e metalúrgico)" },
                    { 1205, 771105, "Marceneiro" },
                    { 1206, 775120, "Marcheteiro" },
                    { 1207, 782730, "Marinheiro auxiliar de convés (marítimo e aquaviario)" },
                    { 1208, 782735, "Marinheiro auxiliar de máquinas (marítimo e aquaviário)" },
                    { 1209, 782705, "Marinheiro de convés (marítimo e fluviário)" },
                    { 1210, 782725, "Marinheiro de esporte e recreio" },
                    { 1211, 782710, "Marinheiro de máquinas" },
                    { 1212, 716525, "Marmorista (construção)" },
                    { 1213, 848315, "Masseiro (massas alimentícias)" },
                    { 1214, 322120, "Massoterapeuta" },
                    { 1215, 211115, "Matemático" },
                    { 1216, 211120, "Matemático aplicado" },
                    { 1217, 762320, "Matizador de couros e peles" },
                    { 1218, 914105, "Mecânico de manutenção de aeronaves, em geral" },
                    { 1219, 913105, "Mecânico de manutenção de aparelhos de levantamento" },
                    { 1220, 919305, "Mecânico de manutenção de aparelhos esportivos e de ginástica" },
                    { 1221, 914405, "Mecânico de manutenção de automóveis, motocicletas e veículos similares" },
                    { 1222, 919310, "Mecânico de manutenção de bicicletas e veículos similares" },
                    { 1223, 911105, "Mecânico de manutenção de bomba injetora (exceto de veículos automotores)" },
                    { 1224, 911110, "Mecânico de manutenção de bombas" },
                    { 1225, 911115, "Mecânico de manutenção de compressores de ar" },
                    { 1226, 914410, "Mecânico de manutenção de empilhadeiras e outros veículos de cargas leves" },
                    { 1227, 913110, "Mecânico de manutenção de equipamento de mineração" },
                    { 1228, 954120, "Mecânico de manutenção de instalações mecânicas de edifícios" },
                    { 1229, 913115, "Mecânico de manutenção de máquinas agrícolas" },
                    { 1230, 919205, "Mecânico de manutenção de máquinas cortadoras de grama, roçadeiras, motosserras e similares" },
                    { 1231, 913120, "Mecânico de manutenção de máquinas de construção e terraplenagem" },
                    { 1232, 911310, "Mecânico de manutenção de máquinas gráficas" },
                    { 1233, 911315, "Mecânico de manutenção de máquinas operatrizes (lavra de madeira)" },
                    { 1234, 911320, "Mecânico de manutenção de máquinas têxteis" },
                    { 1235, 911305, "Mecânico de manutenção de máquinas, em geral" },
                    { 1236, 911325, "Mecânico de manutenção de máquinas-ferramentas (usinagem de metais)" },
                    { 1237, 914415, "Mecânico de manutenção de motocicletas" },
                    { 1238, 911120, "Mecânico de manutenção de motores diesel (exceto de veículos automotores)" },
                    { 1239, 914205, "Mecânico de manutenção de motores e equipamentos navais" },
                    { 1240, 911125, "Mecânico de manutenção de redutores" },
                    { 1241, 914110, "Mecânico de manutenção de sistema hidráulico de aeronaves (serviços de pista e hangar)" },
                    { 1242, 914420, "Mecânico de manutenção de tratores" },
                    { 1243, 911130, "Mecânico de manutenção de turbinas (exceto de aeronaves)" },
                    { 1244, 911135, "Mecânico de manutenção de turbocompressores" },
                    { 1245, 914305, "Mecânico de manutenção de veículos ferroviários" },
                    { 1246, 911205, "Mecânico de manutenção e instalação de aparelhos de climatização e  refrigeração" },
                    { 1247, 725705, "Mecânico de refrigeração" },
                    { 1248, 914425, "Mecânico de veículos automotores a diesel (exceto tratores)" },
                    { 1249, 341115, "Mecânico de vôo" },
                    { 1250, 725405, "Mecânico montador de motores de aeronaves" },
                    { 1251, 725410, "Mecânico montador de motores de embarcações" },
                    { 1252, 725415, "Mecânico montador de motores de explosão e diesel" },
                    { 1253, 725420, "Mecânico montador de turboalimentadores" },
                    { 1254, 351435, "Mediador extrajudicial" },
                    { 1255, 225105, "Médico acupunturista" },
                    { 1256, 225110, "Médico alergista e imunologista" },
                    { 1257, 225148, "Médico anatomopatologista" },
                    { 1258, 225151, "Médico anestesiologista" },
                    { 1259, 225115, "Médico angiologista" },
                    { 1260, 225154, "Médico antroposófico" },
                    { 1261, 225290, "Médico cancerologista cirurgíco" },
                    { 1262, 225122, "Médico cancerologista pediátrico" },
                    { 1263, 225120, "Médico cardiologista" },
                    { 1264, 225210, "Médico cirurgião cardiovascular" },
                    { 1265, 225295, "Médico cirurgião da mão" },
                    { 1266, 225215, "Médico cirurgião de cabeça e pescoço" },
                    { 1267, 225220, "Médico cirurgião do aparelho digestivo" },
                    { 1268, 225225, "Médico cirurgião geral" },
                    { 1269, 225230, "Médico cirurgião pediátrico" },
                    { 1270, 225235, "Médico cirurgião plástico" },
                    { 1271, 225240, "Médico cirurgião torácico" },
                    { 1272, 225305, "Médico citopatologista" },
                    { 1273, 225125, "Médico clínico" },
                    { 1274, 225280, "Médico coloproctologista" },
                    { 1275, 225142, "Médico da estratégia de saúde da família" },
                    { 1276, 225130, "Médico de família e comunidade" },
                    { 1277, 225135, "Médico dermatologista" },
                    { 1278, 225140, "Médico do trabalho" },
                    { 1279, 225203, "Médico em cirurgia vascular" },
                    { 1280, 225310, "Médico em endoscopia" },
                    { 1281, 225145, "Médico em medicina de tráfego" },
                    { 1282, 225150, "Médico em medicina intensiva" },
                    { 1283, 225315, "Médico em medicina nuclear" },
                    { 1284, 225320, "Médico em radiologia e diagnóstico por imagem" },
                    { 1285, 225155, "Médico endocrinologista e metabologista" },
                    { 1286, 225160, "Médico fisiatra" },
                    { 1287, 225165, "Médico gastroenterologista" },
                    { 1288, 225170, "Médico generalista" },
                    { 1289, 225175, "Médico geneticista" },
                    { 1290, 225180, "Médico geriatra" },
                    { 1291, 225250, "Médico ginecologista e obstetra" },
                    { 1292, 225185, "Médico hematologista" },
                    { 1293, 225340, "Médico hemoterapeuta" },
                    { 1294, 225345, "Médico hiperbarista" },
                    { 1295, 225195, "Médico homeopata" },
                    { 1296, 225103, "Médico infectologista" },
                    { 1297, 225106, "Médico legista" },
                    { 1298, 225255, "Médico mastologista" },
                    { 1299, 225109, "Médico nefrologista" },
                    { 1300, 225260, "Médico neurocirurgião" },
                    { 1301, 225350, "Médico neurofisiologista clínico" },
                    { 1302, 225112, "Médico neurologista" },
                    { 1303, 225118, "Médico nutrologista" },
                    { 1304, 225265, "Médico oftalmologista" },
                    { 1305, 225121, "Médico oncologista clínico" },
                    { 1306, 225270, "Médico ortopedista e traumatologista" },
                    { 1307, 225275, "Médico otorrinolaringologista" },
                    { 1308, 225325, "Médico patologista" },
                    { 1309, 225335, "Médico patologista clínico / medicina laboratorial" },
                    { 1310, 225124, "Médico pediatra" },
                    { 1311, 225127, "Médico pneumologista" },
                    { 1312, 225133, "Médico psiquiatra" },
                    { 1313, 225355, "Médico radiologista intervencionista" },
                    { 1314, 225330, "Médico radioterapeuta" },
                    { 1315, 225136, "Médico reumatologista" },
                    { 1316, 225139, "Médico sanitarista" },
                    { 1317, 225285, "Médico urologista" },
                    { 1318, 223305, "Médico veterinário" },
                    { 1319, 113015, "Membro de liderança quilombola" },
                    { 1320, 111225, "Membro superior do poder executivo" },
                    { 1321, 781705, "Mergulhador profissional (raso e profundo)" },
                    { 1322, 720105, "Mestre (afiador de ferramentas)" },
                    { 1323, 710205, "Mestre (construção civil)" },
                    { 1324, 720205, "Mestre (construção naval)" },
                    { 1325, 720210, "Mestre (indústria de automotores e material de transportes)" },
                    { 1326, 810205, "Mestre (indústria de borracha e plástico)" },
                    { 1327, 830105, "Mestre (indústria de celulose, papel e papelão)" },
                    { 1328, 770105, "Mestre (indústria de madeira e mobiliário)" },
                    { 1329, 720215, "Mestre (indústria de máquinas e outros equipamentos mecânicos)" },
                    { 1330, 810105, "Mestre (indústria petroquímica e carboquímica)" },
                    { 1331, 760125, "Mestre (indústria têxtil e de confecções)" },
                    { 1332, 770110, "Mestre carpinteiro" },
                    { 1333, 820110, "Mestre de aciaria" },
                    { 1334, 820115, "Mestre de alto-forno" },
                    { 1335, 341210, "Mestre de cabotagem" },
                    { 1336, 720110, "Mestre de caldeiraria" },
                    { 1337, 376330, "Mestre de cerimonias" },
                    { 1338, 720220, "Mestre de construção de fornos" },
                    { 1339, 720115, "Mestre de ferramentaria" },
                    { 1340, 720120, "Mestre de forjaria" },
                    { 1341, 820120, "Mestre de forno elétrico" },
                    { 1342, 720125, "Mestre de fundição" },
                    { 1343, 720130, "Mestre de galvanoplastia" },
                    { 1344, 820125, "Mestre de laminação" },
                    { 1345, 710210, "Mestre de linhas (ferrovias)" },
                    { 1346, 720135, "Mestre de pintura (tratamento de superfícies)" },
                    { 1347, 810305, "Mestre de produção farmacêutica" },
                    { 1348, 810110, "Mestre de produção química" },
                    { 1349, 820105, "Mestre de siderurgia" },
                    { 1350, 720140, "Mestre de soldagem" },
                    { 1351, 720145, "Mestre de trefilação de metais" },
                    { 1352, 720150, "Mestre de usinagem" },
                    { 1353, 341215, "Mestre fluvial" },
                    { 1354, 720155, "Mestre serralheiro" },
                    { 1355, 723225, "Metalizador (banho quente)" },
                    { 1356, 723220, "Metalizador a pistola" },
                    { 1357, 213315, "Meteorologista" },
                    { 1358, 352305, "Metrologista" },
                    { 1359, 374140, "Microfonista" },
                    { 1360, 711130, "Mineiro" },
                    { 1361, 613415, "Minhocultor" },
                    { 1362, 263105, "Ministro de culto religioso" },
                    { 1363, 111215, "Ministro de estado" },
                    { 1364, 111320, "Ministro do  superior tribunal do trabalho" },
                    { 1365, 111315, "Ministro do  superior tribunal militar" },
                    { 1366, 111310, "Ministro do superior tribunal de justiça" },
                    { 1367, 111305, "Ministro do supremo tribunal federal" },
                    { 1368, 263110, "Missionário" },
                    { 1369, 841605, "Misturador de café" },
                    { 1370, 841630, "Misturador de chá ou mate" },
                    { 1371, 782715, "Moço de convés (marítimo e fluviário)" },
                    { 1372, 782720, "Moço de máquinas (marítimo e fluviário)" },
                    { 1373, 771110, "Modelador de madeira" },
                    { 1374, 721115, "Modelador de metais (fundição)" },
                    { 1375, 318815, "Modelista de calçados" },
                    { 1376, 318810, "Modelista de roupas" },
                    { 1377, 376405, "Modelo artístico" },
                    { 1378, 376410, "Modelo de modas" },
                    { 1379, 376415, "Modelo publicitário" },
                    { 1380, 841615, "Moedor de café" },
                    { 1381, 841205, "Moedor de sal" },
                    { 1382, 752110, "Moldador (vidros)" },
                    { 1383, 823230, "Moldador de abrasivos na fabricação de cerâmica, vidro e porcelana" },
                    { 1384, 811750, "Moldador de borracha por compressão" },
                    { 1385, 715310, "Moldador de corpos de prova em usinas de concreto" },
                    { 1386, 811760, "Moldador de plástico por compressão" },
                    { 1387, 811770, "Moldador de plástico por injeção" },
                    { 1388, 722315, "Moldador, a  mão" },
                    { 1389, 722320, "Moldador, a  máquina" },
                    { 1390, 811105, "Moleiro (tratamentos químicos e afins)" },
                    { 1391, 841105, "Moleiro de cereais (exceto arroz)" },
                    { 1392, 841110, "Moleiro de especiarias" },
                    { 1393, 712105, "Moleiro de minérios" },
                    { 1394, 515315, "Monitor de dependente químico" },
                    { 1395, 515330, "Monitor de ressocialização prisional" },
                    { 1396, 951320, "Monitor de sistemas eletrônicos de segurança externo" },
                    { 1397, 951315, "Monitor de sistemas eletrônicos de segurança interno" },
                    { 1398, 422335, "Monitor de teleatendimento" },
                    { 1399, 334115, "Monitor de transporte escolar" },
                    { 1400, 768615, "Monotipista" },
                    { 1401, 715545, "Montador de andaimes (edificações)" },
                    { 1402, 765315, "Montador de artefatos de couro (exceto roupas e calçados)" },
                    { 1403, 919315, "Montador de bicicletas" },
                    { 1404, 764210, "Montador de calçados" },
                    { 1405, 725305, "Montador de equipamento de levantamento" },
                    { 1406, 731135, "Montador de equipamentos elétricos" },
                    { 1407, 731120, "Montador de equipamentos elétricos (aparelhos eletrodomésticos)" },
                    { 1408, 731125, "Montador de equipamentos elétricos (centrais elétricas)" },
                    { 1409, 731155, "Montador de equipamentos elétricos (elevadores e equipamentos similares)" },
                    { 1410, 731115, "Montador de equipamentos elétricos (instrumentos de medição)" },
                    { 1411, 731130, "Montador de equipamentos elétricos (motores e dínamos)" },
                    { 1412, 731160, "Montador de equipamentos elétricos (transformadores)" },
                    { 1413, 731150, "Montador de equipamentos eletrônicos" },
                    { 1414, 731105, "Montador de equipamentos eletrônicos (aparelhos médicos)" },
                    { 1415, 731110, "Montador de equipamentos eletrônicos (computadores e equipamentos auxiliares)" },
                    { 1416, 731205, "Montador de equipamentos eletrônicos (estação de rádio, tv e equipamentos de radar)" },
                    { 1417, 731140, "Montador de equipamentos eletrônicos (instalações de sinalização)" },
                    { 1418, 731145, "Montador de equipamentos eletrônicos (máquinas industriais)" },
                    { 1419, 725605, "Montador de estruturas de aeronaves" },
                    { 1420, 724205, "Montador de estruturas metálicas" },
                    { 1421, 724210, "Montador de estruturas metálicas de embarcações" },
                    { 1422, 374420, "Montador de filmes" },
                    { 1423, 766125, "Montador de fotolito (analógico e digital)" },
                    { 1424, 741110, "Montador de instrumentos de óptica" },
                    { 1425, 741115, "Montador de instrumentos de precisão" },
                    { 1426, 725205, "Montador de máquinas" },
                    { 1427, 725310, "Montador de máquinas agrícolas" },
                    { 1428, 725315, "Montador de máquinas de minas e pedreiras" },
                    { 1429, 725320, "Montador de máquinas de terraplenagem" },
                    { 1430, 725210, "Montador de máquinas gráficas" },
                    { 1431, 725215, "Montador de máquinas operatrizes para madeira" },
                    { 1432, 725220, "Montador de máquinas têxteis" },
                    { 1433, 725105, "Montador de máquinas, motores e acessórios (montagem em série)" },
                    { 1434, 725225, "Montador de máquinas-ferramentas (usinagem de metais)" },
                    { 1435, 774105, "Montador de móveis e artefatos de madeira" },
                    { 1436, 725610, "Montador de sistemas de combustível de aeronaves" },
                    { 1437, 725505, "Montador de veículos (linha de montagem)" },
                    { 1438, 991310, "Montador de veículos (reparação)" },
                    { 1439, 513110, "Mordomo de hotelaria" },
                    { 1440, 513105, "Mordomo de residência" },
                    { 1441, 716530, "Mosaísta" },
                    { 1442, 519110, "Motofretista" },
                    { 1443, 782510, "Motorista de caminhão (rotas regionais e internacionais)" },
                    { 1444, 782305, "Motorista de carro de passeio" },
                    { 1445, 782310, "Motorista de furgão ou veículo similar" },
                    { 1446, 782405, "Motorista de ônibus rodoviário" },
                    { 1447, 782410, "Motorista de ônibus urbano" },
                    { 1448, 782315, "Motorista de táxi" },
                    { 1449, 782415, "Motorista de trólebus" },
                    { 1450, 782515, "Motorista operacional de guincho" },
                    { 1451, 782620, "Motorneiro" },
                    { 1452, 519115, "Mototaxista" },
                    { 1453, 261310, "Museólogo" },
                    { 1454, 262610, "Músico arranjador" },
                    { 1455, 262705, "Músico intérprete cantor" },
                    { 1456, 262710, "Músico intérprete instrumentista" },
                    { 1457, 262615, "Músico regente" },
                    { 1458, 262620, "Musicólogo" },
                    { 1459, 226305, "Musicoterapeuta" },
                    { 1460, 226320, "Naturólogo" },
                    { 1461, 251545, "Neuropsicólogo" },
                    { 1462, 239440, "Neuropsicopedagogo clinico" },
                    { 1463, 239445, "Neuropsicopedagogo institucional" },
                    { 1464, 723110, "Normalizador de metais e de compósitos" },
                    { 1465, 516710, "Numerólogo" },
                    { 1466, 223710, "Nutricionista" },
                    { 1467, 213440, "Oceanógrafo" },
                    { 1468, 10205, "Oficial da aeronáutica" },
                    { 1469, 10215, "Oficial da marinha" },
                    { 1470, 242905, "Oficial de inteligência" },
                    { 1471, 351425, "Oficial de justiça" },
                    { 1472, 215140, "Oficial de quarto de navegação da marinha mercante" },
                    { 1473, 241305, "Oficial de registro de contratos marítimos" },
                    { 1474, 10210, "Oficial do exército" },
                    { 1475, 241310, "Oficial do registro civil de pessoas jurídicas" },
                    { 1476, 241315, "Oficial do registro civil de pessoas naturais" },
                    { 1477, 241320, "Oficial do registro de distribuições" },
                    { 1478, 241325, "Oficial do registro de imóveis" },
                    { 1479, 241330, "Oficial do registro de títulos e documentos" },
                    { 1480, 10105, "Oficial general da aeronáutica" },
                    { 1481, 10115, "Oficial general da marinha" },
                    { 1482, 10110, "Oficial general do exército" },
                    { 1483, 215205, "Oficial superior de máquinas da marinha mercante" },
                    { 1484, 242910, "Oficial técnico de inteligência" },
                    { 1485, 828105, "Oleiro (fabricação de telhas)" },
                    { 1486, 828110, "Oleiro (fabricação de tijolos)" },
                    { 1487, 862160, "Operador de abastecimento de combustível de aeronave" },
                    { 1488, 761205, "Operador de abertura (fiação)" },
                    { 1489, 766315, "Operador de acabamento (indústria gráfica)" },
                    { 1490, 722215, "Operador de acabamento de peças fundidas" },
                    { 1491, 821230, "Operador de aciaria (basculamento de convertedor)" },
                    { 1492, 821235, "Operador de aciaria (dessulfuração de gusa)" },
                    { 1493, 821240, "Operador de aciaria (recebimento de gusa)" },
                    { 1494, 781310, "Operador de aeronaves não tripuladas" },
                    { 1495, 811415, "Operador de alambique de funcionamento contínuo (produtos químicos, exceto petróleo)" },
                    { 1496, 712110, "Operador de aparelho de flotação" },
                    { 1497, 712115, "Operador de aparelho de precipitação (minas de ouro ou prata)" },
                    { 1498, 811420, "Operador de aparelho de reação e conversão (produtos químicos, exceto petróleo)" },
                    { 1499, 821245, "Operador de área de corrida" },
                    { 1500, 342535, "Operador de atendimento aeroviário" },
                    { 1501, 823135, "Operador de atomizador" },
                    { 1502, 823235, "Operador de banho metálico de vidro por flutuação" },
                    { 1503, 715105, "Operador de bate-estacas" },
                    { 1504, 862115, "Operador de bateria de gás de hulha" },
                    { 1505, 715405, "Operador de betoneira" },
                    { 1506, 761210, "Operador de binadeira" },
                    { 1507, 761215, "Operador de bobinadeira" },
                    { 1508, 821420, "Operador de bobinadeira de tiras a quente, no acabamento de chapas e metais" },
                    { 1509, 715410, "Operador de bomba de concreto" },
                    { 1510, 831110, "Operador de branqueador de pasta para fabricação de papel" },
                    { 1511, 811115, "Operador de britadeira (tratamentos químicos e afins)" },
                    { 1512, 811605, "Operador de britador de coque" },
                    { 1513, 712120, "Operador de britador de mandíbulas" },
                    { 1514, 821425, "Operador de cabine de laminação (fio-máquina)" },
                    { 1515, 421125, "Operador de caixa" },
                    { 1516, 813110, "Operador de calandra (química, petroquímica e afins)" },
                    { 1517, 761415, "Operador de calandras (tecidos)" },
                    { 1518, 811205, "Operador de calcinação (tratamento químico e afins)" },
                    { 1519, 862120, "Operador de caldeira" },
                    { 1520, 841456, "Operador de câmaras frias" },
                    { 1521, 372115, "Operador de câmera de televisão" },
                    { 1522, 711205, "Operador de caminhão (minas e pedreiras)" },
                    { 1523, 761220, "Operador de cardas" },
                    { 1524, 711210, "Operador de carregadeira" },
                    { 1525, 811610, "Operador de carro de apagamento e coque" },
                    { 1526, 992215, "Operador de ceifadeira na conservação de vias permanentes" },
                    { 1527, 715415, "Operador de central de concreto" },
                    { 1528, 861105, "Operador de central hidrelétrica" },
                    { 1529, 861115, "Operador de central termoelétrica" },
                    { 1530, 811305, "Operador de centrifugadora (tratamentos químicos e afins)" },
                    { 1531, 821105, "Operador de centro de controle" },
                    { 1532, 342410, "Operador de centro de controle (ferrovia e metrô)" },
                    { 1533, 721405, "Operador de centro de usinagem com comando numérico" },
                    { 1534, 773505, "Operador de centro de usinagem de madeira (cnc)" },
                    { 1535, 761420, "Operador de chamuscadeira de tecidos" },
                    { 1536, 413230, "Operador de cobrança bancária" },
                    { 1537, 642005, "Operador de colhedor florestal" },
                    { 1538, 641005, "Operador de colheitadeira" },
                    { 1539, 715110, "Operador de compactadora de solos" },
                    { 1540, 862130, "Operador de compressor de ar" },
                    { 1541, 317205, "Operador de computador" },
                    { 1542, 811120, "Operador de concentração" },
                    { 1543, 761225, "Operador de conicaleira" },
                    { 1544, 373135, "Operador de controle mestre" },
                    { 1545, 832110, "Operador de cortadeira de papel" },
                    { 1546, 841305, "Operador de cristalização na refinação de açucar" },
                    { 1547, 773305, "Operador de desempenadeira na usinagem convencional de madeira" },
                    { 1548, 821250, "Operador de desgaseificação" },
                    { 1549, 811615, "Operador de destilação e subprodutos de coque" },
                    { 1550, 831115, "Operador de digestor de pasta para fabricação de papel" },
                    { 1551, 782210, "Operador de docagem" },
                    { 1552, 782105, "Operador de draga" },
                    { 1553, 782220, "Operador de empilhadeira" },
                    { 1554, 811620, "Operador de enfornamento e desenfornamento de coque" },
                    { 1555, 761348, "Operador de engomadeira de urdume" },
                    { 1556, 773310, "Operador de entalhadeira (usinagem de madeira)" },
                    { 1557, 811425, "Operador de equipamento de destilação de álcool" },
                    { 1558, 723305, "Operador de equipamento de secagem de pintura" },
                    { 1559, 723115, "Operador de equipamento para resfriamento" },
                    { 1560, 722325, "Operador de equipamentos de preparação de areia" },
                    { 1561, 841310, "Operador de equipamentos de refinação de açúcar (processo contínuo)" },
                    { 1562, 715115, "Operador de escavadeira" },
                    { 1563, 821430, "Operador de escória e sucata" },
                    { 1564, 752420, "Operador de esmaltadeira" },
                    { 1565, 752425, "Operador de espelhamento" },
                    { 1566, 712125, "Operador de espessador" },
                    { 1567, 761351, "Operador de espuladeira" },
                    { 1568, 862140, "Operador de estação de bombeamento" },
                    { 1569, 862205, "Operador de estação de captação, tratamento e distribuição de água" },
                    { 1570, 862305, "Operador de estação de tratamento de água e efluentes" },
                    { 1571, 811430, "Operador de evaporador na destilação" },
                    { 1572, 811625, "Operador de exaustor (coqueria)" },
                    { 1573, 811310, "Operador de exploração de petróleo" },
                    { 1574, 841620, "Operador de extração de café solúvel" },
                    { 1575, 813115, "Operador de extrusora (química, petroquímica e afins)" },
                    { 1576, 761230, "Operador de filatório" },
                    { 1577, 811315, "Operador de filtro de secagem (mineração)" },
                    { 1578, 811320, "Operador de filtro de tambor rotativo (tratamentos químicos e afins)" },
                    { 1579, 811325, "Operador de filtro-esteira (mineração)" },
                    { 1580, 811330, "Operador de filtro-prensa (tratamentos químicos e afins)" },
                    { 1581, 811335, "Operador de filtros de parafina (tratamentos químicos e afins)" },
                    { 1582, 841805, "Operador de forno (fabricação de pães, biscoitos e similares)" },
                    { 1583, 516605, "Operador de forno (serviços funerários)" },
                    { 1584, 862310, "Operador de forno de incineração no tratamento de água, efluentes e resíduos industriais" },
                    { 1585, 723120, "Operador de forno de tratamento térmico de metais" },
                    { 1586, 773315, "Operador de fresadora (usinagem de madeira)" },
                    { 1587, 721410, "Operador de fresadora com comando numérico" },
                    { 1588, 766320, "Operador de guilhotina (corte de papel)" },
                    { 1589, 782110, "Operador de guindaste (fixo)" },
                    { 1590, 782115, "Operador de guindaste móvel" },
                    { 1591, 761425, "Operador de impermeabilizador de tecidos" },
                    { 1592, 623315, "Operador de incubadora" },
                    { 1593, 391215, "Operador de inspeção de qualidade" },
                    { 1594, 862515, "Operador de instalação de ar-condicionado" },
                    { 1595, 862405, "Operador de instalação de extração, processamento, envasamento e distribuição de gases" },
                    { 1596, 862505, "Operador de instalação de refrigeração" },
                    { 1597, 821435, "Operador de jato abrasivo" },
                    { 1598, 712130, "Operador de jig (minas)" },
                    { 1599, 724605, "Operador de laços de cabos de aço" },
                    { 1600, 761235, "Operador de laminadeira e reunideira" },
                    { 1601, 821305, "Operador de laminador" },
                    { 1602, 821310, "Operador de laminador de barras a frio" },
                    { 1603, 821315, "Operador de laminador de barras a quente" },
                    { 1604, 821320, "Operador de laminador de metais não-ferrosos" },
                    { 1605, 821325, "Operador de laminador de tubos" },
                    { 1606, 831120, "Operador de lavagem e depuração de pasta para fabricação de papel" },
                    { 1607, 731175, "Operador de linha de montagem (aparelhos elétricos)" },
                    { 1608, 731180, "Operador de linha de montagem (aparelhos eletrônicos)" },
                    { 1609, 773320, "Operador de lixadeira (usinagem de madeira)" },
                    { 1610, 761240, "Operador de maçaroqueira" },
                    { 1611, 721415, "Operador de mandriladora com comando numérico" },
                    { 1612, 842125, "Operador de máquina (fabricação de cigarros)" },
                    { 1613, 773405, "Operador de máquina bordatriz" },
                    { 1614, 415130, "Operador de máquina copiadora (exceto operador de gráfica rápida)" },
                    { 1615, 711215, "Operador de máquina cortadora (minas e pedreiras)" },
                    { 1616, 715120, "Operador de máquina de abrir valas" },
                    { 1617, 724505, "Operador de máquina de cilindrar chapas" },
                    { 1618, 761354, "Operador de máquina de cordoalha" },
                    { 1619, 833120, "Operador de máquina de cortar e dobrar papelão" },
                    { 1620, 773410, "Operador de máquina de cortina d´água (produção de móveis)" },
                    { 1621, 763320, "Operador de máquina de costura de acabamento" },
                    { 1622, 724510, "Operador de máquina de dobrar chapas" },
                    { 1623, 721205, "Operador de máquina de eletroerosão" },
                    { 1624, 784120, "Operador de máquina de envasar líquidos" },
                    { 1625, 784115, "Operador de máquina de etiquetar" },
                    { 1626, 711220, "Operador de máquina de extração contínua (minas de carvão)" },
                    { 1627, 811815, "Operador de máquina de fabricação de cosméticos" },
                    { 1628, 811820, "Operador de máquina de fabricação de produtos de higiene e limpeza (sabão, sabonete,fraldas e outros)" },
                    { 1629, 842210, "Operador de máquina de fabricar charutos e cigarrilhas" },
                    { 1630, 832115, "Operador de máquina de fabricar papel  (fase úmida)" },
                    { 1631, 832120, "Operador de máquina de fabricar papel (fase seca)" },
                    { 1632, 832125, "Operador de máquina de fabricar papel e papelão" },
                    { 1633, 722220, "Operador de máquina de fundição" },
                    { 1634, 722225, "Operador de máquina de fundir sob pressão" },
                    { 1635, 761430, "Operador de máquina de lavar fios e tecidos" },
                    { 1636, 722330, "Operador de máquina de moldar automatizada" },
                    { 1637, 842135, "Operador de máquina de preparação de matéria prima para produção de cigarros" },
                    { 1638, 811805, "Operador de máquina de produtos farmacêuticos" },
                    { 1639, 831125, "Operador de máquina de secar celulose" },
                    { 1640, 821110, "Operador de máquina de sinterizar" },
                    { 1641, 823240, "Operador de máquina de soprar vidro" },
                    { 1642, 773415, "Operador de máquina de usinagem de madeira (produção em série)" },
                    { 1643, 773325, "Operador de máquina de usinagem madeira, em geral" },
                    { 1644, 721420, "Operador de máquina eletroerosão, à fio, com comando numérico" },
                    { 1645, 823245, "Operador de máquina extrusora de varetas e tubos de vidro" },
                    { 1646, 773205, "Operador de máquina intercaladora de placas (compensados)" },
                    { 1647, 811110, "Operador de máquina misturadeira (tratamentos químicos e afins)" },
                    { 1648, 711225, "Operador de máquina perfuradora (minas e pedreiras)" },
                    { 1649, 711230, "Operador de máquina perfuratriz" },
                    { 1650, 723230, "Operador de máquina recobridora de arame" },
                    { 1651, 782120, "Operador de máquina rodoferroviária" },
                    { 1652, 641010, "Operador de máquinas de beneficiamento de produtos agrícolas" },
                    { 1653, 715125, "Operador de máquinas de construção civil e mineração" },
                    { 1654, 841815, "Operador de máquinas de fabricação de chocolates e achocolatados" },
                    { 1655, 841810, "Operador de máquinas de fabricação de doces, salgados e massas alimentícias" },
                    { 1656, 773510, "Operador de máquinas de usinar madeira (cnc)" },
                    { 1657, 762325, "Operador de máquinas do acabamento de couros e peles" },
                    { 1658, 991115, "Operador de máquinas especiais em conservação de via permanente (trilhos)" },
                    { 1659, 862150, "Operador de máquinas fixas, em geral" },
                    { 1660, 642010, "Operador de máquinas florestais estáticas" },
                    { 1661, 721210, "Operador de máquinas operatrizes" },
                    { 1662, 721215, "Operador de máquinas-ferramenta convencionais" },
                    { 1663, 717010, "Operador de martelete" },
                    { 1664, 412115, "Operador de mensagens de telecomunicações (correios)" },
                    { 1665, 373105, "Operador de mídia audiovisual" },
                    { 1666, 841315, "Operador de moenda na fabricação de açúcar" },
                    { 1667, 773330, "Operador de molduradora (usinagem de madeira)" },
                    { 1668, 782125, "Operador de monta-cargas (construção civil)" },
                    { 1669, 821330, "Operador de montagem de cilindros e mancais" },
                    { 1670, 715130, "Operador de motoniveladora" },
                    { 1671, 711235, "Operador de motoniveladora (extração de minerais sólidos)" },
                    { 1672, 632120, "Operador de motosserra" },
                    { 1673, 253225, "Operador de negócios" },
                    { 1674, 761245, "Operador de open-end" },
                    { 1675, 715135, "Operador de pá carregadeira" },
                    { 1676, 811630, "Operador de painel de controle" },
                    { 1677, 811505, "Operador de painel de controle (refinação de petróleo)" },
                    { 1678, 761250, "Operador de passador (fiação)" },
                    { 1679, 715140, "Operador de pavimentadora (asfalto, concreto e materiais similares)" },
                    { 1680, 712135, "Operador de peneiras hidráulicas" },
                    { 1681, 761255, "Operador de penteadeira" },
                    { 1682, 773335, "Operador de plaina desengrossadeira" },
                    { 1683, 782130, "Operador de ponte rolante" },
                    { 1684, 782135, "Operador de pórtico rolante" },
                    { 1685, 773420, "Operador de prensa de alta freqüência na usinagem de madeira" },
                    { 1686, 833125, "Operador de prensa de embutir papelão" },
                    { 1687, 784125, "Operador de prensa de enfardamento" },
                    { 1688, 519215, "Operador de prensa de material reciclável" },
                    { 1689, 823250, "Operador de prensa de moldar vidro" },
                    { 1690, 841460, "Operador de preparação de grãos vegetais (óleos e gorduras)" },
                    { 1691, 811635, "Operador de preservação e controle térmico" },
                    { 1692, 813120, "Operador de processo (química, petroquímica e afins)" },
                    { 1693, 841115, "Operador de processo de moagem" },
                    { 1694, 766150, "Operador de processo de tratamento de imagem" },
                    { 1695, 811005, "Operador de processos químicos e petroquímicos" },
                    { 1696, 813125, "Operador de produção (química, petroquímica e afins)" },
                    { 1697, 374305, "Operador de projetor cinematográfico" },
                    { 1698, 861110, "Operador de quadro de distribuição de energia elétrica" },
                    { 1699, 422220, "Operador de rádio-chamada" },
                    { 1700, 761435, "Operador de rameuse" },
                    { 1701, 811640, "Operador de reator de coque de petróleo" },
                    { 1702, 861120, "Operador de reator nuclear" },
                    { 1703, 832135, "Operador de rebobinadeira na fabricação de papel e papelão" },
                    { 1704, 372205, "Operador de rede de teleprocessamento" },
                    { 1705, 811645, "Operador de refrigeração (coqueria)" },
                    { 1706, 862510, "Operador de refrigeração com amônia" },
                    { 1707, 721425, "Operador de retificadora com comando numérico" },
                    { 1708, 761260, "Operador de retorcedeira" },
                    { 1709, 811010, "Operador de sala de controle de instalações químicas, petroquímicas e afins" },
                    { 1710, 711410, "Operador de salina (sal marinho)" },
                    { 1711, 711240, "Operador de schutthecar" },
                    { 1712, 773340, "Operador de serras (usinagem de madeira)" },
                    { 1713, 773110, "Operador de serras no desdobramento de madeira" },
                    { 1714, 811650, "Operador de sistema de reversão (coqueria)" },
                    { 1715, 766145, "Operador de sistemas de prova (analógico e digital)" },
                    { 1716, 711305, "Operador de sonda de percussão" },
                    { 1717, 711310, "Operador de sonda rotativa" },
                    { 1718, 861205, "Operador de subestação" },
                    { 1719, 782140, "Operador de talha elétrica" },
                    { 1720, 782630, "Operador de teleférico (passageiros)" },
                    { 1721, 422305, "Operador de telemarketing ativo" },
                    { 1722, 422310, "Operador de telemarketing ativo e receptivo" },
                    { 1723, 422315, "Operador de telemarketing receptivo" },
                    { 1724, 422320, "Operador de telemarketing técnico" },
                    { 1725, 821440, "Operador de tesoura mecânica e máquina de corte, no acabamento de chapas e metais" },
                    { 1726, 725510, "Operador de time de montagem" },
                    { 1727, 773345, "Operador de torno automático (usinagem de madeira)" },
                    { 1728, 721430, "Operador de torno com comando numérico" },
                    { 1729, 811510, "Operador de transferência e estocagem - na refinação do petróleo" },
                    { 1730, 342110, "Operador de transporte multimodal" },
                    { 1731, 841320, "Operador de tratamento de calda na refinação de açúcar" },
                    { 1732, 811215, "Operador de tratamento químico de materiais radioativos" },
                    { 1733, 711245, "Operador de trator (minas e pedreiras)" },
                    { 1734, 715145, "Operador de trator de lâmina" },
                    { 1735, 642015, "Operador de trator florestal" },
                    { 1736, 782605, "Operador de trem de metrô" },
                    { 1737, 415210, "Operador de triagem e transbordo" },
                    { 1738, 773350, "Operador de tupia (usinagem de madeira)" },
                    { 1739, 354810, "Operador de turismo" },
                    { 1740, 761357, "Operador de urdideira" },
                    { 1741, 721220, "Operador de usinagem convencional por abrasão" },
                    { 1742, 862155, "Operador de utilidade (produção e distribuição de vapor, gás, óleo, combustível, energia, oxigênio)" },
                    { 1743, 722230, "Operador de vazamento (lingotamento)" },
                    { 1744, 781305, "Operador de veículos subaquáticos controlados remotamente" },
                    { 1745, 723235, "Operador de zincagem (processo eletrolítico)" },
                    { 1746, 954125, "Operador eletromecânico" },
                    { 1747, 761005, "Operador polivalente da indústria têxtil" },
                    { 1748, 374310, "Operador-mantenedor de projetor cinematográfico" },
                    { 1749, 354820, "Organizador de evento" },
                    { 1750, 239410, "Orientador educacional" },
                    { 1751, 223910, "Ortoptista" },
                    { 1752, 226110, "Osteopata" },
                    { 1753, 751125, "Ourives" },
                    { 1754, 142340, "Ouvidor" },
                    { 1755, 724310, "Oxicortador a mão e a  máquina" },
                    { 1756, 723240, "Oxidador" },
                    { 1757, 848305, "Padeiro" },
                    { 1758, 768620, "Paginador" },
                    { 1759, 762335, "Palecionador de couros e peles" },
                    { 1760, 213430, "Paleontólogo" },
                    { 1761, 376245, "Palhaço" },
                    { 1762, 351815, "Papiloscopista policial" },
                    { 1763, 516810, "Paranormal" },
                    { 1764, 515115, "Parteira leiga" },
                    { 1765, 763325, "Passadeira de peças confeccionadas" },
                    { 1766, 516325, "Passador de roupas em geral" },
                    { 1767, 516415, "Passador de roupas, à mão" },
                    { 1768, 761360, "Passamaneiro a  máquina" },
                    { 1769, 848205, "Pasteurizador" },
                    { 1770, 716515, "Pastilheiro" },
                    { 1771, 341220, "Patrão de pesca de alto-mar" },
                    { 1772, 341225, "Patrão de pesca na navegação interior" },
                    { 1773, 239415, "Pedagogo" },
                    { 1774, 516140, "Pedicure" },
                    { 1775, 715210, "Pedreiro" },
                    { 1776, 715215, "Pedreiro (chaminés industriais)" },
                    { 1777, 715220, "Pedreiro (material refratário)" },
                    { 1778, 715225, "Pedreiro (mineração)" },
                    { 1779, 992220, "Pedreiro de conservação de vias permanentes (exceto trilhos)" },
                    { 1780, 715230, "Pedreiro de edificações" },
                    { 1781, 325015, "Perfumista" },
                    { 1782, 223570, "Perfusionista" },
                    { 1783, 252215, "Perito contábil" },
                    { 1784, 204105, "Perito criminal" },
                    { 1785, 631105, "Pescador artesanal de água doce" },
                    { 1786, 631015, "Pescador artesanal de lagostas" },
                    { 1787, 631020, "Pescador artesanal de peixes e camarões" },
                    { 1788, 631205, "Pescador industrial" },
                    { 1789, 631210, "Pescador profissional" },
                    { 1790, 203305, "Pesquisador de clínica médica" },
                    { 1791, 203205, "Pesquisador de engenharia civil" },
                    { 1792, 203210, "Pesquisador de engenharia e tecnologia (outras áreas da engenharia)" },
                    { 1793, 203215, "Pesquisador de engenharia elétrica e eletrônica" },
                    { 1794, 203220, "Pesquisador de engenharia mecânica" },
                    { 1795, 203225, "Pesquisador de engenharia metalúrgica, de minas e de materiais" },
                    { 1796, 203230, "Pesquisador de engenharia química" },
                    { 1797, 203310, "Pesquisador de medicina básica" },
                    { 1798, 203005, "Pesquisador em biologia ambiental" },
                    { 1799, 203010, "Pesquisador em biologia animal" },
                    { 1800, 203015, "Pesquisador em biologia de microorganismos e parasitas" },
                    { 1801, 203020, "Pesquisador em biologia humana" },
                    { 1802, 203025, "Pesquisador em biologia vegetal" },
                    { 1803, 203405, "Pesquisador em ciências agronômicas" },
                    { 1804, 203105, "Pesquisador em ciências da computação e informática" },
                    { 1805, 203515, "Pesquisador em ciências da educação" },
                    { 1806, 203410, "Pesquisador em ciências da pesca e aqüicultura" },
                    { 1807, 203110, "Pesquisador em ciências da terra e meio ambiente" },
                    { 1808, 203415, "Pesquisador em ciências da zootecnia" },
                    { 1809, 203420, "Pesquisador em ciências florestais" },
                    { 1810, 203505, "Pesquisador em ciências sociais e humanas" },
                    { 1811, 203510, "Pesquisador em economia" },
                    { 1812, 203115, "Pesquisador em física" },
                    { 1813, 203520, "Pesquisador em história" },
                    { 1814, 203120, "Pesquisador em matemática" },
                    { 1815, 203315, "Pesquisador em medicina veterinária" },
                    { 1816, 201205, "Pesquisador em metrologia" },
                    { 1817, 203525, "Pesquisador em psicologia" },
                    { 1818, 203125, "Pesquisador em química" },
                    { 1819, 203320, "Pesquisador em saúde coletiva" },
                    { 1820, 213435, "Petrógrafo" },
                    { 1821, 761366, "Picotador de cartões jacquard" },
                    { 1822, 341120, "Piloto agrícola" },
                    { 1823, 341105, "Piloto comercial (exceto linhas aéreas)" },
                    { 1824, 341110, "Piloto comercial de helicóptero (exceto linhas aéreas)" },
                    { 1825, 215305, "Piloto de aeronaves" },
                    { 1826, 377135, "Piloto de competição automobilística" },
                    { 1827, 215310, "Piloto de ensaios em vôo" },
                    { 1828, 341230, "Piloto fluvial" },
                    { 1829, 723310, "Pintor a pincel e rolo (exceto obras e estruturas metálicas)" },
                    { 1830, 752430, "Pintor de cerâmica, a  pincel" },
                    { 1831, 723315, "Pintor de estruturas metálicas" },
                    { 1832, 768625, "Pintor de letreiros" },
                    { 1833, 716610, "Pintor de obras" },
                    { 1834, 723320, "Pintor de veículos (fabricação)" },
                    { 1835, 991315, "Pintor de veículos (reparação)" },
                    { 1836, 723325, "Pintor por imersão" },
                    { 1837, 723330, "Pintor, a  pistola (exceto obras e estruturas metálicas)" },
                    { 1838, 524310, "Pipoqueiro ambulante" },
                    { 1839, 812105, "Pirotécnico" },
                    { 1840, 513610, "Pizzaiolo" },
                    { 1841, 391120, "Planejista" },
                    { 1842, 711325, "Plataformista (petróleo)" },
                    { 1843, 717015, "Poceiro (edificações)" },
                    { 1844, 322110, "Podólogo" },
                    { 1845, 261525, "Poeta" },
                    { 1846, 517225, "Policial legislativo" },
                    { 1847, 517210, "Policial rodoviário federal" },
                    { 1848, 721325, "Polidor de metais" },
                    { 1849, 712220, "Polidor de pedras" },
                    { 1850, 517405, "Porteiro (hotel)" },
                    { 1851, 517410, "Porteiro de edifícios" },
                    { 1852, 10305, "Praça da aeronáutica" },
                    { 1853, 10315, "Praça da marinha" },
                    { 1854, 10310, "Praça do exército" },
                    { 1855, 215145, "Prático de portos da marinha mercante" },
                    { 1856, 111250, "Prefeito" },
                    { 1857, 762330, "Prensador de couros e peles" },
                    { 1858, 841464, "Prensador de frutas (exceto oleaginosas)" },
                    { 1859, 724515, "Prensista (operador de prensa)" },
                    { 1860, 773210, "Prensista de aglomerados" },
                    { 1861, 773215, "Prensista de compensados" },
                    { 1862, 823130, "Preparador de aditivos" },
                    { 1863, 773220, "Preparador de aglomerantes" },
                    { 1864, 224115, "Preparador de atleta" },
                    { 1865, 823120, "Preparador de barbotina" },
                    { 1866, 764115, "Preparador de calçados" },
                    { 1867, 762340, "Preparador de couros curtidos" },
                    { 1868, 823125, "Preparador de esmaltes (cerâmica)" },
                    { 1869, 724220, "Preparador de estruturas metálicas" },
                    { 1870, 842205, "Preparador de fumo na fabricação de charutos" },
                    { 1871, 721225, "Preparador de máquinas-ferramenta" },
                    { 1872, 823105, "Preparador de massa (fabricação de abrasivos)" },
                    { 1873, 823110, "Preparador de massa (fabricação de vidro)" },
                    { 1874, 823115, "Preparador de massa de argila" },
                    { 1875, 766325, "Preparador de matrizes de corte e vinco" },
                    { 1876, 842105, "Preparador de melado e essência de fumo" },
                    { 1877, 722235, "Preparador de panelas (lingotamento)" },
                    { 1878, 841468, "Preparador de rações" },
                    { 1879, 764120, "Preparador de solas e palmilhas" },
                    { 1880, 821445, "Preparador de sucata e aparas" },
                    { 1881, 311715, "Preparador de tintas" },
                    { 1882, 311720, "Preparador de tintas (fábrica de tecidos)" },
                    { 1883, 224120, "Preparador físico" },
                    { 1884, 111205, "Presidente da república" },
                    { 1885, 215210, "Primeiro oficial de máquinas da marinha mercante" },
                    { 1886, 20305, "Primeiro tenente de polícia militar" },
                    { 1887, 842110, "Processador de fumo" },
                    { 1888, 241210, "Procurador autárquico" },
                    { 1889, 242410, "Procurador da assistência judiciária" },
                    { 1890, 241215, "Procurador da fazenda nacional" },
                    { 1891, 242205, "Procurador da república" },
                    { 1892, 242210, "Procurador de justiça" },
                    { 1893, 242215, "Procurador de justiça militar" },
                    { 1894, 241220, "Procurador do estado" },
                    { 1895, 241225, "Procurador do município" },
                    { 1896, 242220, "Procurador do trabalho" },
                    { 1897, 241230, "Procurador federal" },
                    { 1898, 241235, "Procurador fundacional" },
                    { 1899, 242225, "Procurador regional da república" },
                    { 1900, 242230, "Procurador regional do trabalho" },
                    { 1901, 612005, "Produtor agrícola polivalente" },
                    { 1902, 611005, "Produtor agropecuário, em geral" },
                    { 1903, 262110, "Produtor cinematográfico" },
                    { 1904, 262105, "Produtor cultural" },
                    { 1905, 612705, "Produtor da cultura de amendoim" },
                    { 1906, 612710, "Produtor da cultura de canola" },
                    { 1907, 612715, "Produtor da cultura de coco-da-baia" },
                    { 1908, 612720, "Produtor da cultura de dendê" },
                    { 1909, 612725, "Produtor da cultura de girassol" },
                    { 1910, 612730, "Produtor da cultura de linho" },
                    { 1911, 612735, "Produtor da cultura de mamona" },
                    { 1912, 612740, "Produtor da cultura de soja" },
                    { 1913, 612205, "Produtor de algodão" },
                    { 1914, 612105, "Produtor de arroz" },
                    { 1915, 612505, "Produtor de árvores frutíferas" },
                    { 1916, 612610, "Produtor de cacau" },
                    { 1917, 612110, "Produtor de cana-de-açúcar" },
                    { 1918, 612115, "Produtor de cereais de inverno" },
                    { 1919, 612210, "Produtor de curauá" },
                    { 1920, 612615, "Produtor de erva-mate" },
                    { 1921, 612805, "Produtor de especiarias" },
                    { 1922, 612510, "Produtor de espécies frutíferas rasteiras" },
                    { 1923, 612515, "Produtor de espécies frutíferas trepadeiras" },
                    { 1924, 612405, "Produtor de flores de corte" },
                    { 1925, 612410, "Produtor de flores em vaso" },
                    { 1926, 612415, "Produtor de forrações" },
                    { 1927, 612620, "Produtor de fumo" },
                    { 1928, 612120, "Produtor de gramíneas forrageiras" },
                    { 1929, 612625, "Produtor de guaraná" },
                    { 1930, 612215, "Produtor de juta" },
                    { 1931, 612125, "Produtor de milho e sorgo" },
                    { 1932, 375125, "Produtor de moda" },
                    { 1933, 612810, "Produtor de plantas aromáticas e medicinais" },
                    { 1934, 612420, "Produtor de plantas ornamentais" },
                    { 1935, 262115, "Produtor de rádio" },
                    { 1936, 612220, "Produtor de rami" },
                    { 1937, 612225, "Produtor de sisal" },
                    { 1938, 262120, "Produtor de teatro" },
                    { 1939, 262125, "Produtor de televisão" },
                    { 1940, 261130, "Produtor de texto" },
                    { 1941, 612320, "Produtor na olericultura de frutos e sementes" },
                    { 1942, 612305, "Produtor na olericultura de legumes" },
                    { 1943, 612310, "Produtor na olericultura de raízes, bulbos e tubérculos" },
                    { 1944, 612315, "Produtor na olericultura de talos, folhas e flores" },
                    { 1945, 631415, "Proeiro" },
                    { 1946, 231205, "Professor da  educação de jovens e adultos do ensino fundamental (primeira a quarta série)" },
                    { 1947, 233105, "Professor da área de meio ambiente" },
                    { 1948, 234810, "Professor de administração" },
                    { 1949, 239205, "Professor de alunos com deficiência auditiva e surdos" },
                    { 1950, 239210, "Professor de alunos com deficiência física" },
                    { 1951, 239215, "Professor de alunos com deficiência mental" },
                    { 1952, 239220, "Professor de alunos com deficiência múltipla" },
                    { 1953, 239225, "Professor de alunos com deficiência visual" },
                    { 1954, 234705, "Professor de antropologia do ensino superior" },
                    { 1955, 234305, "Professor de arquitetura" },
                    { 1956, 234710, "Professor de arquivologia do ensino superior" },
                    { 1957, 234905, "Professor de artes do espetáculo no ensino superior" },
                    { 1958, 232105, "Professor de artes no ensino médio" },
                    { 1959, 234910, "Professor de artes visuais no ensino superior (artes plásticas e multimídia)" },
                    { 1960, 234215, "Professor de astronomia (ensino superior)" },
                    { 1961, 234715, "Professor de biblioteconomia do ensino superior" },
                    { 1962, 232110, "Professor de biologia no ensino médio" },
                    { 1963, 234720, "Professor de ciência política do ensino superior" },
                    { 1964, 234405, "Professor de ciências biológicas do ensino superior" },
                    { 1965, 231305, "Professor de ciências exatas e naturais do ensino fundamental" },
                    { 1966, 234120, "Professor de computação (no ensino superior)" },
                    { 1967, 234725, "Professor de comunicação social do ensino superior" },
                    { 1968, 234815, "Professor de contabilidade" },
                    { 1969, 262830, "Professor de dança" },
                    { 1970, 233110, "Professor de desenho técnico" },
                    { 1971, 234730, "Professor de direito do ensino superior" },
                    { 1972, 232115, "Professor de disciplinas pedagógicas no ensino médio" },
                    { 1973, 234805, "Professor de economia" },
                    { 1974, 231310, "Professor de educação artística do ensino fundamental" },
                    { 1975, 231315, "Professor de educação física do ensino fundamental" },
                    { 1976, 232120, "Professor de educação física no ensino médio" },
                    { 1977, 234410, "Professor de educação física no ensino superior" },
                    { 1978, 234415, "Professor de enfermagem do ensino superior" },
                    { 1979, 234310, "Professor de engenharia" },
                    { 1980, 234505, "Professor de ensino superior na área de didática" },
                    { 1981, 234510, "Professor de ensino superior na área de orientação educacional" },
                    { 1982, 234515, "Professor de ensino superior na área de pesquisa educacional" },
                    { 1983, 234520, "Professor de ensino superior na área de prática de ensino" },
                    { 1984, 234115, "Professor de estatística (no ensino superior)" },
                    { 1985, 234420, "Professor de farmácia e bioquímica" },
                    { 1986, 234676, "Professor de filologia e crítica textual" },
                    { 1987, 234735, "Professor de filosofia do ensino superior" },
                    { 1988, 232125, "Professor de filosofia no ensino médio" },
                    { 1989, 234205, "Professor de física (ensino superior)" },
                    { 1990, 232130, "Professor de física no ensino médio" },
                    { 1991, 234425, "Professor de fisioterapia" },
                    { 1992, 234430, "Professor de fonoaudiologia" },
                    { 1993, 234315, "Professor de geofísica" },
                    { 1994, 231320, "Professor de geografia do ensino fundamental" },
                    { 1995, 234740, "Professor de geografia do ensino superior" },
                    { 1996, 232135, "Professor de geografia no ensino médio" },
                    { 1997, 234320, "Professor de geologia" },
                    { 1998, 231325, "Professor de história do ensino fundamental" },
                    { 1999, 234745, "Professor de história do ensino superior" },
                    { 2000, 232140, "Professor de história no ensino médio" },
                    { 2001, 234750, "Professor de jornalismo" },
                    { 2002, 234604, "Professor de língua alemã" },
                    { 2003, 232145, "Professor de língua e literatura brasileira no ensino médio" },
                    { 2004, 234620, "Professor de língua espanhola" },
                    { 2005, 231330, "Professor de língua estrangeira moderna do ensino fundamental" },
                    { 2006, 232150, "Professor de língua estrangeira moderna no ensino médio" },
                    { 2007, 234612, "Professor de língua francesa" },
                    { 2008, 234616, "Professor de língua inglesa" },
                    { 2009, 234608, "Professor de língua italiana" },
                    { 2010, 234624, "Professor de língua portuguesa" },
                    { 2011, 231335, "Professor de língua portuguesa do ensino fundamental" },
                    { 2012, 234668, "Professor de línguas estrangeiras modernas" },
                    { 2013, 234672, "Professor de lingüística e lingüística aplicada" },
                    { 2014, 234636, "Professor de literatura alemã" },
                    { 2015, 234628, "Professor de literatura brasileira" },
                    { 2016, 234640, "Professor de literatura comparada" },
                    { 2017, 234660, "Professor de literatura de línguas estrangeiras modernas" },
                    { 2018, 234644, "Professor de literatura espanhola" },
                    { 2019, 234648, "Professor de literatura francesa" },
                    { 2020, 234652, "Professor de literatura inglesa" },
                    { 2021, 234656, "Professor de literatura italiana" },
                    { 2022, 234632, "Professor de literatura portuguesa" },
                    { 2023, 234105, "Professor de matemática aplicada (no ensino superior)" },
                    { 2024, 231340, "Professor de matemática do ensino fundamental" },
                    { 2025, 232155, "Professor de matemática no ensino médio" },
                    { 2026, 234110, "Professor de matemática pura (no ensino superior)" },
                    { 2027, 234435, "Professor de medicina" },
                    { 2028, 234440, "Professor de medicina veterinária" },
                    { 2029, 234755, "Professor de museologia do ensino superior" },
                    { 2030, 234915, "Professor de música no ensino superior" },
                    { 2031, 331105, "Professor de nível médio na educação infantil" },
                    { 2032, 331205, "Professor de nível médio no ensino fundamental" },
                    { 2033, 331305, "Professor de nível médio no ensino profissionalizante" },
                    { 2034, 231210, "Professor de nível superior do ensino fundamental (primeira a quarta série)" },
                    { 2035, 231105, "Professor de nível superior na educação infantil (quatro a seis anos)" },
                    { 2036, 231110, "Professor de nível superior na educação infantil (zero a três anos)" },
                    { 2037, 234445, "Professor de nutrição" },
                    { 2038, 234450, "Professor de odontologia" },
                    { 2039, 234664, "Professor de outras línguas e literaturas" },
                    { 2040, 234125, "Professor de pesquisa operacional (no ensino superior)" },
                    { 2041, 234760, "Professor de psicologia do ensino superior" },
                    { 2042, 232160, "Professor de psicologia no ensino médio" },
                    { 2043, 234210, "Professor de química (ensino superior)" },
                    { 2044, 232165, "Professor de química no ensino médio" },
                    { 2045, 234680, "Professor de semiótica" },
                    { 2046, 234765, "Professor de serviço social do ensino superior" },
                    { 2047, 234770, "Professor de sociologia do ensino superior" },
                    { 2048, 232170, "Professor de sociologia no ensino médio" },
                    { 2049, 233115, "Professor de técnicas agrícolas" },
                    { 2050, 233120, "Professor de técnicas comerciais e secretariais" },
                    { 2051, 233125, "Professor de técnicas de enfermagem" },
                    { 2052, 239420, "Professor de técnicas e recursos audiovisuais" },
                    { 2053, 233130, "Professor de técnicas industriais" },
                    { 2054, 233135, "Professor de tecnologia e cálculo técnico" },
                    { 2055, 234684, "Professor de teoria da literatura" },
                    { 2056, 234455, "Professor de terapia ocupacional" },
                    { 2057, 234460, "Professor de zootecnia do ensino superior" },
                    { 2058, 233220, "Professor instrutor de ensino e aprendizagem agroflorestal" },
                    { 2059, 233225, "Professor instrutor de ensino e aprendizagem em serviços" },
                    { 2060, 332105, "Professor leigo no ensino fundamental" },
                    { 2061, 332205, "Professor prático no ensino profissionalizante" },
                    { 2062, 333115, "Professores de cursos livres" },
                    { 2063, 377140, "Profissional de atletismo" },
                    { 2064, 224140, "Profissional de educação física na saúde" },
                    { 2065, 252550, "Profissional de relações com investidores" },
                    { 2066, 142345, "Profissional de relações institucionais e governamentais" },
                    { 2067, 519805, "Profissional do sexo" },
                    { 2068, 142350, "Profissonal de relações internacionais" },
                    { 2069, 317115, "Programador de máquinas - ferramenta com comando numérico" },
                    { 2070, 766155, "Programador visual gráfico" },
                    { 2071, 318805, "Projetista de móveis" },
                    { 2072, 374135, "Projetista de sistemas de áudio" },
                    { 2073, 374120, "Projetista de som" },
                    { 2074, 242235, "Promotor de justiça" },
                    { 2075, 521115, "Promotor de vendas" },
                    { 2076, 354130, "Promotor de vendas especializado" },
                    { 2077, 354150, "Propagandista de produtos famacêuticos" },
                    { 2078, 322410, "Protético dentário" },
                    { 2079, 251550, "Psicanalista" },
                    { 2080, 251555, "Psicólogo acupunturista" },
                    { 2081, 251510, "Psicólogo clínico" },
                    { 2082, 251515, "Psicólogo do esporte" },
                    { 2083, 251540, "Psicólogo do trabalho" },
                    { 2084, 251535, "Psicólogo do trânsito" },
                    { 2085, 251505, "Psicólogo educacional" },
                    { 2086, 251520, "Psicólogo hospitalar" },
                    { 2087, 251525, "Psicólogo jurídico" },
                    { 2088, 251530, "Psicólogo social" },
                    { 2089, 223915, "Psicomotricista" },
                    { 2090, 239425, "Psicopedagogo" },
                    { 2091, 253115, "Publicitário" },
                    { 2092, 377145, "Pugilista" },
                    { 2093, 848210, "Queijeiro na fabricação de laticínio" },
                    { 2094, 213205, "Químico" },
                    { 2095, 213210, "Químico industrial" },
                    { 2096, 226105, "Quiropraxista" },
                    { 2097, 762125, "Rachador de couros e peles" },
                    { 2098, 372210, "Radiotelegrafista" },
                    { 2099, 632010, "Raizeiro" },
                    { 2100, 762220, "Rebaixador de couros" },
                    { 2101, 821450, "Rebarbador de metal" },
                    { 2102, 724215, "Rebitador a  martelo pneumático" },
                    { 2103, 724230, "Rebitador, a  mão" },
                    { 2104, 421205, "Recebedor de apostas (loteria)" },
                    { 2105, 421210, "Recebedor de apostas (turfe)" },
                    { 2106, 422125, "Recepcionista de banco" },
                    { 2107, 519945, "Recepcionista de casas de espetáculos" },
                    { 2108, 422110, "Recepcionista de consultório médico ou dentário" },
                    { 2109, 422120, "Recepcionista de hotel" },
                    { 2110, 422115, "Recepcionista de seguro saúde" },
                    { 2111, 422105, "Recepcionista, em geral" },
                    { 2112, 371410, "Recreador" },
                    { 2113, 371405, "Recreador de acantonamento" },
                    { 2114, 821335, "Recuperador de guias e cilindros" },
                    { 2115, 253110, "Redator de publicidade" },
                    { 2116, 261530, "Redator de textos técnicos" },
                    { 2117, 768120, "Redeiro" },
                    { 2118, 631420, "Redeiro (pesca)" },
                    { 2119, 841472, "Refinador de óleo e gordura" },
                    { 2120, 841210, "Refinador de sal" },
                    { 2121, 415305, "Registrador de câncer" },
                    { 2122, 716540, "Rejuntador de revestimentos" },
                    { 2123, 142325, "Relações públicas" },
                    { 2124, 741120, "Relojoeiro (fabricação)" },
                    { 2125, 741125, "Relojoeiro (reparação)" },
                    { 2126, 761363, "Remetedor de fios" },
                    { 2127, 731330, "Reparador de aparelhos de telecomunicações em laboratório" },
                    { 2128, 954205, "Reparador de aparelhos eletrodomésticos (exceto imagem e som)" },
                    { 2129, 954305, "Reparador de equipamentos de escritório" },
                    { 2130, 915405, "Reparador de equipamentos fotográficos" },
                    { 2131, 915210, "Reparador de instrumentos musicais" },
                    { 2132, 954210, "Reparador de rádio, tv e som" },
                    { 2133, 261135, "Repórter (exclusive rádio e televisão)" },
                    { 2134, 261730, "Repórter de mídias audiovisuais" },
                    { 2135, 261820, "Repórter fotográfico" },
                    { 2136, 521125, "Repositor de mercadorias" },
                    { 2137, 354705, "Representante comercial autônomo" },
                    { 2138, 915205, "Restaurador de instrumentos musicais (exceto cordas arcadas)" },
                    { 2139, 768710, "Restaurador de livros" },
                    { 2140, 848525, "Retalhador de carne" },
                    { 2141, 766415, "Revelador de filmes fotográficos, em cores" },
                    { 2142, 766410, "Revelador de filmes fotográficos, em preto e branco" },
                    { 2143, 716615, "Revestidor de interiores (papel, material plástico e emborrachados)" },
                    { 2144, 716110, "Revestidor de superfícies de concreto" },
                    { 2145, 761810, "Revisor de fios (produção têxtil)" },
                    { 2146, 761815, "Revisor de tecidos acabados" },
                    { 2147, 761820, "Revisor de tecidos crus" },
                    { 2148, 261140, "Revisor de texto" },
                    { 2149, 724225, "Riscador de estruturas metálicas" },
                    { 2150, 763120, "Riscador de roupas" },
                    { 2151, 514115, "Sacristão" },
                    { 2152, 848110, "Salgador de alimentos" },
                    { 2153, 848115, "Salsicheiro (fabricação de lingüiça, salsicha e produtos similares)" },
                    { 2154, 517115, "Salva-vidas" },
                    { 2155, 131225, "Sanitarista" },
                    { 2156, 768320, "Sapateiro (calçados sob medida)" },
                    { 2157, 31110, "Sargento bombeiro militar" },
                    { 2158, 21110, "Sargento da policia militar" },
                    { 2159, 772115, "Secador de madeira" },
                    { 2160, 252315, "Secretária trilíngüe" },
                    { 2161, 252305, "Secretária(o) executiva(o)" },
                    { 2162, 252310, "Secretário  bilíngüe" },
                    { 2163, 111220, "Secretário - executivo" },
                    { 2164, 215215, "Segundo oficial de máquinas da marinha mercante" },
                    { 2165, 20310, "Segundo tenente de polícia militar" },
                    { 2166, 519210, "Selecionador de material reciclável" },
                    { 2167, 768325, "Seleiro" },
                    { 2168, 111105, "Senador" },
                    { 2169, 516610, "Sepultador" },
                    { 2170, 613420, "Sericultor" },
                    { 2171, 632205, "Seringueiro" },
                    { 2172, 773115, "Serrador de bordas no desdobramento de madeira" },
                    { 2173, 773120, "Serrador de madeira" },
                    { 2174, 773125, "Serrador de madeira (serra circular múltipla)" },
                    { 2175, 773130, "Serrador de madeira (serra de fita múltipla)" },
                    { 2176, 724440, "Serralheiro" },
                    { 2177, 717020, "Servente de obras" },
                    { 2178, 623325, "Sexador" },
                    { 2179, 782145, "Sinaleiro (ponte-rolante)" },
                    { 2180, 515325, "Sócioeducador" },
                    { 2181, 251120, "Sociólogo" },
                    { 2182, 515135, "Socorrista (exceto médicos e enfermeiros)" },
                    { 2183, 31210, "Soldado bombeiro militar" },
                    { 2184, 21210, "Soldado da polícia militar" },
                    { 2185, 724315, "Soldador" },
                    { 2186, 724320, "Soldador a  oxigás" },
                    { 2187, 991120, "Soldador aluminotérmico em conservação de trilhos" },
                    { 2188, 724325, "Soldador elétrico" },
                    { 2189, 711315, "Sondador (poços de petróleo e gás)" },
                    { 2190, 711320, "Sondador de poços (exceto de petróleo e gás)" },
                    { 2191, 374150, "Sonoplasta" },
                    { 2192, 821255, "Soprador de convertedor" },
                    { 2193, 752115, "Soprador de vidro" },
                    { 2194, 242240, "Subprocurador de justiça militar" },
                    { 2195, 242245, "Subprocurador-geral da república" },
                    { 2196, 242250, "Subprocurador-geral do trabalho" },
                    { 2197, 31105, "Subtenente bombeiro militar" },
                    { 2198, 21105, "Subtenente da policia militar" },
                    { 2199, 215220, "Superintendente técnico no transporte aquaviário" },
                    { 2200, 760405, "Supervisor  (indústria de calçados e artefatos de couro)" },
                    { 2201, 410105, "Supervisor administrativo" },
                    { 2202, 342540, "Supervisor da administração de aeroportos" },
                    { 2203, 630105, "Supervisor da aqüicultura" },
                    { 2204, 630110, "Supervisor da área florestal" },
                    { 2205, 760505, "Supervisor da confecção de artefatos de tecidos, couros e afins" },
                    { 2206, 840110, "Supervisor da indústria de bebidas" },
                    { 2207, 840115, "Supervisor da indústria de fumo" },
                    { 2208, 750205, "Supervisor da indústria de minerais não metálicos (exceto os derivados de petróleo e carvão)" },
                    { 2209, 910205, "Supervisor da manutenção e reparação de veículos leves" },
                    { 2210, 910210, "Supervisor da manutenção e reparação de veículos pesados" },
                    { 2211, 740105, "Supervisor da mecânica de precisão" },
                    { 2212, 760605, "Supervisor das artes gráficas  (indústria editorial e gráfica)" },
                    { 2213, 410205, "Supervisor de almoxarifado" },
                    { 2214, 510115, "Supervisor de andar" },
                    { 2215, 710105, "Supervisor de apoio operacional na mineração" },
                    { 2216, 510305, "Supervisor de bombeiros" },
                    { 2217, 420105, "Supervisor de caixas e bilheteiros (exceto caixa de banco)" },
                    { 2218, 410210, "Supervisor de câmbio" },
                    { 2219, 342315, "Supervisor de carga e descarga" },
                    { 2220, 420110, "Supervisor de cobrança" },
                    { 2221, 420115, "Supervisor de coletadores de apostas e de jogos" },
                    { 2222, 354210, "Supervisor de compras" },
                    { 2223, 410215, "Supervisor de contas a pagar" },
                    { 2224, 720160, "Supervisor de controle de tratamento térmico" },
                    { 2225, 410220, "Supervisor de controle patrimonial" },
                    { 2226, 410225, "Supervisor de crédito e cobrança" },
                    { 2227, 760205, "Supervisor de curtimento" },
                    { 2228, 412120, "Supervisor de digitação e operação" },
                    { 2229, 780105, "Supervisor de embalagem e etiquetagem" },
                    { 2230, 342545, "Supervisor de empresa aérea em aeroportos" },
                    { 2231, 239430, "Supervisor de ensino" },
                    { 2232, 420120, "Supervisor de entrevistadores e recenseadores" },
                    { 2233, 620105, "Supervisor de exploração agrícola" },
                    { 2234, 620110, "Supervisor de exploração agropecuária" },
                    { 2235, 620115, "Supervisor de exploração pecuária" },
                    { 2236, 710110, "Supervisor de extração de sal" },
                    { 2237, 740110, "Supervisor de fabricação de instrumentos musicais" },
                    { 2238, 820205, "Supervisor de fabricação de produtos cerâmicos, porcelanatos e afins" },
                    { 2239, 820210, "Supervisor de fabricação de produtos de vidro" },
                    { 2240, 750105, "Supervisor de joalheria" },
                    { 2241, 510205, "Supervisor de lavanderia" },
                    { 2242, 410240, "Supervisor de logística" },
                    { 2243, 910110, "Supervisor de manutenção de aparelhos térmicos, de climatização e de refrigeração" },
                    { 2244, 910115, "Supervisor de manutenção de bombas, motores, compressores e equipamentos de transmissão" },
                    { 2245, 910120, "Supervisor de manutenção de máquinas gráficas" },
                    { 2246, 910125, "Supervisor de manutenção de máquinas industriais têxteis" },
                    { 2247, 910130, "Supervisor de manutenção de máquinas operatrizes e de usinagem" },
                    { 2248, 910910, "Supervisor de manutenção de vias férreas" },
                    { 2249, 950105, "Supervisor de manutenção elétrica de alta tensão industrial" },
                    { 2250, 950305, "Supervisor de manutenção eletromecânica" },
                    { 2251, 860105, "Supervisor de manutenção eletromecânica (utilidades)" },
                    { 2252, 950110, "Supervisor de manutenção eletromecânica industrial, comercial e predial" },
                    { 2253, 730105, "Supervisor de montagem e instalação eletroeletrônica" },
                    { 2254, 860110, "Supervisor de operação de fluidos (distribuição, captação, tratamento de água, gases, vapor)" },
                    { 2255, 860115, "Supervisor de operação elétrica (geração, transmissão e distribuição de energia elétrica)" },
                    { 2256, 373225, "Supervisor de operações (mídias audiovisuais)" },
                    { 2257, 342610, "Supervisor de operações portuárias" },
                    { 2258, 410230, "Supervisor de orçamento" },
                    { 2259, 710115, "Supervisor de perfuração e desmonte" },
                    { 2260, 840105, "Supervisor de produção da indústria alimentícia" },
                    { 2261, 710120, "Supervisor de produção na mineração" },
                    { 2262, 420125, "Supervisor de recepcionistas" },
                    { 2263, 910905, "Supervisor de reparos linhas férreas" },
                    { 2264, 420130, "Supervisor de telefonistas" },
                    { 2265, 420135, "Supervisor de telemarketing e atendimento" },
                    { 2266, 410235, "Supervisor de tesouraria" },
                    { 2267, 710125, "Supervisor de transporte na mineração" },
                    { 2268, 510105, "Supervisor de transportes" },
                    { 2269, 710220, "Supervisor de usina de concreto" },
                    { 2270, 520110, "Supervisor de vendas comercial" },
                    { 2271, 520105, "Supervisor de vendas de serviços" },
                    { 2272, 510310, "Supervisor de vigilantes" },
                    { 2273, 373230, "Supervisor técnico (mídias audiovisuais)" },
                    { 2274, 373220, "Supervisor técnico operacional de sistemas de televisão e produtoras de vídeo" },
                    { 2275, 752235, "Surfassagista" },
                    { 2276, 513615, "Sushiman" },
                    { 2277, 241335, "Tabelião de notas" },
                    { 2278, 241340, "Tabelião de protestos" },
                    { 2279, 511115, "Taifeiro (exceto militares)" },
                    { 2280, 771120, "Tanoeiro" },
                    { 2281, 765240, "Tapeceiro de autos" },
                    { 2282, 716535, "Taqueiro" },
                    { 2283, 351510, "Taquígrafo" },
                    { 2284, 328110, "Taxidermista" },
                    { 2285, 761303, "Tecelão (redes)" },
                    { 2286, 761306, "Tecelão (rendas e bordados)" },
                    { 2287, 761309, "Tecelão (tear automático)" },
                    { 2288, 761312, "Tecelão (tear jacquard)" },
                    { 2289, 768105, "Tecelão (tear manual)" },
                    { 2290, 761315, "Tecelão (tear mecânico de maquineta)" },
                    { 2291, 761318, "Tecelão (tear mecânico de xadrez)" },
                    { 2292, 761321, "Tecelão (tear mecânico liso)" },
                    { 2293, 761324, "Tecelão (tear mecânico, exceto jacquard)" },
                    { 2294, 761330, "Tecelão de malhas (máquina circular)" },
                    { 2295, 761333, "Tecelão de malhas (máquina retilínea)" },
                    { 2296, 761327, "Tecelão de malhas, a  máquina" },
                    { 2297, 761339, "Tecelão de meias (máquina circular)" },
                    { 2298, 761342, "Tecelão de meias (máquina retilínea)" },
                    { 2299, 761336, "Tecelão de meias, a  máquina" },
                    { 2300, 768110, "Tecelão de tapetes, a  mão" },
                    { 2301, 761345, "Tecelão de tapetes, a  máquina" },
                    { 2302, 321105, "Técnico agrícola" },
                    { 2303, 321110, "Técnico agropecuário" },
                    { 2304, 254110, "Técnico da receita federal" },
                    { 2305, 314705, "Técnico de acabamento em siderurgia" },
                    { 2306, 314710, "Técnico de aciaria em siderurgia" },
                    { 2307, 325205, "Técnico de alimentos" },
                    { 2308, 301205, "Técnico de apoio à bioengenharia" },
                    { 2309, 395105, "Técnico de apoio em pesquisa e desenvolvimento (exceto agropecuário e florestal)" },
                    { 2310, 395110, "Técnico de apoio em pesquisa e desenvolvimento agropecuário florestal" },
                    { 2311, 311110, "Técnico de celulose e papel" },
                    { 2312, 313305, "Técnico de comunicação de dados" },
                    { 2313, 351105, "Técnico de contabilidade" },
                    { 2314, 311505, "Técnico de controle de meio ambiente" },
                    { 2315, 224125, "Técnico de desporto individual e coletivo (exceto futebol)" },
                    { 2316, 322205, "Técnico de enfermagem" },
                    { 2317, 322245, "Técnico de enfermagem da estratégia de saúde da família" },
                    { 2318, 322210, "Técnico de enfermagem de terapia intensiva" },
                    { 2319, 322215, "Técnico de enfermagem do trabalho" },
                    { 2320, 322220, "Técnico de enfermagem psiquiátrica" },
                    { 2321, 312205, "Técnico de estradas" },
                    { 2322, 314715, "Técnico de fundição em siderurgia" },
                    { 2323, 391210, "Técnico de garantia da qualidade" },
                    { 2324, 322605, "Técnico de imobilização ortopédica" },
                    { 2325, 301110, "Técnico de laboratório de análises físico-químicas (materiais de construção)" },
                    { 2326, 224130, "Técnico de laboratório e fiscalização desportiva" },
                    { 2327, 301105, "Técnico de laboratório industrial" },
                    { 2328, 314720, "Técnico de laminação em siderurgia" },
                    { 2329, 314405, "Técnico de manutenção de sistemas e instrumentos" },
                    { 2330, 313120, "Técnico de manutenção elétrica" },
                    { 2331, 313125, "Técnico de manutenção elétrica de máquina" },
                    { 2332, 313205, "Técnico de manutenção eletrônica" },
                    { 2333, 313210, "Técnico de manutenção eletrônica (circuitos de máquinas com comando numérico)" },
                    { 2334, 391135, "Técnico de matéria-prima e material" },
                    { 2335, 311510, "Técnico de meteorologia" },
                    { 2336, 316305, "Técnico de mineração" },
                    { 2337, 316310, "Técnico de mineração (óleo e petróleo)" },
                    { 2338, 312105, "Técnico de obras civis" },
                    { 2339, 813130, "Técnico de operação (química, petroquímica e afins)" },
                    { 2340, 353205, "Técnico de operações e serviços bancários - câmbio" },
                    { 2341, 353210, "Técnico de operações e serviços bancários - crédito imobiliário" },
                    { 2342, 353215, "Técnico de operações e serviços bancários - crédito rural" },
                    { 2343, 353220, "Técnico de operações e serviços bancários - leasing" },
                    { 2344, 353225, "Técnico de operações e serviços bancários - renda fixa e variável" },
                    { 2345, 322505, "Técnico de ortopedia" },
                    { 2346, 391220, "Técnico de painel de controle" },
                    { 2347, 391125, "Técnico de planejamento de produção" },
                    { 2348, 391130, "Técnico de planejamento e programação da manutenção" },
                    { 2349, 316325, "Técnico de produção em refino de petróleo" },
                    { 2350, 313310, "Técnico de rede (telecomunicações)" },
                    { 2351, 314725, "Técnico de redução na siderurgia (primeira fusão)" },
                    { 2352, 314730, "Técnico de refratário em siderurgia" },
                    { 2353, 351735, "Técnico de resseguros" },
                    { 2354, 312210, "Técnico de saneamento" },
                    { 2355, 351740, "Técnico de seguros" },
                    { 2356, 373130, "Técnico de sistemas audiovisuais" },
                    { 2357, 317210, "Técnico de suporte ao usuário de tecnologia da informação" },
                    { 2358, 313315, "Técnico de telecomunicações (telefonia)" },
                    { 2359, 313320, "Técnico de transmissão (telecomunicações)" },
                    { 2360, 254415, "Técnico de tributos estadual" },
                    { 2361, 254420, "Técnico de tributos municipal" },
                    { 2362, 311515, "Técnico de utilidade (produção e distribuição de vapor, gases, óleos, combustíveis, energia)" },
                    { 2363, 354135, "Técnico de vendas" },
                    { 2364, 319205, "Técnico do mobiliário" },
                    { 2365, 313130, "Técnico eletricista" },
                    { 2366, 313215, "Técnico eletrônico" },
                    { 2367, 322105, "Técnico em acupuntura" },
                    { 2368, 351305, "Técnico em administração" },
                    { 2369, 351310, "Técnico em administração de comércio exterior" },
                    { 2370, 312305, "Técnico em agrimensura" },
                    { 2371, 354140, "Técnico em atendimento e vendas" },
                    { 2372, 314305, "Técnico em automobilística" },
                    { 2373, 371110, "Técnico em biblioteconomia" },
                    { 2374, 325305, "Técnico em biotecnologia" },
                    { 2375, 320105, "Técnico em bioterismo" },
                    { 2376, 311405, "Técnico em borracha" },
                    { 2377, 319105, "Técnico em calçados e artefatos de couro" },
                    { 2378, 314610, "Técnico em caldeiraria" },
                    { 2379, 313405, "Técnico em calibração" },
                    { 2380, 321310, "Técnico em carcinicultura" },
                    { 2381, 319110, "Técnico em confecções do vestuário" },
                    { 2382, 311115, "Técnico em curtimento" },
                    { 2383, 352420, "Técnico em direitos autorais" },
                    { 2384, 300305, "Técnico em eletromecânica" },
                    { 2385, 324130, "Técnico em espirometria" },
                    { 2386, 314615, "Técnico em estruturas metálicas" },
                    { 2387, 325115, "Técnico em farmácia" },
                    { 2388, 313505, "Técnico em fotônica" },
                    { 2389, 312310, "Técnico em geodésia e cartografia" },
                    { 2390, 316105, "Técnico em geofísica" },
                    { 2391, 316110, "Técnico em geologia" },
                    { 2392, 316115, "Técnico em geoquímica" },
                    { 2393, 316120, "Técnico em geotecnia" },
                    { 2394, 374105, "Técnico em gravação de áudio" },
                    { 2395, 324220, "Técnico em hemoterapia" },
                    { 2396, 312315, "Técnico em hidrografia" },
                    { 2397, 351610, "Técnico em higiene ocupacional" },
                    { 2398, 320110, "Técnico em histologia" },
                    { 2399, 325310, "Técnico em imunobiológicos" },
                    { 2400, 374110, "Técnico em instalação de equipamentos de áudio" },
                    { 2401, 313410, "Técnico em instrumentação" },
                    { 2402, 325110, "Técnico em laboratório de farmácia" },
                    { 2403, 321205, "Técnico em madeira" },
                    { 2404, 915115, "Técnico em manutenção de balanças" },
                    { 2405, 313220, "Técnico em manutenção de equipamentos de informática" },
                    { 2406, 915305, "Técnico em manutenção de equipamentos e instrumentos médico-hospitalares" },
                    { 2407, 915110, "Técnico em manutenção de hidrômetros" },
                    { 2408, 915105, "Técnico em manutenção de instrumentos de medição e precisão" },
                    { 2409, 314410, "Técnico em manutenção de máquinas" },
                    { 2410, 374115, "Técnico em masterização de áudio" },
                    { 2411, 311305, "Técnico em materiais, produtos cerâmicos e vidros" },
                    { 2412, 314105, "Técnico em mecânica de precisão" },
                    { 2413, 300105, "Técnico em mecatrônica - automação da manufatura" },
                    { 2414, 300110, "Técnico em mecatrônica - robótica" },
                    { 2415, 324105, "Técnico em métodos eletrográficos em encefalografia" },
                    { 2416, 324110, "Técnico em métodos gráficos em cardiologia" },
                    { 2417, 321315, "Técnico em mitilicultura" },
                    { 2418, 374130, "Técnico em mixagem de áudio" },
                    { 2419, 371210, "Técnico em museologia" },
                    { 2420, 325210, "Técnico em nutrição e dietética" },
                    { 2421, 322305, "Técnico em óptica e optometria" },
                    { 2422, 324205, "Técnico em patologia clínica" },
                    { 2423, 323105, "Técnico em pecuária" },
                    { 2424, 316320, "Técnico em pesquisa mineral" },
                    { 2425, 311205, "Técnico em petroquímica" },
                    { 2426, 321305, "Técnico em piscicultura" },
                    { 2427, 316330, "Técnico em planejamento de lavra de minas" },
                    { 2428, 311410, "Técnico em plástico" },
                    { 2429, 324135, "Técnico em polissonografia" },
                    { 2430, 316315, "Técnico em processamento mineral (exceto petróleo)" },
                    { 2431, 371305, "Técnico em programação visual" },
                    { 2432, 322115, "Técnico em quiropraxia" },
                    { 2433, 324115, "Técnico em radiologia e imagenologia" },
                    { 2434, 321320, "Técnico em ranicultura" },
                    { 2435, 322405, "Técnico em saúde bucal" },
                    { 2436, 322425, "Técnico em saúde bucal da estratégia de saúde da família" },
                    { 2437, 351505, "Técnico em secretariado" },
                    { 2438, 351605, "Técnico em segurança do trabalho" },
                    { 2439, 341245, "Técnico em sinais navais" },
                    { 2440, 341235, "Técnico em sinalização náutica" },
                    { 2441, 314620, "Técnico em soldagem" },
                    { 2442, 374125, "Técnico em sonorização" },
                    { 2443, 311520, "Técnico em tratamento de efluentes" },
                    { 2444, 354805, "Técnico em turismo" },
                    { 2445, 321210, "Técnico florestal" },
                    { 2446, 371310, "Técnico gráfico" },
                    { 2447, 314110, "Técnico mecânico" },
                    { 2448, 314310, "Técnico mecânico (aeronaves)" },
                    { 2449, 314115, "Técnico mecânico (calefação, ventilação e refrigeração)" },
                    { 2450, 314315, "Técnico mecânico (embarcações)" },
                    { 2451, 314120, "Técnico mecânico (máquinas)" },
                    { 2452, 314125, "Técnico mecânico (motores)" },
                    { 2453, 314205, "Técnico mecânico na fabricação de ferramentas" },
                    { 2454, 314210, "Técnico mecânico na manutenção de ferramentas" },
                    { 2455, 391230, "Técnico operacional de serviços de correios" },
                    { 2456, 311105, "Técnico químico" },
                    { 2457, 301115, "Técnico químico de petróleo" },
                    { 2458, 311605, "Técnico têxtil" },
                    { 2459, 311610, "Técnico têxtil (tratamentos químicos)" },
                    { 2460, 311615, "Técnico têxtil de fiação" },
                    { 2461, 311620, "Técnico têxtil de malharia" },
                    { 2462, 311625, "Técnico têxtil de tecelagem" },
                    { 2463, 341240, "Técnicos em manobras em equipamentos de convés" },
                    { 2464, 222215, "Tecnólogo em alimentos" },
                    { 2465, 202120, "Tecnólogo em automação industrial" },
                    { 2466, 214280, "Tecnólogo em construção civil" },
                    { 2467, 214360, "Tecnólogo em eletricidade" },
                    { 2468, 214365, "Tecnólogo em eletrônica" },
                    { 2469, 214435, "Tecnólogo em fabricação mecânica" },
                    { 2470, 271110, "Tecnólogo em gastronomia" },
                    { 2471, 142120, "Tecnólogo em gestão administrativo- financeira" },
                    { 2472, 142535, "Tecnólogo em gestão da tecnologia da informação" },
                    { 2473, 131215, "Tecnólogo em gestão hospitalar" },
                    { 2474, 342125, "Tecnólogo em logística de transporte" },
                    { 2475, 202115, "Tecnólogo em mecatrônica" },
                    { 2476, 214010, "Tecnólogo em meio ambiente" },
                    { 2477, 214615, "Tecnólogo em metalurgia" },
                    { 2478, 214745, "Tecnólogo em petróleo e gás" },
                    { 2479, 213215, "Tecnólogo em processos químicos" },
                    { 2480, 262135, "Tecnólogo em produção audiovisual" },
                    { 2481, 262130, "Tecnólogo em produção fonográfica" },
                    { 2482, 214930, "Tecnólogo em produção industrial" },
                    { 2483, 214535, "Tecnólogo em produção sulcroalcooleira" },
                    { 2484, 324120, "Tecnólogo em radiologia" },
                    { 2485, 214750, "Tecnólogo em rochas ornamentais" },
                    { 2486, 252320, "Tecnólogo em secretariado escolar" },
                    { 2487, 214935, "Tecnólogo em segurança do trabalho" },
                    { 2488, 142710, "Tecnólogo em sistemas biomédicos" },
                    { 2489, 314625, "Tecnólogo em soldagem" },
                    { 2490, 214370, "Tecnólogo em telecomunicações" },
                    { 2491, 324125, "Tecnólogo oftálmico" },
                    { 2492, 422330, "Teleatendente de emergência" },
                    { 2493, 422205, "Telefonista" },
                    { 2494, 422210, "Teleoperador" },
                    { 2495, 716205, "Telhador (telhas de argila e materiais similares)" },
                    { 2496, 716210, "Telhador (telhas de cimento-amianto)" },
                    { 2497, 716215, "Telhador (telhas metálicas)" },
                    { 2498, 716220, "Telhador (telhas plásticas)" },
                    { 2499, 723125, "Temperador de metais e de compósitos" },
                    { 2500, 823255, "Temperador de vidro" },
                    { 2501, 30305, "Tenente do corpo de bombeiros militar" },
                    { 2502, 30115, "Tenente-coronel bombeiro militar" },
                    { 2503, 20110, "Tenente-coronel da polícia militar" },
                    { 2504, 263115, "Teólogo" },
                    { 2505, 322125, "Terapeuta holístico" },
                    { 2506, 223905, "Terapeuta ocupacional" },
                    { 2507, 353230, "Tesoureiro de banco" },
                    { 2508, 311725, "Tingidor de couros e peles" },
                    { 2509, 516330, "Tingidor de roupas" },
                    { 2510, 768605, "Tipógrafo" },
                    { 2511, 376250, "Titeriteiro" },
                    { 2512, 312320, "Topógrafo" },
                    { 2513, 712225, "Torneiro (lavra de pedra)" },
                    { 2514, 773355, "Torneiro na usinagem convencional de madeira" },
                    { 2515, 841625, "Torrador de cacau" },
                    { 2516, 841610, "Torrador de café" },
                    { 2517, 711330, "Torrista (petróleo)" },
                    { 2518, 519320, "Tosador de animais domésticos" },
                    { 2519, 621005, "Trabalhador agropecuário em geral" },
                    { 2520, 623305, "Trabalhador da avicultura de corte" },
                    { 2521, 623310, "Trabalhador da avicultura de postura" },
                    { 2522, 623205, "Trabalhador da caprinocultura" },
                    { 2523, 622205, "Trabalhador da cultura de algodão" },
                    { 2524, 622105, "Trabalhador da cultura de arroz" },
                    { 2525, 622605, "Trabalhador da cultura de cacau" },
                    { 2526, 622610, "Trabalhador da cultura de café" },
                    { 2527, 622110, "Trabalhador da cultura de cana-de-açúcar" },
                    { 2528, 622615, "Trabalhador da cultura de erva-mate" },
                    { 2529, 622805, "Trabalhador da cultura de especiarias" },
                    { 2530, 622620, "Trabalhador da cultura de fumo" },
                    { 2531, 622625, "Trabalhador da cultura de guaraná" },
                    { 2532, 622115, "Trabalhador da cultura de milho e sorgo" },
                    { 2533, 622810, "Trabalhador da cultura de plantas aromáticas e medicinais" },
                    { 2534, 622210, "Trabalhador da cultura de sisal" },
                    { 2535, 622120, "Trabalhador da cultura de trigo, aveia, cevada e triticale" },
                    { 2536, 622215, "Trabalhador da cultura do rami" },
                    { 2537, 623320, "Trabalhador da cunicultura" },
                    { 2538, 823320, "Trabalhador da elaboração de pré-fabricados (cimento amianto)" },
                    { 2539, 823325, "Trabalhador da elaboração de pré-fabricados (concreto armado)" },
                    { 2540, 632405, "Trabalhador da exploração de açaí" },
                    { 2541, 632305, "Trabalhador da exploração de andiroba" },
                    { 2542, 632505, "Trabalhador da exploração de árvores e arbustos produtores de substâncias aromát., Medic. E tóxicas" },
                    { 2543, 632310, "Trabalhador da exploração de babaçu" },
                    { 2544, 632315, "Trabalhador da exploração de bacaba" },
                    { 2545, 632320, "Trabalhador da exploração de buriti" },
                    { 2546, 632325, "Trabalhador da exploração de carnaúba" },
                    { 2547, 632410, "Trabalhador da exploração de castanha" },
                    { 2548, 632510, "Trabalhador da exploração de cipós produtores de substâncias aromáticas, medicinais e tóxicas" },
                    { 2549, 632330, "Trabalhador da exploração de coco-da-praia" },
                    { 2550, 632335, "Trabalhador da exploração de copaíba" },
                    { 2551, 632210, "Trabalhador da exploração de espécies produtoras de gomas não elásticas" },
                    { 2552, 632515, "Trabalhador da exploração de madeiras tanantes" },
                    { 2553, 632340, "Trabalhador da exploração de malva (pãina)" },
                    { 2554, 632345, "Trabalhador da exploração de murumuru" },
                    { 2555, 632350, "Trabalhador da exploração de oiticica" },
                    { 2556, 632355, "Trabalhador da exploração de ouricuri" },
                    { 2557, 632360, "Trabalhador da exploração de pequi" },
                    { 2558, 632365, "Trabalhador da exploração de piaçava" },
                    { 2559, 632415, "Trabalhador da exploração de pinhão" },
                    { 2560, 632420, "Trabalhador da exploração de pupunha" },
                    { 2561, 632520, "Trabalhador da exploração de raízes produtoras de substâncias aromáticas, medicinais e tóxicas" },
                    { 2562, 632215, "Trabalhador da exploração de resinas" },
                    { 2563, 632370, "Trabalhador da exploração de tucum" },
                    { 2564, 632525, "Trabalhador da extração de substâncias aromáticas, medicinais e tóxicas, em geral" },
                    { 2565, 812110, "Trabalhador da fabricação de munição e explosivos" },
                    { 2566, 823330, "Trabalhador da fabricação de pedras artificiais" },
                    { 2567, 811125, "Trabalhador da fabricação de resinas e vernizes" },
                    { 2568, 514325, "Trabalhador da manutenção de edificações" },
                    { 2569, 623210, "Trabalhador da ovinocultura" },
                    { 2570, 623105, "Trabalhador da pecuária (asininos e muares)" },
                    { 2571, 623110, "Trabalhador da pecuária (bovinos corte)" },
                    { 2572, 623115, "Trabalhador da pecuária (bovinos leite)" },
                    { 2573, 623120, "Trabalhador da pecuária (bubalinos)" },
                    { 2574, 623125, "Trabalhador da pecuária (eqüinos)" },
                    { 2575, 623215, "Trabalhador da suinocultura" },
                    { 2576, 632125, "Trabalhador de extração florestal, em geral" },
                    { 2577, 841476, "Trabalhador de fabricação de margarina" },
                    { 2578, 848325, "Trabalhador de fabricação de sorvete" },
                    { 2579, 811130, "Trabalhador de fabricação de tintas" },
                    { 2580, 841720, "Trabalhador de fabricação de vinhos" },
                    { 2581, 623015, "Trabalhador de pecuária polivalente" },
                    { 2582, 841484, "Trabalhador de preparação de pescados (limpeza)" },
                    { 2583, 514225, "Trabalhador de serviços de limpeza e conservação de áreas públicas" },
                    { 2584, 841505, "Trabalhador de tratamento do leite e fabricação de laticínios e afins" },
                    { 2585, 765405, "Trabalhador do acabamento de artefatos de tecidos e couros" },
                    { 2586, 848605, "Trabalhador do beneficiamento de fumo" },
                    { 2587, 623405, "Trabalhador em criatórios de animais produtores de veneno" },
                    { 2588, 623410, "Trabalhador na apicultura" },
                    { 2589, 622705, "Trabalhador na cultura de amendoim" },
                    { 2590, 622710, "Trabalhador na cultura de canola" },
                    { 2591, 622715, "Trabalhador na cultura de coco-da-baía" },
                    { 2592, 622720, "Trabalhador na cultura de dendê" },
                    { 2593, 622725, "Trabalhador na cultura de mamona" },
                    { 2594, 622730, "Trabalhador na cultura de soja" },
                    { 2595, 622735, "Trabalhador na cultura do girassol" },
                    { 2596, 622740, "Trabalhador na cultura do linho" },
                    { 2597, 823265, "Trabalhador na fabricação de produtos abrasivos" },
                    { 2598, 623415, "Trabalhador na minhocultura" },
                    { 2599, 622305, "Trabalhador na olericultura (frutos e sementes)" },
                    { 2600, 622310, "Trabalhador na olericultura (legumes)" },
                    { 2601, 622315, "Trabalhador na olericultura (raízes, bulbos e tubérculos)" },
                    { 2602, 622320, "Trabalhador na olericultura (talos, folhas e flores)" },
                    { 2603, 643005, "Trabalhador na operação de sistema de irrigação localizada (microaspersão e gotejamento)" },
                    { 2604, 643010, "Trabalhador na operação de sistema de irrigação por aspersão (pivô central)" },
                    { 2605, 643015, "Trabalhador na operação de sistemas convencionais de irrigação por aspersão" },
                    { 2606, 643020, "Trabalhador na operação de sistemas de irrigação e aspersão (alto propelido)" },
                    { 2607, 643025, "Trabalhador na operação de sistemas de irrigação por superfície e drenagem" },
                    { 2608, 622015, "Trabalhador na produção de mudas e sementes" },
                    { 2609, 623420, "Trabalhador na sericicultura" },
                    { 2610, 622505, "Trabalhador no cultivo de árvores frutíferas" },
                    { 2611, 622510, "Trabalhador no cultivo de espécies frutíferas rasteiras" },
                    { 2612, 622405, "Trabalhador no cultivo de flores e folhagens de corte" },
                    { 2613, 622410, "Trabalhador no cultivo de flores em vaso" },
                    { 2614, 622415, "Trabalhador no cultivo de forrações" },
                    { 2615, 622420, "Trabalhador no cultivo de mudas" },
                    { 2616, 622425, "Trabalhador no cultivo de plantas ornamentais" },
                    { 2617, 622515, "Trabalhador no cultivo de trepadeiras frutíferas" },
                    { 2618, 764005, "Trabalhador polivalente da confecção de calçados" },
                    { 2619, 762005, "Trabalhador polivalente do curtimento de couros e peles" },
                    { 2620, 783235, "Trabalhador portuário de capatazia" },
                    { 2621, 622020, "Trabalhador volante da agricultura" },
                    { 2622, 712230, "Traçador de pedras" },
                    { 2623, 261420, "Tradutor" },
                    { 2624, 724610, "Trançador de cabos de aço" },
                    { 2625, 752120, "Transformador de tubos de vidro" },
                    { 2626, 376255, "Trapezista" },
                    { 2627, 623020, "Tratador de animais" },
                    { 2628, 641015, "Tratorista agrícola" },
                    { 2629, 751130, "Trefilador (joalheria e ourivesaria)" },
                    { 2630, 811775, "Trefilador de borracha" },
                    { 2631, 722415, "Trefilador de metais, à máquina" },
                    { 2632, 224135, "Treinador profissional de futebol" },
                    { 2633, 768115, "Tricoteiro, à mão" },
                    { 2634, 782810, "Tropeiro" },
                    { 2635, 122520, "Turismólogo" },
                    { 2636, 214130, "Urbanista" },
                    { 2637, 762345, "Vaqueador de couros e peles" },
                    { 2638, 514215, "Varredor de rua" },
                    { 2639, 776430, "Vassoureiro" },
                    { 2640, 524215, "Vendedor  permissionário" },
                    { 2641, 524305, "Vendedor ambulante" },
                    { 2642, 521110, "Vendedor de comércio varejista" },
                    { 2643, 521105, "Vendedor em comércio atacadista" },
                    { 2644, 524105, "Vendedor em domicílio" },
                    { 2645, 354145, "Vendedor pracista" },
                    { 2646, 111120, "Vereador" },
                    { 2647, 717025, "Vibradorista" },
                    { 2648, 111240, "Vice-governador de estado" },
                    { 2649, 111245, "Vice-governador do distrito federal" },
                    { 2650, 111255, "Vice-prefeito" },
                    { 2651, 111210, "Vice-presidente da república" },
                    { 2652, 716305, "Vidraceiro" },
                    { 2653, 716310, "Vidraceiro (edificações)" },
                    { 2654, 716315, "Vidraceiro (vitrais)" },
                    { 2655, 517420, "Vigia" },
                    { 2656, 517320, "Vigia florestal" },
                    { 2657, 517325, "Vigia portuário" },
                    { 2658, 517330, "Vigilante" },
                    { 2659, 841740, "Vinagreiro" },
                    { 2660, 515120, "Visitador sanitário" },
                    { 2661, 215150, "Vistoriador naval" },
                    { 2662, 375115, "Visual merchandiser" },
                    { 2663, 632015, "Viveirista florestal" },
                    { 2664, 841745, "Xaropeiro" },
                    { 2665, 514120, "Zelador de edifício" },
                    { 2666, 223310, "Zootecnista" },
                    { 2667, 999999, "Balconista" },
                    { 2668, 999998, "Aposentado" },
                    { 2669, 999997, "Pensionista" },
                    { 2670, 999996, "Autônomo" },
                    { 2671, 999995, "Do Lar" },
                    { 2672, 999994, "Auxiliar de serviços gerais" },
                    { 2673, 999993, "Servidor Público" },
                    { 2674, 999992, "Estagiário" },
                    { 2675, 999991, "Militar" },
                    { 2676, 999990, "Empresário" },
                    { 2677, 999989, "Professor" },
                    { 2678, 999988, "Comerciante" },
                    { 2679, 999987, "Outros" },
                    { 2680, 999986, "Pecuarista" },
                    { 2681, 999985, "Gerente de custo" },
                    { 2682, 999984, "AuxiliarDeProdução" },
                    { 2683, 999983, "Mecânico de Diesel" },
                    { 2684, 999982, "Preparador de coquetel" },
                    { 2685, 999981, "Bancário" },
                    { 2686, 999980, "Devops" },
                    { 2687, 999979, "Programador" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "sexo",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Masculino" },
                    { 2, "Feminino" }
                });

            migrationBuilder.InsertData(
                schema: "clientes",
                table: "situacaocontrato",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Em andamento" },
                    { 2, "Cobrança" },
                    { 3, "Jurídico" },
                    { 4, "Prejuízo" },
                    { 5, "Cancelado" },
                    { 6, "Quitado" },
                    { 7, "Aditado" },
                    { 8, "Com processo" },
                    { 9, "Pendente de aprovação" },
                    { 10, "Proposta devolvida" }
                });

            migrationBuilder.InsertData(
                schema: "clientes",
                table: "situacaocontratodigital",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Envio pendente" },
                    { 2, "Aguardando signatários" },
                    { 3, "Aguardando assinaturas" },
                    { 4, "Finalizado" },
                    { 5, "Arquivado" },
                    { 6, "Cancelado" },
                    { 7, "Editando" },
                    { 8, "Processando" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "situacaodespesaparcela",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Aberto" },
                    { 2, "Cancelado" },
                    { 3, "Pago" },
                    { 4, "Pago Parcialmente" }
                });

            migrationBuilder.InsertData(
                schema: "clientes",
                table: "situacaoemailsignatario",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Assinado" },
                    { 2, "Pendente" },
                    { 3, "Não enviado" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "situacaofrete",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Incluso" },
                    { 2, "Separado" },
                    { 3, "Sem Frete" }
                });

            migrationBuilder.InsertData(
                schema: "compras",
                table: "situacaoorcamento",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Em Análise" },
                    { 2, "Orçamento" },
                    { 3, "Pedido" },
                    { 4, "Concluída" },
                    { 5, "Cancelada" }
                });

            migrationBuilder.InsertData(
                schema: "compras",
                table: "situacaopedido",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Em Análise" },
                    { 2, "Orçamento" },
                    { 3, "Pedido" },
                    { 4, "Concluída" },
                    { 5, "Cancelada" }
                });

            migrationBuilder.InsertData(
                schema: "compras",
                table: "situacaopedidoitem",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Pendente" },
                    { 2, "Recebido Parcial" },
                    { 3, "Recebido Integral" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "situacaoreceitaparcela",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Aberto" },
                    { 2, "Cancelado" },
                    { 3, "Pago" },
                    { 4, "Pago Parcialmente" },
                    { 5, "Aditado" },
                    { 6, "Amortizado" },
                    { 7, "Amortizado Pendente" },
                    { 8, "Pendente de aprovação" }
                });

            migrationBuilder.InsertData(
                schema: "empreendimento",
                table: "situacaoreserva",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Em andamento" },
                    { 2, "Aguardando aprovação da venda" },
                    { 3, "Vendido" },
                    { 4, "Cancelado" },
                    { 5, "Proposta devolvida" }
                });

            migrationBuilder.InsertData(
                schema: "empreendimento",
                table: "situacaounidade",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Disponível" },
                    { 2, "Indisponível" },
                    { 3, "Vendido" },
                    { 4, "Reservado" },
                    { 5, "Invadido" },
                    { 6, "Penhorado" },
                    { 7, "Caucionado" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "tipoAmortizacao",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Padrão" },
                    { 2, "PRICE" },
                    { 3, "SAC" }
                });

            migrationBuilder.InsertData(
                schema: "clientes",
                table: "tipoOperacaocontrato",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Venda" },
                    { 2, "Locação" },
                    { 3, "Aditamento" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "tipoOperacaofinanceira",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Fintech" },
                    { 2, "Banco Arquivo" },
                    { 3, "Banco Integrado" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "tipoabastecimentoagua",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Carro Pipa" },
                    { 2, "Cisterna" },
                    { 3, "Não Possui" },
                    { 4, "Poço/Nascente" },
                    { 5, "Rede Pública" },
                    { 6, "Outra" }
                });

            migrationBuilder.InsertData(
                schema: "clientes",
                table: "tipoaditamento",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Acordo com possuidor" },
                    { 2, "Acordo com transferência" },
                    { 3, "Acordo judicial" },
                    { 4, "Acordo mediação" },
                    { 5, "Acordo simples" },
                    { 6, "Mediação com transferência" },
                    { 7, "Transferência" },
                    { 8, "Ajuste" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "tipoanoinicioreajuste",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Ano do contrato" },
                    { 2, "1 ano após o contrato" },
                    { 3, "2 anos após o contrato" },
                    { 4, "3 anos após o contrato" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "tipoantecipacao",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Reduzir valor das parcelas" },
                    { 2, "Reduzir prazo do contrato" }
                });

            migrationBuilder.InsertData(
                schema: "clientes",
                table: "tipoassinatura",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Assinar como parte" },
                    { 2, "Assinar como testemunha" },
                    { 3, "Assinar como avalista" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "tipoatendimento",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Email" },
                    { 2, "Ligação" },
                    { 3, "Observação" },
                    { 4, "Visita" },
                    { 5, "Whatsapp" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "tipocoletalixo",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Céu Aberto" },
                    { 2, "Coletado" },
                    { 3, "Enterrado" },
                    { 4, "Queimado" },
                    { 5, "Não Possui" },
                    { 9, "Outro" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "tipocondicaomoradia",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Área de risco" },
                    { 2, "Boa (estruturalmente estável)" },
                    { 3, "Precária" },
                    { 4, "Regular (necessita de pequenas melhorias)" },
                    { 5, "Outro" }
                });

            migrationBuilder.InsertData(
                schema: "clientes",
                table: "tipocontratodigital",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Contratos de Compra e Venda" },
                    { 2, "Aditivos" },
                    { 3, "Documentos Complementares" }
                });

            migrationBuilder.InsertData(
                schema: "clientes",
                table: "tipocontratoproduto",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Imóvel" },
                    { 2, "Lote" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "tipodespesa",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Título" },
                    { 2, "Título de Crédito" },
                    { 3, "Título Recorrente" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "tipoedificacaomoradia",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Apartamento" },
                    { 2, "Barraco" },
                    { 3, "Casa térreo" },
                    { 4, "Construção em área de risco" },
                    { 5, "Construção em terreno irregular" },
                    { 6, "Construção mista" },
                    { 7, "Habitação coletiva" },
                    { 8, "Palafita" },
                    { 9, "Sobrado" },
                    { 10, "Outros" }
                });

            migrationBuilder.InsertData(
                schema: "empreendimento",
                table: "tipoempreendimento",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Loteamento" },
                    { 2, "Prédio/Torre" },
                    { 3, "Condomínio/Conjunto" },
                    { 4, "Cemitério" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "tipoempresa",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Incorporadora" },
                    { 2, "SPE" },
                    { 3, "SCP" },
                    { 4, "Construtora" },
                    { 5, "Incorporadora e Construtora" },
                    { 6, "Outros" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "tipoenergiamoradia",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Relógio Comunitário" },
                    { 2, "Relógio Próprio" },
                    { 3, "Sem Energia Elétrica" },
                    { 4, "Sem Relógio" },
                    { 5, "Gerador movido a combustível" },
                    { 6, "Geração própria (energia solar, eólica)" },
                    { 7, "Rede Pública" },
                    { 8, "Outro" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "tipoescolaridade",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Fundamental - Incompleto" },
                    { 2, "Fundamental - Completo" },
                    { 3, "Médio - Incompleto" },
                    { 4, "Médio - Completo" },
                    { 5, "Superior - Incompleto" },
                    { 6, "Superior - Completo" },
                    { 7, "Mestrado" },
                    { 8, "Doutorado" },
                    { 9, "Pós-graduação - Incompleto" },
                    { 10, "Pós-graduação - Completo" },
                    { 11, "Sem Escolaridade" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "tipoesgotamentosanitario",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Fossa rudimentar (sumidouro)" },
                    { 2, "Fossa séptica" },
                    { 3, "Lançamento direto em rio ou curso d’água" },
                    { 4, "Não possui sistema de esgoto" },
                    { 5, "Rede pública de esgoto" },
                    { 6, "Outros" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "tipogateway",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Zoop" },
                    { 2, "GalaxPay" },
                    { 3, "Safra" },
                    { 4, "Asaas" }
                });

            migrationBuilder.InsertData(
                schema: "empreendimento",
                table: "tipogrupo",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Quadra" },
                    { 2, "Andar" }
                });

            migrationBuilder.InsertData(
                schema: "empreendimento",
                table: "tipoimovel",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Casa" },
                    { 2, "Apartamento" },
                    { 3, "Quitinete" },
                    { 4, "Flat" },
                    { 5, "Loft" },
                    { 6, "Galpão" },
                    { 8, "Outro" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "tipoindice",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "IGP-M (FGV)" },
                    { 2, "Selic" },
                    { 3, "INCC (FGV)" },
                    { 4, "INPC (IBGE)" },
                    { 5, "PARCELAS FIXAS" },
                    { 6, "SALÁRIO MÍNIMO" },
                    { 7, "UFIR" },
                    { 8, "IPCA" },
                    { 9, "Outro" }
                });

            migrationBuilder.InsertData(
                schema: "orcamentoobras",
                table: "tipoinsumo",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Administração" },
                    { 2, "Aluguel" },
                    { 3, "Equipamento" },
                    { 4, "Equipamento para Aquisição Permanente" },
                    { 5, "Mão de Obra" },
                    { 6, "Material" },
                    { 7, "Outros" },
                    { 8, "Serviços" },
                    { 9, "Taxas" },
                    { 10, "Verba" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "tipointervaloparcelas",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Mensal" },
                    { 2, "Quinzenal" },
                    { 3, "Bimestral" },
                    { 4, "Trimestral" },
                    { 5, "Quadrimestral" },
                    { 6, "Semestral" },
                    { 7, "Anual" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "tipomesreajuste",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Mês do Contrato" },
                    { 2, "1ª Parcela de Entrada" },
                    { 3, "1ª Parcela do Financiamento" },
                    { 4, "1 Mês Antes do Contrato" },
                    { 5, "2 Meses Antes do Contrato" },
                    { 6, "3 Meses Antes do Contrato" },
                    { 7, "1 Mês Depois do Contrato" },
                    { 8, "2 Meses Depois do Contrato" },
                    { 9, "3 Meses Depois do Contrato" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "tipomoradia",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Aluguel" },
                    { 2, "Cedida" },
                    { 3, "Emprestada" },
                    { 4, "Invadida" },
                    { 5, "Mora com Amigos" },
                    { 6, "Mora com Parentes" },
                    { 7, "Mora em Instituições Beneficientes" },
                    { 8, "Ocupação irregular" },
                    { 9, "Própria" },
                    { 10, "Própria financiada" },
                    { 11, "Própria quitada" },
                    { 12, "Em processo de regularização fundiária (Reurb)" },
                    { 13, "Herança" },
                    { 14, "Sem Moradia Fixa" },
                    { 15, "Outra" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "tipomoradianova",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Lote Urbanizado" },
                    { 2, "Casa construída" },
                    { 3, "Apartamento Novo" },
                    { 4, "Outra" }
                });

            migrationBuilder.InsertData(
                schema: "almoxarifado",
                table: "tipomovimentacao",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Entrada" },
                    { 2, "Saída" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "tipoorigem",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Manual" },
                    { 2, "Requisição" },
                    { 3, "Pedido" },
                    { 4, "Inventário" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "tipopessoa",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Física" },
                    { 2, "Jurídica" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "tipoplanopagamento",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "M²" },
                    { 2, "Valor Fixo" },
                    { 3, "% Valor Total" }
                });

            migrationBuilder.InsertData(
                schema: "almoxarifado",
                table: "tipoproduto",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Produto" },
                    { 2, "Serviço" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "tiporeceita",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Financiamento" },
                    { 2, "Crédito" },
                    { 3, "Entrada" },
                    { 4, "Honorários" },
                    { 5, "Intermediária" },
                    { 9, "Serviço" }
                });

            migrationBuilder.InsertData(
                schema: "financeiro",
                table: "tiporemessa",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Registrar" },
                    { 2, "Cancelar" }
                });

            migrationBuilder.InsertData(
                schema: "empreendimento",
                table: "tiporeserva",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Reserva Padrão" },
                    { 2, "Pré-reserva" }
                });

            migrationBuilder.InsertData(
                schema: "empreendimento",
                table: "tipounidade",
                columns: new[] { "Id", "Nome" },
                values: new object[,]
                {
                    { 1, "Lote" },
                    { 2, "Imóvel" },
                    { 3, "Jazigo" }
                });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "colunafunil",
                columns: new[] { "Id", "Ativo", "ColunaFunilPaiId", "Descricao", "Nome", "Posicao" },
                values: new object[,]
                {
                    { -15, true, -11, "Todas as partes envolvidas assinam o contrato, formalizando a venda.", "Contrato Assinado por Todos", 4 },
                    { -14, true, -11, "Cliente assina o contrato e retorna.", "Contrato Assinado pelo Cliente", 3 },
                    { -13, true, -11, " Envio do contrato ao cliente para revisão.", "Contrato Emitido", 2 },
                    { -12, true, -11, "Preparação do contrato com base na proposta aceita.", "Elaborando Contrato", 1 },
                    { -10, true, -6, "O cliente aceitou a proposta, e o processo está pronto para avançar para a etapa de elaboração do contrato.", "Proposta Aceita", 4 },
                    { -9, true, -6, "Estão ocorrendo negociações ativas com o cliente sobre termos da proposta.", "Negociação", 3 },
                    { -8, true, -6, ": A proposta foi enviada ao cliente e está aguardando resposta.", "Proposta Enviada", 2 },
                    { -7, true, -6, " A proposta foi elaborada e está pronta para ser enviada ao cliente.", "Proposta Preparada", 1 }
                });

            migrationBuilder.InsertData(
                schema: "clientes",
                table: "modelocontratodigital",
                columns: new[] { "Id", "Conteudo", "IsPadraoSistema", "Nome", "TipoId" },
                values: new object[] { 1, "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Document</title>\r\n</head>\r\n<body style=\"font-family: Arial, Helvetica, sans-serif;\">\r\n    <p style=\"text-align: center;\"><span style=\"font-size: 18pt;\"><em><strong>LOTEAMENTO</strong> </em>  {Empreendimento_Nome} </span></p>\r\n<hr />\r\n<p style=\"text-align: center;\"><span style=\"font-size: 14pt;\">CONTRATO PADR&Atilde;O DE PROMESSA DE COMPRA E VENDA</span></p>\r\n<p style=\"text-align: right;\">N&deg; {Contrato_Numero}  </p>\r\n<p><br />Por este instrumento particular, as partes contratantes devidamente qualificadas no quadro resumo abaixo, t&ecirc;m, entre si, justo e contratado a presente promessa de compra e venda de im&oacute;vel, nas condi&ccedil;&otilde;es abaixo:</p>\r\n<table style=\"border-collapse: collapse; width: 100%; height: 12481px; border-color: #000000; border-style: solid;\" border=\"1\">\r\n<tbody>\r\n<tr style=\"height: 49px;\">\r\n<td style=\"width: 98.5055%; height: 49px; text-align: center;\">QUADRO RESUMO</td>\r\n</tr>\r\n<tr style=\"height: 427px;\">\r\n<td style=\"width: 98.5055%; height: 427px;\">\r\n<p style=\"padding-left: 40px;\">A &ndash; DA QUALIFICA&Ccedil;&Atilde;O DAS PARTES:</p>\r\n<p style=\"padding-left: 40px;\">A1 &ndash; PROMITENTE VENDEDOR(A): {Empresa_Nome} , inscrita no CNPJ sob o n&ordm; {Empresa_CpfCnpj} , com sede &agrave; {Empresa_Logradouro} - n&ordm; {Empresa_Numero} , {Empresa_Bairro} , {Empresa_Municipio} , {Empresa_Estado} - {Empresa_Sigla_Estado} , CEP - {Empresa_Cep} neste ato representada por seu/sua s&oacute;cio(a)   {Socio_Nome} , {Socio_Nacionalidade} , {Socio_Profissao} , {Socio_EstadoCivil} se convive em uni&atilde;o est&aacute;vel, RG {Socio_Rg} , orgão expedidor {Socio_OrgaoExpedidor} , data de expedição {Socio_DataExpedicao} , CPF {Socio_CpfCnpj} , E-mail {Socio_Email} , telefone {Socio_Telefone} , {Socio_Logradouro} , {Socio_Municipio} , {Socio_Bairro} , {Socio_Estado} - {Socio_Sigla_Estado} , nos termos do Contrato Social e da Altera&ccedil;&atilde;o Contratual _______________________ &ordf;, datada de ___/___/___ , devidamente registrada   na  ______________________ sob   o   arquivamento   n &deg; _______________________ .</p>\r\n<p style=\"padding-left: 40px;\">A2 &ndash; PROMITENTE(S) COMPRADOR(A)(ES): {Cliente_Nome} , {Cliente_Nacionalidade} , {Cliente_Profissao} , {Cliente_EstadoCivil} , {Cliente_OrgaoExpedido} , data de expedi&ccedil;&atilde;o - {Cliente_DataExpedicao} , CPF - {Cliente_CpfCnpj} , e-mail - {Cliente_Email} , telefone - {Cliente_Telefone} , resid&ecirc;ncia e domic&iacute;lio - {Cliente_Logradouro} , N&ordm; {Cliente_Numero} - {Cliente_Municipio} , {Cliente_Estado} - {Cliente_Sigla_Estado} , e {Cliente2_Nome} , {Cliente2_Nacionalidade} , {Cliente2_Profissao} , {Cliente2_EstadoCivil} , {Cliente2_OrgaoExpedido} , data de nascimento {Cliente2_DataNascimento} , CPF {Cliente2_CpfCnpj} , e-mail {Cliente2_Email} , telefone {Cliente2_Telefone} , resid&ecirc;ncia e domic&iacute;lio , {Cliente2_Logradouro} , n° {Cliente2_Numero} , {Cliente2_Municipio} , {Cliente2_Estado} </p>\r\n<p style=\"padding-left: 40px;\">A3 &ndash; CORRETOR: {Corretor_Nome} , {Corretor_Nacionalidade} , {Corretor_Profissao} , {Corretor_EstadoCivil} , se convive em uni&atilde;o est&aacute;vel, identidade {Corretor_Rg} , &oacute;rg&atilde;o expedidor {Corretor_OrgaoExpedidor} , data de expedi&ccedil;&atilde;o {Corretor_DataExpedicao} , CPF {Corretor_CpfCnpj} , resid&ecirc;ncia {Corretor_Logradouro} , {Corretor_Numero} , {Corretor_Bairro} , {Corretor_Municipio} , {Cliente_Estado} -  {Cliente_Sigla_Estado}  .</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 210px;\">\r\n<td style=\"width: 98.5055%; height: 210px;\">\r\n<p style=\"padding-left: 40px;\">B &ndash; DA DESCRI&Ccedil;&Atilde;O DO IM&Oacute;VEL:</p>\r\n<p style=\"padding-left: 40px;\">Lote {Lote_Nome} , da quadra {Quadra_Nome} ( {Quadra_Nome_Extenso} ) , do loteamento {Empreendimento_Nome} , situado em {Lote_Bairro} , na zona urbana do primeiro distrito do Munic&iacute;pio de {Lote_Municipio} &ndash; {Lote_Sigla_Estado} . Terreno com a   &aacute;rea  de {Lote_AreaTotal} m&sup2; ( {Lote_AreaTotalExtenso} ), com as seguintes medidas e confronta&ccedil;&otilde;es: {Lote_Frente} m ( {Lote_Frente_Extenso} METRO(S) QUADRADO(S) ) de   frente   para   a   Rua ______________________________________ , {Lote_Fundo} m ( {Lote_FundoExtenso} METRO(S) QUADRADO(S) ) de   fundos confrontando com {Lote_Confrontante_Fundo} , {Lote_LadoDireito} m ( {Lote_LadoDireitoExtenso} METRO(S) QUADRADO(S) ) na lateral direita confrontando com {Lote_Confrontante_LadoDireito} , e {Lote_LadoEsquerdo} m ( {Lote_LadoEsquerdoExtenso} METRO(S) QUADRADO(S) )  na   lateral esquerda   confrontando   com   {Lote_Confrontante_LadoEsquerdo} , devidamente   descrito   e   caracterizado   na   matr&iacute;cula   n&deg; {Lote_Matricula} , do Registro de Im&oacute;veis do Cart&oacute;rio do {Empreendimento_Cartorio} Of&iacute;cio de {Empreendimento_Cartorio_Cidade} &ndash; {Empreendimento_Cartorio_Sigla_Estado} .</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 126px;\">\r\n<td style=\"width: 98.5055%; height: 126px;\">\r\n<p style=\"padding-left: 40px;\">C &ndash; DA INEXIST&Ecirc;NCIA DE &Ocirc;NUS REAIS SOBRE O IM&Oacute;VEL:</p>\r\n<p style=\"padding-left: 40px;\">A  {Empresa_Nome} declara, sob pena de responsabilidade civil   e criminal,   que o   im&oacute;vel, descrito no item &ldquo;B&rdquo; acima, se encontra livre e desembara&ccedil;ado de   todo e qualquer &ocirc;nus real, judicial ou extrajudicial, que sobre o im&oacute;vel n&atilde;o h&aacute; d&eacute;bitos   relativos a taxas,   tributos,   tarifas  ou contribui&ccedil;&otilde;es,   bem como que   inexistem a&ccedil;&otilde;es reais e pessoais reipersecut&oacute;rias, relativas ao im&oacute;vel, e outros &ocirc;nus reais incidentes sobre o mesmo.</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 168px;\">\r\n<td style=\"width: 98.5055%; height: 168px;\">\r\n<p style=\"padding-left: 40px;\">D &ndash; DO T&Iacute;TULO AQUISITIVO:</p>\r\n<p style=\"padding-left: 40px;\">A Gleba {Lote_Nome} , onde foi implementado o Loteamento {Lote_Nome} , foi adquirido pela {Empresa_Nome} nos termos da escritura de compra e venda, lavrada nas Notas do   Cart&oacute;rio do {Lote_Cartorio} Of&iacute;cio de {Lote_Cartorio_Municipio} &ndash; {Lote_Cartorio_Sigla_Estado} , no Livro {Lote_Livro} , fls. ____________ , ato n&ordm; ________________ , em ___/___/___ , registrada sob o n° ________________ da Matr&iacute;cula n&deg; {Lote_Matricula} , do Registro de Im&oacute;veis do Cart&oacute;rio do {Lote_Cartorio} Of&iacute;cio de {Lote_Municipio} &ndash; {Lote_Sigla_Estado} , com   posterior   averba&ccedil;&otilde;es   de retifica&ccedil;&atilde;o de &aacute;rea e de desmembramento, dando origem a Gleba 1 -A.</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 210px;\">\r\n<td style=\"width: 98.5055%; height: 210px;\">\r\n<p style=\"padding-left: 40px;\">E &ndash; DA DENOMINA&Ccedil;&Atilde;O, SITUA&Ccedil;&Atilde;O E REGISTRO DO LOTEAMENTO:</p>\r\n<p style=\"padding-left: 40px;\">O projeto do loteamento {Lote_Nome} foi aprovado, com base na Lei Municipal n&deg; _______________________ , pela Secretaria Municipal de Obras, Urbanismo e Servi&ccedil;os P&uacute;blicos do Munic&iacute;pio de Cidade {Lote_Municipio} &ndash; {Lote_Sigla_Estado} , atrav&eacute;s processo administrativo   n&ordm; ________________ ,   e registrado sob o n° ________________   da Matr&iacute;cula n&deg; {Lote_Matricula} , aos ___/___/___ , no Registro de Im&oacute;veis do  Cart&oacute;rio do {Lote_Cartorio} Of&iacute;cio de {Lote_Municipio} &ndash; {Lote_Sigla_Estado} , recebendo a inscri&ccedil;&atilde;o n&deg; _________________ . O projeto do loteamento foi devidamente executado e conclu&iacute;do conforme se verifica no Aceite de Obras,  expedido pela Secretaria Municipal de Obras, Urbanismo e Servi&ccedil;os P&uacute;blicos   do Munic&iacute;pio   de {Lote_Municipio} &ndash; {Lote_Sigla_Estado} ,   aos   ____/____/___,   acompanhado do Laudo   de   Vistoria, que foi realizada no dia ___/___/___ , e ainda do Termo de Compromisso, firmado em ____/____/___, atrav&eacute;s do qual a  {Empresa_Nome}  assumiu a responsabilidade de ________________.</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 364px;\">\r\n<td style=\"width: 98.5055%; height: 364px;\">\r\n<p style=\"padding-left: 40px;\">F &ndash; DO PRE&Ccedil;O, DO PRAZO, DA FORMA E DO LOCAL DO PAGAMENTO:</p>\r\n<p style=\"padding-left: 40px;\">F.1 &ndash; Valor à vista da promessa de compra venda: R$ {Valor_Total} ( {Valor_Total_Extenso} ).</p>\r\n<p style=\"padding-left: 40px;\">F.2 &ndash; Entrada (sinal): R$ {Entrada_Valor} ( {Entrada_Valor_Extenso} ).</p>\r\n<p style=\"padding-left: 40px;\">F.3 &ndash; Saldo devedor a ser parcelado: R$ {Financiamento_Valor} ( {Financiamento_Valor_Extenso} ).</p>\r\n<p style=\"padding-left: 40px;\">F.4 &ndash; O saldo devedor ser&aacute; pago em  {Financiamento_QtdeParcela} ( {Financiamento_QtdeParcela_Extenso} ),  parcelas, mensais e sucessivas.</p>\r\n<p style=\"padding-left: 40px;\">F.5 &ndash; Valor da primeira parcela R$ {Financiamento_ValorParcela} ( {Financiamento_ValorParcela_Extenso} ).</p>\r\n<p style=\"padding-left: 40px;\">F.6 &ndash; Data do vencimento da primeira parcela: {Financiamento_DataParcela} .</p>\r\n<p style=\"padding-left: 40px;\">F.7 &ndash; Vencimento das demais parcelas: No mesmo dia dos meses subsequentes.</p>\r\n<p style=\"padding-left: 40px;\">F.8 &ndash; Parcela intermedi&aacute;ria no valor de R$ {Intermediaria_ValorParcela} a vencer em {Intermediaria_DataParcela} .</p>\r\n<p style=\"padding-left: 40px;\">F.9 &ndash; Local de pagamento _________________________________ .</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 119px;\">\r\n<td style=\"width: 98.5055%; height: 119px;\">\r\n<p style=\"padding-left: 40px;\">G &ndash; &Iacute;NDICE DE CORRE&Ccedil;&Atilde;O MONET&Aacute;RIA:</p>\r\n<p style=\"padding-left: 40px;\">G.1 &ndash; Incidente sobre o d&eacute;bito em aberto {Indice} :.</p>\r\n<p style=\"padding-left: 40px;\">G.2 &ndash; Incidente sobre as presta&ccedil;&otilde;es vencidas e n&atilde;o pagas: {Indice} .</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 21px;\">\r\n<td style=\"width: 98.5055%; height: 21px; padding-left: 40px;\">H &ndash; DO SISTEMA DE AMORTIZA&Ccedil;&Atilde;O: {Tabela} .</td>\r\n</tr>\r\n<tr style=\"height: 154px;\">\r\n<td style=\"width: 98.5055%; height: 154px;\">\r\n<p style=\"padding-left: 40px;\">I &ndash; DA TAXA DE JUROS:</p>\r\n<p style=\"padding-left: 40px;\">I.1 &ndash; Incidentes sobre o d&eacute;bito em aberto (juros remunerat&oacute;rios) {Taxa_Remuneratorios} %.</p>\r\n<p style=\"padding-left: 40px;\">I.2 - Incidentes sobre as presta&ccedil;&otilde;es vencidas e n&atilde;o pagas (multa morat&oacute;rios) {Multa_Moratorios} %.</p>\r\n<p style=\"padding-left: 40px;\">I.3 - Incidentes sobre as prestações vencidas e não pagas (juros moratórios) {Juros_Moratorios} %.</p>\r\n<p style=\"padding-left: 40px;\">Se mensais ou anuais, se nominais ou efetivas, per&iacute;odo de incid&ecirc;ncia</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 21px;\">\r\n<td style=\"width: 98.5055%; height: 21px; padding-left: 40px;\">J &ndash; DA MULTA MORAT&Oacute;RIA: 2% sobre o valor do d&eacute;bito em atraso atualizado</td>\r\n</tr>\r\n<tr style=\"height: 84px;\">\r\n<td style=\"width: 98.5055%; height: 84px;\">\r\n<p style=\"padding-left: 40px;\">K &ndash; CL&Aacute;USULA PENAL:</p>\r\n<p style=\"padding-left: 40px;\">10% sobre o valor do d&eacute;bito em atraso atualizado, sendo exig&iacute;vel somente nos casos de interven&ccedil;&atilde;o judicial ou de mora superior a 03 (tr&ecirc;s) meses.</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 140px;\">\r\n<td style=\"width: 98.5055%; height: 140px;\">\r\n<p style=\"padding-left: 40px;\">L &ndash; DA  CORRETAGEM:</p>\r\n<p style=\"padding-left: 40px;\">L.1 &ndash; Pre&ccedil;o total da corretagem: R$ {Valor_TotalCorretagem} ( {Valor_TotalCorretagem_Extenso} ).</p>\r\n<p style=\"padding-left: 40px;\">L.2 &ndash; O valor da corretagem, acima informado, dever&aacute; ser pago &agrave; vista, no ato da assinatura do presente instrumento, em favor do CORRETOR, acima qualificado.</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 126px;\">\r\n<td style=\"width: 98.5055%; height: 126px;\">\r\n<p style=\"padding-left: 40px;\">M &ndash; DA OBRIGA&Ccedil;&Atilde;O PELO PAGAMENTO  DOS IMPOSTOS E TAXAS INCIDENTES SOBRE O LOTE:</p>\r\n<p style=\"padding-left: 40px;\">Os tributos, impostos, tarifas e taxas eventualmente incidentes sobre o im&oacute;vel, referente &agrave; compet&ecirc;ncia fiscal anterior &agrave; data deste contrato, ser&aacute; de responsabilidade   da    {Empresa_Nome} .   Os tributos, impostos, tarifas e taxas incidentes sobre o im&oacute;vel, referente &agrave; compet&ecirc;ncia fiscal posterior &agrave; data deste contrato, inclusive, ser&aacute; de responsabilidade do  {Cliente_Nome} , que se compromete a pag&aacute;-los em dia.</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 665px;\">\r\n<td style=\"width: 98.5055%; height: 665px;\">\r\n<p style=\"padding-left: 40px;\">N &ndash;   DAS   RESTRI&Ccedil;&Otilde;ES   URBAN&Iacute;STICAS   CONVENCIONAIS   DO   LOTEAMENTO,   SUPLETIVAS   DA   LEGISLA&Ccedil;&Atilde;O PERTINENTE:</p>\r\n<p style=\"padding-left: 40px;\">O {Cliente_Nome} somente poder&aacute; fazer edifica&ccedil;&otilde;es no im&oacute;vel ap&oacute;s a aprova&ccedil;&atilde;o pela   Prefeitura Municipal e somente se iniciar&atilde;o obras com o devido alvar&aacute; de licen&ccedil;a   para   a   constru&ccedil;&atilde;o,   a   qual   dever&aacute; respeitar as condi&ccedil;&otilde;es previstas na Licen&ccedil;a Ambiental de Instala&ccedil;&atilde;o do Loteamento n&ordm;  {Lote_Matricula} , emitida pela Prefeitura Municipal de Cidade {Lote_Municipio} &ndash; {Lote_Sigla_Estado} , emitida em ___/___/___ , &agrave; qual estabelece serem   obriga&ccedil;&otilde;es do(a)(s) PROMITENTE(S) COMPRADORA)(ES):</p>\r\n<p style=\"padding-left: 40px;\">a) Condi&ccedil;&atilde;o a;<br />b) Condi&ccedil;&atilde;o b;<br />c) Condi&ccedil;&atilde;o c;<br />d) Condi&ccedil;&atilde;o d; </p>\r\n<p style=\"padding-left: 40px;\"><span style=\"font-weight: 400;\">&sect;</span>1&deg; Al&eacute;m de   aprova&ccedil;&atilde;o e   licen&ccedil;a de   obras, pela   qual as constru&ccedil;&otilde;es devem atender   &agrave;s   exig&ecirc;ncias do Munic&iacute;pio, o {Cliente_Nome} se compromete ainda,   &agrave;s   suas   expensas,   realizar   constru&ccedil;&otilde;es   atendendo   os seguintes requisitos contratuais:</p>\r\n<p style=\"padding-left: 40px;\">Projeto aprovado pela Prefeitura Municipal de Cidade {Lote_Municipio} &ndash; {Lote_Sigla_Estado} , com devida licen&ccedil;a de obras;</p>\r\n<p style=\"padding-left: 40px;\">Sugest&atilde;o b:  Ser em alvenaria com embo&ccedil;o, cobertura   de telha ou   laje,   em cimento armado,   com &aacute;rea constru&iacute;da m&iacute;nima de 45,00m&sup2;;<br />Sugest&atilde;o c:  Ter instalado um reservat&oacute;rio   de no   m&iacute;nimo   2.000 litros e caixa d&rsquo;&aacute;gua;  <br />Sugest&atilde;o d:  Ter   instalado fossa   s&eacute;ptica ou caixa de absor&ccedil;&atilde;o antes de ser feita a liga&ccedil;&atilde;o &agrave; rede da rua, liga&ccedil;&atilde;o essa feita com materiais de boa qualidade e de acordo com as orienta&ccedil;&otilde;es da empresa.</p>\r\n<p style=\"padding-left: 40px;\">Nenhuma responsabilidade caber&aacute; a {Empreendimento_Nome} no caso de quaisquer san&ccedil;&otilde;es das autoridades competentes em raz&atilde;o da inobserv&acirc;ncia   das   normas   pertinentes.  O {Cliente_Nome} responder&aacute; ainda pelos preju&iacute;zos das constru&ccedil;&otilde;es irregulares, mal planejadas ou mal executadas que realizar.</p>\r\n<p style=\"padding-left: 40px;\">O {Cliente_Nome} ficar&aacute; respons&aacute;vel civil e criminalmente caso promova a destrui&ccedil;&atilde;o, aproprie-se indevidamente ou fa&ccedil;a mau uso dos equipamentos urbanos implantados no empreendimento.</p>\r\n<p style=\"padding-left: 40px;\">O {Cliente_Nome} n&atilde;o poder&aacute;, sobre qualquer pretexto, fazer nem permitir que se fa&ccedil;a no im&oacute;vel, escava&ccedil;&otilde;es e trabalhos de olaria, nem tirar argila ou areia ou similares, obrigando-se a us&aacute;-lo para fins que n&atilde;o venham prejudicar o bem-estar, o sossego da   vizinhan&ccedil;a,   ou   meio   ambiente,   sendo   ainda   expressamente proibido: a cria&ccedil;&atilde;o de gado ou animais de grande porte no im&oacute;vel; a constru&ccedil;&atilde;o de barracos de madeira, para quaisquer   fins,   est&aacute;bulos,   currais   ou   semelhantes;   e   armazenamento   de   material   inflam&aacute;vel,   t&oacute;xico ou explosivo.</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 486px;\">\r\n<td style=\"width: 98.5055%; height: 486px;\">\r\n<p style=\"padding-left: 40px;\">O &ndash; DAS CONSEQU&Ecirc;NCIAS DO DESFAZIMENTO DO CONTRATO:</p>\r\n<p style=\"padding-left: 40px;\">O.1 &ndash; MEDIANTE   RESOLU&Ccedil;&Atilde;O   CONTRATUAL   MOTIVADA   POR   INADIMPLEMENTO   DE   OBRIGA&Ccedil;&Otilde;ES   DA {Empreendimento_Nome} :</p>\r\n<p style=\"padding-left: 40px;\">Em caso de resolu&ccedil;&atilde;o contratual por   inadimplemento   de   obriga&ccedil;&atilde;o   do {Empresa_Nome} , os  valores pagos por este contrato ser&atilde;o restitu&iacute;dos, com a dedu&ccedil;&atilde;o dos valores correspondentes &agrave; frui&ccedil;&atilde;o do im&oacute;vel, equivalente a 0,75% (setenta e cinco cent&eacute;simos por cento) sobre o valor atualizado do contrato, cujo prazo ser&aacute; contado a partir da data da transmiss&atilde;o da posse do im&oacute;vel ao {Cliente_Nome} at&eacute;   sua restitui&ccedil;&atilde;o a {Empresa_Nome} . O   pagamento   da   restitui&ccedil;&atilde;o   ocorrer&aacute;   em   at&eacute;   12   (doze)   parcelas mensais, com in&iacute;cio ap&oacute;s a formaliza&ccedil;&atilde;o da rescis&atilde;o contratual.</p>\r\n<p style=\"padding-left: 40px;\">As benfeitorias necess&aacute;rias ou &uacute;teis realizadas no im&oacute;vel dever&atilde;o ser indenizadas , salvo as realizadas em desconformidade com o contrato ou a lei.</p>\r\n<p style=\"padding-left: 40px;\">A comprova&ccedil;&atilde;o da legaliza&ccedil;&atilde;o e de execu&ccedil;&atilde;o da   benfeitoria atendendo   a esses requisitos legais e contratuais dever&aacute; ser realizada pelo  {Cliente_Nome} , no prazo de 30 dias, atrav&eacute;s de: a) laudo   assinado   por engenheiro arquiteto; b)   projeto aprovado   e licenciado   c)   licen&ccedil;a   de   constru&ccedil;&atilde;o,   sob   pena   de   presun&ccedil;&atilde;o de n&atilde;o cumprirem os crit&eacute;rios e requisitos estabelecidos em lei.</p>\r\n<p> </p>\r\n<p> </p>\r\n<p style=\"text-align: center;\">___________________________________________________________</p>\r\n<p style=\"text-align: center;\">ASSINATURA DO(A) {Cliente_Nome} .</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 98.5055%; height: 154px;\">\r\n<p style=\"padding-left: 40px;\">O.2 &ndash; MEDIANTE DISTRATO OU MEDIANTE RESOLU&Ccedil;&Atilde;O CONTRATUAL MOTIVADA POR INADIMPLEMENTO DE OBRIGA&Ccedil;&Otilde;ES DO {Cliente_Nome}:</p>\r\n<p style=\"padding-left: 40px;\">N&atilde;o obstante o car&aacute;ter de irrevogabilidade e irretratabilidade, o presente contrato poder&aacute; ser distratado   pelas partes mediante comum acordo, bem como poder&aacute; ser   desfeito   mediante   resolu&ccedil;&atilde;o   contratual   por inadimplemento de obriga&ccedil;&otilde;es do  {Cliente_Nome} , sendo, em ambos os caso s, aplicado as penalidades e prazos abaixo.</p>\r\n<p style=\"padding-left: 40px;\">Em caso de resolu&ccedil;&atilde;o contratual por   fato   imputado   ao {Cliente_Nome} , respeitado   o   disposto no   &sect; 2&ordm; deste item, dever&atilde;o ser restitu&iacute;dos os   valores   pagos   por   ele,   atualizados   com   base   no   &iacute;ndice contratualmente estabelecido para a corre&ccedil;&atilde;o monet&aacute;ria das parcelas do pre&ccedil;o do   im&oacute;vel,   podendo   ser descontados dos valores pagos os seguintes itens:</p>\r\n<p style=\"padding-left: 40px;\">Os valores correspondentes &agrave; eventual frui&ccedil;&atilde;o do im&oacute;vel, at&eacute; o equivalente a 0,75%   (setenta   e   cinco cent&eacute;simos por cento) sobre o valor atualizado do contrato, cujo prazo ser&aacute; contado a partir da data da transmiss&atilde;o da posse do im&oacute;vel ao adquirente at&eacute; sua restitui&ccedil;&atilde;o ao loteador;<br />O montante devido por cl&aacute;usula penal e despesas administrativas, inclusive arras ou sinal, limitado a   um desconto de 10% (dez por cento) do valor atualizado do contrato;<br />Os encargos morat&oacute;rios relativos &agrave;s presta&ccedil;&otilde;es pagas em atraso pelo adquirente;</p>\r\n<p style=\"padding-left: 40px;\">Os d&eacute;bitos de impostos sobre a propriedade predial e territorial urbana, taxas e tarifas vinculadas ao   im&oacute;vel, bem como tributos, custas e emolumentos incidentes sobre a restitui&ccedil;&atilde;o e/ou rescis&atilde;o;<br />A comiss&atilde;o de corretagem, desde que integrada ao pre&ccedil;o do lote.</p>\r\n<p style=\"padding-left: 40px;\"><span style=\"font-weight: 400;\">&sect;</span>1&deg; O pagamento da restitui&ccedil;&atilde;o ocorrer&aacute; em at&eacute; 12 (doze) parcelas mensais,   com   in&iacute;cio   ap&oacute;s   o   prazo   de car&ecirc;ncia de 12 meses ap&oacute;s a formaliza&ccedil;&atilde;o da rescis&atilde;o contratual.<br /><span style=\"font-weight: 400;\">&sect;</span>2&deg; Somente ser&aacute; efetuado registro do contrato de nova venda se   for   comprovado   o   in&iacute;cio   da restitui&ccedil;&atilde;o do valor pago pelo vendedor ao titular do registro cancelado na   forma   e   condi&ccedil;&otilde;es   pactuadas   no   distrato, dispensada essa comprova&ccedil;&atilde;o nos casos em que  o adquirente n&atilde;o for localizado ou n&atilde;o tiver se manifestado, nos termos do art. 32 desta Lei.</p>\r\n<p style=\"padding-left: 40px;\">O.2.3 - Se o {Empresa_Nome} , credor das presta&ccedil;&otilde;es, se recusar receb&ecirc; -las ou furtar-se ao   seu recebimento, ser&aacute; constitu&iacute;do em mora mediante notifica&ccedil;&atilde;o   do Oficial do   Registro   de   Im&oacute;veis para   vir   receber as import&acirc;ncias depositadas pelo {Cliente_Nome} no pr&oacute;prio   Registro   de   Im&oacute;veis.   Decorridos   15 (quinze) dias ap&oacute;s o recebimento da intima&ccedil;&atilde;o, considerar -se-&aacute; efetuado o pagamento, a menos que   o {Empresa_Nome} impugne   o   dep&oacute;sito   e,   alegando   inadimplemento   do {Cliente_Nome} , requeira a intima&ccedil;&atilde;o deste para os fins do disposto no art. 32 desta Lei n&deg; 6.766/79.</p>\r\n<p style=\"padding-left: 40px;\">Em qualquer   caso   de   rescis&atilde;o   por   inadimplemento   do {Cliente_Nome} ,   as benfeitori as   necess&aacute;rias ou &uacute;teis por ele levadas a efeito no im&oacute;vel dever&atilde;o ser indenizadas.</p>\r\n<p style=\"padding-left: 40px;\"><span style=\"font-weight: 400;\">&sect;</span>1&ordm; - N&atilde;o ser&atilde;o indenizadas as benfeitorias feitas em desconformidade com o contrato ou com a lei.</p>\r\n<p style=\"padding-left: 40px;\"><span style=\"font-weight: 400;\">&sect;</span>2&deg;   -   A   comprova&ccedil;&atilde;o   da   legaliza&ccedil;&atilde;o   e   de   execu&ccedil;&atilde;o   da   benfeitoria   atendendo   a   esses   requisitos   legais   e</p>\r\n<p style=\"padding-left: 40px;\">contratuais dever&aacute; ser realizada pelo  {Cliente_Nome}  , no prazo de   30 dias, atrav&eacute;s de: a) laudo   assinado por engenheiro arquiteto; b) projeto aprovado e licenciado c) licen&ccedil;a de constru&ccedil;&atilde;o, sob pena de presun&ccedil;&atilde;o de n&atilde;o cumprirem os crit&eacute;rios e requisitos estabelecidos em lei .</p>\r\n<p style=\"padding-left: 40px;\"><span style=\"font-weight: 400;\">&sect;</span>3&deg; No prazo de 60 (sessenta) dias, contado da constitui&ccedil;&atilde;o em mora, fica a {Empresa_Nome} , na hip&oacute;tese do caput desta cl&aacute;usula, obrigada a alienar   o   im&oacute;vel   mediante   leil&atilde;o   judicial   ou   extrajudicial,   nos termos da Lei n&ordm; 9.514, de 20 de novembro de 1997.</p>\r\n<p style=\"padding-left: 40px;\">Se ocorrer o cancelamento do registro por inadimplemento do contrato, e tiver sido realizado   o pagamento   de mais de 1/3 (um ter&ccedil;o) do pre&ccedil;o   ajustado, o   oficial do   registro de im&oacute;veis mencionar&aacute; esse   fato e   a quantia paga no ato do cancelamento, e somente ser&aacute; efetuado novo registro relativo ao mesmo lote, mediante apresenta&ccedil;&atilde;o do distrato assinado pelas partes   e   a   comprova&ccedil;&atilde;o   do   pagamento   da   parcela   &uacute;nica   ou   da primeira parcela do montante a ser restitu&iacute;do ao  {Cliente_Nome} , na forma do art. 32-A da Lei n&deg; 6.766/79, ao titular do registro cancelado, ou mediante dep&oacute;sito em dinheiro &agrave; sua disposi&ccedil;&atilde;o no registro de im&oacute;veis.</p>\r\n<p style=\"padding-left: 40px;\"><span style=\"font-weight: 400;\">&sect;</span>1&ordm; Ocorrendo o dep&oacute;sito a que se refere este artigo, o Oficial   do Registro de   Im&oacute;veis   inti mar&aacute; o interessado para vir receb&ecirc;-lo no prazo de 10 (dez) dias, sob pena de ser devolvido ao depositante.<br /><span style=\"font-weight: 400;\">&sect;</span>2&ordm; No caso de n&atilde;o se encontrado o interessado, o Oficial do Registro de Im&oacute;veis depositar&aacute; quantia em estabelecimento de cr&eacute;dito, segundo a ordem prevista no inciso I do art. 666 do C&oacute;digo de   Processo Civil, em conta com incid&ecirc;ncia de juros e corre&ccedil;&atilde;o monet&aacute;ria.<br /><span style=\"font-weight: 400;\">&sect;</span>3&ordm; A obriga&ccedil;&atilde;o de comprova&ccedil;&atilde;o pr&eacute;via de pagamento da parcela &uacute;nica ou da primeira parcela como condi&ccedil;&atilde;o para efetiva&ccedil;&atilde;o de novo registro, prevista no caput desta cl&aacute;usula, poder&aacute; ser dispensada se as partes convencionarem de modo diverso e de forma expressa no documento de distrato por elas assinado.</p>\r\n<p style=\"padding-left: 40px;\"> </p>\r\n<p> </p>\r\n<p style=\"text-align: center;\">___________________________________________________________</p>\r\n<p style=\"text-align: center;\">ASSINATURA DO(A) {Cliente_Nome} .</p>\r\n<p style=\"text-align: center;\"> </p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 154px;\">\r\n<td style=\"width: 98.5055%; height: 154px;\">\r\n<p style=\"padding-left: 40px;\">P &ndash; DO LOCAL DA CELEBRA&Ccedil;&Atilde;O DO PRESENTE CONTRATO:</p>\r\n<p style=\"padding-left: 40px;\">O presente contrato &eacute; celebrado no lugar assinalado com X:</p>\r\n<p style=\"padding-left: 40px;\">(   ) Na sede ou no estabelecimento comercial da {Empresa_Nome};</p>\r\n<p style=\"padding-left: 40px;\">(   ) Fora da sede ou do estabelecimento comercial da {Empresa_Nome} ;</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 199px;\">\r\n<td style=\"width: 98.5055%; height: 199px;\">\r\n<p style=\"padding-left: 40px;\">Q &ndash; DO DIREITO DE ARREPENDIMENTO:</p>\r\n<p style=\"padding-left: 40px;\">Caso o contrato seja firmado em estandes de vendas e fora da sede da {Empresa_Nome} ou do seu estabelecimento comercial, o {Cliente_Nome} poder&aacute;,   no prazo   de   07 (sete)   dias   contados   da   data de assinatura deste contrato, exercer o seu direito de arrependimento, requerendo a desist&ecirc;ncia do presente contrato, por escrito, atrav&eacute;s de e-mail encaminhado para o endere&ccedil;o eletr&ocirc;nico ,</p>\r\n<p style=\"padding-left: 40px;\">ficando acordado que o valor eventualmente pago pelo {Cliente_Nome} ,   em   raz&atilde;o   do   presente contrato, a t&iacute;tulo de entrada (sinal) e corretagem ser&atilde;o devolvidos no prazo de at&eacute; 30 dias corridos.</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 127px;\">\r\n<td style=\"width: 98.5055%; height: 127px;\">\r\n<p style=\"padding-left: 40px;\">R &ndash; DO PRAZO PARA QUITA&Ccedil;&Atilde;O DAS OBRIGA&Ccedil;&Otilde;ES PELO  {Cliente_Nome}  AP&Oacute;S A   OBTEN&Ccedil;&Atilde;O   DO TERMO DE VISTORIA DE OBRAS:</p>\r\n<p style=\"padding-left: 40px;\">Uma vez que as obras j&aacute; est&atilde;o conclu&iacute;das, ser&aacute; o mesmo prazo de financiamento constante neste contrato.</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 434px;\">\r\n<td style=\"width: 98.5055%; height: 434px;\">\r\n<p> </p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA PRIMEIRA &ndash; DO EMPREENDIMENTO:</p>\r\n<p style=\"padding-left: 40px;\">1.1 &ndash; A {Empresa_Nome} , qualificada no item &ldquo;A.1&rdquo; do Quadro Resumo, doravante denominada {Cliente_Nome} , &eacute; legitima propriet&aacute;ria da GLEBA {Lote_Nome} , sito no lugar {Lote_Bairro} , zona urbana do primeiro distrito do munic&iacute;pio de {Lote_Municipio} &ndash; {Lote_Sigla_Estado} , com a &aacute;rea de {Lote_AreaTotal} m&sup2;, devidamente descrito e caracterizado na matr&iacute;cula n&ordm; {Empreendimento_Matricula} , do Registro de Im&oacute;veis anexo ao Cart&oacute;rio do  {Empreendimento_Cartorio} Of&iacute;cio de {Empreendimento_Cartorio_Cidade} &ndash; {Empreendimento_Cartorio_Sigla_Estado} .<br />1.2 &ndash; A &aacute;rea adquirida pela {Empresa_Nome} nos   termos   da escritura de compra e venda, lavrada nas Notas do Cart&oacute;rio do {Empreendimento_Cartorio} Of&iacute;cio de Cidade &ndash; {Empreendimento_Cartorio_Sigla_Estado} , no Livro {Lote_Livro} , fls. ________________ , ato n&ordm; _________________ ,   de ___/___/___ ,   registrada   sob o   R. ________________  da   matr&iacute;cula supracitada.<br />1.3 &ndash; Na &aacute;rea, a {Empresa_Nome} implementou o LOTEAMENTO  {Lote_Nome} , aprovado, com base na Lei Municipal n&deg; _______________________ , pela Secretaria Municipal de Obras, Urbanismo e Servi&ccedil;os P&uacute;blicos do Munic&iacute;pio   de   Cidade {Lote_Municipio} &ndash; {Lote_Sigla_Estado} ,   atrav&eacute;s   processo   administrativo   n&ordm;    ________________ ,   em ___/___/___ ,   e   registrado   no RGI,   da   Matr&iacute;cula   n&deg;  {Lote_Matricula} , aos ___/___/___ , no Registro de Im&oacute;veis do Cart&oacute;rio  do  ________________ Of&iacute;cio de {Lote_Municipio}  &ndash;  {Lote_Sigla_Estado} , recebendo a inscri&ccedil;&atilde;o   n&deg; ________________ .<br />1.4 &ndash; O projeto do loteamento foi devidamente executado e   conclu&iacute;do   conforme   se verifica   no   Aceite   de Obras, expedido pela Secretaria Municipal de Obras,   Urbanismo   e   Servi&ccedil;os   P&uacute;blicos   do Munic&iacute;pio de Cidade {Lote_Municipio} &ndash; {Lote_Sigla_Estado} , aos  ___/___/___ , acompanhado do Laudo   de Vistoria, que foi realizada   no   dia    ___/___/___,   e   ainda   do   Termo de Compromisso, firmado   em    ___/___/___,   atrav&eacute;s do   qual   a    {Empresa_Nome}    assumiu   a   responsabilidade de _________________________________.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA SEGUNDA &ndash; DA PROMESSA DE COMPRA E VENDA:</p>\r\n<p style=\"padding-left: 40px;\">2.1 &ndash; Pelo presente instrumento e na melhor forma de direito a  {Empresa_Nome}  se compromete a vender ao  {Cliente_Nome} , qualificado no item &ldquo;A.2&rdquo; do Quadro Resumo, doravante denominado  {Cliente_Nome} , que, por sua vez,   se   compromete   a   comprar   o   im&oacute;vel descrito   e   caracterizado no item &ldquo;B&rdquo; do Quadro Resumo.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA TERCEIRA &ndash; DA TRANSMISS&Atilde;O DA POSSE:</p>\r\n<p style=\"padding-left: 40px;\">3.1 &ndash; A partir da data da assinatura deste contrato, a  {Empresa_Nome}  transfere ao  {Cliente_Nome}  a posse, uso, gozo e frui&ccedil;&atilde;o sobre o im&oacute;vel objeto deste contrato a t&iacute;tulo prec&aacute;rio, inclusive para os efeitos do que est&aacute; disposto na cl&aacute;usula 12.1, ficando este respons&aacute;vel pela conserva&ccedil;&atilde;o, limpeza e prote&ccedil;&atilde;o.<br />3.2 &ndash; O  {Cliente_Nome}  aceita incontestavelmente o estado atual do im&oacute;vel objeto deste contrato e da infraestrutura existente no loteamento. Est&aacute; ciente de que n&atilde;o compete a  {Empresa_Nome}  a realiza&ccedil;&atilde;o de quaisquer outras obras de infraestrutura, uma vez que todas &agrave;quelas exigidas pela Prefeitura Municipal de {Lote_Municipio} &ndash; {Lote_Sigla_Estado} para a aprova&ccedil;&atilde;o do empreendimento e at&eacute; as prometidas em publicidade, j&aacute; foram executadas e devidamente comprovadas, isentando a  {Empresa_Nome}  de qualquer responsabilidade nos termos do art. 14, &sect; 3.&ordm;, I, Lei n.&ordm; 8.078/90.<br />3.3 &ndash; Fica estipulado que o pre&ccedil;o do im&oacute;vel objeto deste contrato tem por base o estado em que o mesmo se encontra, de forma que limpeza, aterro, terraplanagem ou quaisquer melhorias no im&oacute;vel, ficam por conta exclusiva do  {Cliente_Nome} .</p>\r\n<p style=\"padding-left: 40px;\">3.4 &ndash; O  {Cliente_Nome}  declara haver constatado que o im&oacute;vel objeto deste contrato, encontra-se com todos os marcos nos seus respectivos lugares, ficando qualquer nova medi&ccedil;&atilde;o ou marca&ccedil;&atilde;o que se fa&ccedil;a(m) necess&aacute;rias, sob sua inteira e exclusiva responsabilidade e expensas. Qualquer diferen&ccedil;a na metragem dever&aacute; ser comunicada por escrito a  {Empresa_Nome} , no prazo de 90 dias, e ser&aacute; compensada na base do pre&ccedil;o do im&oacute;vel, n&atilde;o se considerando diferen&ccedil;a de at&eacute; 5% (cinco por cento) conforme art. 500 do C&oacute;digo Civil. Ap&oacute;s esse prazo ser&aacute; dado como aceito o lote e n&atilde;o mais haver&aacute; direito &agrave; reclama&ccedil;&atilde;o.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA QUARTA &ndash; DA INEXIST&Ecirc;NCIA DE &Ocirc;NUS REAIS SOBRE O IM&Oacute;VEL:</p>\r\n<p style=\"padding-left: 40px;\">4.1 &ndash; A  {Empresa_Nome}  declara, sob pena   de   responsabilidade   civil   e   criminal,   que   o   im&oacute;vel, descrito no item &ldquo;B&rdquo; do Quadro Resumo, se encontra   livre   e   desembara&ccedil;ado de   todo e   qualquer   &ocirc;nus   real, judicial ou extrajudicial, que sobre o im&oacute;vel n&atilde;o   h&aacute;   d&eacute;bitos   relativos a   taxas,   tributos,   tarifas   ou contribui&ccedil;&otilde;es, bem como que inexistem a&ccedil;&otilde;es reais e pessoais reipersecut&oacute;rias,   relativas   ao   im&oacute;vel,   e   outros   &ocirc;nus   reais incidentes sobre o mesmo.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA QUINTA &ndash; DO PRE&Ccedil;O E DA FORMA DE PAGAMENTO:</p>\r\n<p style=\"padding-left: 40px;\">5.1 &ndash; O pre&ccedil;o total da presente promessa de compra e venda corresponde ao valor informado no item &ldquo;F.1&rdquo;</p>\r\n<p style=\"padding-left: 40px;\">do Quadro Resumo, cujo valor ser&aacute; pago em moeda corrente nacional da seguinte maneira:</p>\r\n<p style=\"padding-left: 40px;\">5.1.1 &ndash; No ato da assinatura do presente instrumento, a t&iacute;tulo de entrada (sinal) e princ&iacute;pio de pagamento, o  {Cliente_Nome}  pagou &agrave;  {Empresa_Nome}  o   valor   informado   n o   item   &ldquo;F.2&rdquo;   do   Quadro Resumo, por cujo recebimento a    {Empresa_Nome}  d&aacute; ao  {Cliente_Nome}  a   mais plena, rasa, geral e irrevog&aacute;vel quita&ccedil;&atilde;o.<br />5.1.2 &ndash; O saldo devedor, que corresponde ao valor informado no item &ldquo;F.3&rdquo; do Quadro Resumo, ser&aacute; pago no n&uacute;mero de parcelas, mensais e sucessivas, informado no item &ldquo;F.4&rdquo; do Quadro Resumo, vencendo a primeira parcela, com o valor informado no item &ldquo;F.5&rdquo; do Quadro Resumo, na data informada no item &ldquo;F.6&rdquo; do Quadro Resumo, e as demais no mesmo dia dos meses subsequentes, cujo pagamento se dar&aacute; no local informado no item &ldquo;F.8&rdquo; do Quadro Resumo.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA SEXTA &ndash; DO ENCARGO MENSAL:</p>\r\n<p style=\"padding-left: 40px;\">6.1 &ndash; O encargo mensal &eacute; composto pela parcela de Amortiza&ccedil;&atilde;o e Juros remunerat&oacute;rios, com pagamento at&eacute; a data do vencimento independentemente de aviso ou notifica&ccedil;&atilde;o e, se n&atilde;o existir o dia do vencimento nos meses subsequentes, a obriga&ccedil;&atilde;o vencer&aacute; no &uacute;ltimo dia daqueles meses e, se for em dia n&atilde;o &uacute;til, o pagamento dever&aacute; ser realizado no primeiro dia &uacute;til subsequente, sem acr&eacute;scimo.<br />6.2 &ndash; As parcelas de amortiza&ccedil;&atilde;o e juros remunerat&oacute;rios s&atilde;o recalculadas anualmente, na data de anivers&aacute;rio do contrato, sendo as de Amortiza&ccedil;&atilde;o atualizadas pelo &iacute;ndice estabelecido no item &ldquo;G.1&rdquo; do Quadro Resumo divulgado no m&ecirc;s anterior &agrave; atualiza&ccedil;&atilde;o e na forma da cl&aacute;usula s&eacute;tima, e as de juros remunerat&oacute;rios pela aplica&ccedil;&atilde;o da taxa de juros mensal prevista no item &ldquo;I.1&rdquo; do Quadro Resumo com base no saldo devedor atualizado.<br />6.3 &ndash; Fica assegurado ao  {Cliente_Nome}  o direito a 10% de desconto sobre o valor mensal da presta&ccedil;&atilde;o caso efetue o pagamento at&eacute; a data do vencimento e desde que mantenha atualizado seus meios de contato pessoal.<br />6.4 &ndash; Os encargos mensais ser&atilde;o pagos exclusivamente atrav&eacute;s de boletos banc&aacute;rios emitidos pela empresa Administradora respons&aacute;vel pelo contrato {Empresa_Nome} , inscrita no CNPJ sob o n&ordm; {Empresa_CpfCnpj} , com sede &agrave; endere&ccedil;o completo, CEP {Empresa_Cep} . O boleto banc&aacute;rio poder&aacute; ser obtido atrav&eacute;s dos canais de atendimento e dos seguintes meios de comunica&ccedil;&atilde;o: a) Telefone: {Cliente_Telefone} ; b) Endere&ccedil;o eletr&ocirc;nico:  {Cliente_Email} ; c) P&aacute;gina da internet para acesso &agrave; &aacute;rea restrita do sistema de controle deste contrato: https://scae.adm.br, cujo acesso se dar&aacute; inserindo como login: o e-mail cadastrado pelo  {Cliente_Nome}  e senha de acesso: n&uacute;mero do CPF do primeiro  {Cliente_Nome} .<br />6.5 &ndash; &Eacute; dever do  {Cliente_Nome}  certificar-se diretamente com a Administradora respons&aacute;vel pelo contrato a autenticidade de eventual comunica&ccedil;&atilde;o recebida acerca de mudan&ccedil;a de forma de pagamento, pagamentos n&atilde;o previstos neste contrato ou qualquer forma de comunica&ccedil;&atilde;o suspeita. A Administradora n&atilde;o se responsabilizar&aacute; por pagamentos feitos a terceiros por meio fraudulentos.<br />6.6 &ndash; Se obriga tamb&eacute;m o  {Cliente_Nome}  a remeter imediatamente quaisquer documentos por ele recebido que tenha como destinat&aacute;rio a  {Empresa_Nome}  ou a Administradora, sob pena de n&atilde;o o fazendo, arcar com todos os danos e &ocirc;nus decorrentes do ato.<br />6.7 &ndash; A quita&ccedil;&atilde;o do pagamento dos encargos mensais ficar&aacute; condicionada &agrave; comprova&ccedil;&atilde;o da compensa&ccedil;&atilde;o dos boletos, ou a confirma&ccedil;&atilde;o da transfer&ecirc;ncia banc&aacute;ria, ou qualquer outro meio de pagamento que porventura venha a ser disponibilizado pela  {Empresa_Nome} .</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA S&Eacute;TIMA &ndash; DA ATUALIZA&Ccedil;&Atilde;O DO SALDO DEVEDOR:</p>\r\n<p style=\"padding-left: 40px;\">7.1 &ndash; A atualiza&ccedil;&atilde;o do saldo devedor ocorrer&aacute; anualmente, na data de anivers&aacute;rio do contrato, pelo &iacute;ndice estabelecido</p>\r\n<p style=\"padding-left: 40px;\">no item &ldquo;G.1&rdquo; do Quadro Resumo, divulgado no m&ecirc;s anterior &agrave; atualiza&ccedil;&atilde;o.</p>\r\n<p style=\"padding-left: 40px;\">7.2 &ndash; Na data de vencimento do &uacute;ltimo encargo mensal, eventual saldo devedor residual dever&aacute; ser pago pelo  {Cliente_Nome} .</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA OITAVA &ndash; DO &Iacute;NDICE DE ATUALIZA&Ccedil;&Atilde;O:</p>\r\n<p style=\"padding-left: 40px;\">8.1 &ndash; A parcela de amortiza&ccedil;&atilde;o e o saldo devedor ser&atilde;o atualizados anualmente conforme a varia&ccedil;&atilde;o positiva acumulada no &iacute;ndice oficial do governo que melhor reflita a infla&ccedil;&atilde;o, sendo determinado pelas partes que a corre&ccedil;&atilde;o se far&aacute; pelo {Indice} , ou na sua falta o ________________ , ou na sua falta, outro &iacute;ndice de infla&ccedil;&atilde;o do Brasil que o substituir ou o que for determinado em legisla&ccedil;&atilde;o espec&iacute;fica, a ser escolhido pela  {Empresa_Nome} . N&atilde;o ser&atilde;o aplicadas varia&ccedil;&otilde;es negativas de corre&ccedil;&atilde;o.<br />8.2 &ndash; Na apura&ccedil;&atilde;o do saldo devedor para qualquer evento ser&aacute; aplicada a atualiza&ccedil;&atilde;o proporcional, pro rata die, no per&iacute;odo entre a data de anivers&aacute;rio do contrato ou a data da &uacute;ltima atualiza&ccedil;&atilde;o contratual do saldo devedor, se ocorrida ap&oacute;s o &uacute;ltimo anivers&aacute;rio do contrato, inclusive e a data do evento, exclusive.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA NONA &ndash; DO SISTEMA DE AMORTIZA&Ccedil;&Atilde;O:</p>\r\n<p style=\"padding-left: 40px;\">9.1 &ndash; O sistema de amortiza&ccedil;&atilde;o adotado pelas partes no presente contrato ser&aacute; o {Tabela} , atrav&eacute;s do qual a amortiza&ccedil;&atilde;o do saldo devedor ser&aacute; constante e os juros ser&atilde;o calculados sobre o saldo devedor atualizado.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA D&Eacute;CIMA &ndash; DO INADIMPLEMENTO:</p>\r\n<p style=\"padding-left: 40px;\">10.1 &ndash; O atraso no pagamento de quaisquer dos encargos mensais, a partir do 1&deg; dia &uacute;til ap&oacute;s o vencimento, constituir&aacute; em mora o  {Cliente_Nome}  e acarretar&aacute; a perda do desconto previsto no item 6.3 da Cl&aacute;usula Sexta.<br />10.2 &ndash; A obriga&ccedil;&atilde;o em atraso ser&aacute; atualizada monetariamente pelo &iacute;ndice de atualiza&ccedil;&atilde;o do saldo devedor, proporcionalmente aos dias de atraso, da data de seu vencimento, inclusive, at&eacute; a do pagamento, exclusive. Sobre o valor atualizado incidir&atilde;o juros morat&oacute;rios e multa morat&oacute;ria na forma disposta nos itens abaixo:</p>\r\n<p style=\"padding-left: 40px;\">10.2.1 &ndash; Juros morat&oacute;rios &agrave; raz&atilde;o de {Juros_Moratorios} % ( {Juros_Moratorios_Extenso} ) por dia de atraso;</p>\r\n<p style=\"padding-left: 40px;\">10.2.2 &ndash; Multa morat&oacute;ria de {Multa_Moratorios} % ( {Multa_Moratorios_Extenso} ).</p>\r\n<p style=\"padding-left: 40px;\">10.3 &ndash; Eventual diferen&ccedil;a havida entre o valor pago e o valor devido no dia do pagamento do encargo mensal, dever&aacute; ser paga juntamente com o encargo mensal subsequente, do contr&aacute;rio, n&atilde;o exonera o  {Cliente_Nome} , da responsabilidade de liquidar tal obriga&ccedil;&atilde;o que ficar&aacute; constitu&iacute;do em mora para todos os efeitos legais e contratuais.<br />10.4 &ndash; Ocorrendo mais de um encargo vencido e n&atilde;o pago, o pagamento do &uacute;ltimo encargo n&atilde;o presume quita&ccedil;&atilde;o do(s) anterior(es).<br />10.5 &ndash; No ajuizamento de a&ccedil;&atilde;o para cobran&ccedil;a dos d&eacute;bitos em atraso ou liquida&ccedil;&atilde;o de obriga&ccedil;&otilde;es vencidas incidir&aacute;, al&eacute;m dos encargos acima referidos, cobran&ccedil;a de honor&aacute;rios de advogados nos termos do artigo 395 do C&oacute;digo Civil.<br />11 &ndash; CL&Aacute;USULA D&Eacute;CIMA PRIMEIRA &ndash; DA CONSTITUI&Ccedil;&Atilde;O EM MORA DO  {Cliente_Nome} :</p>\r\n<p style=\"padding-left: 40px;\">11.1 &ndash; Vencida e n&atilde;o pago o encargo mensal, o contrato ser&aacute; considerado rescindido 30 (trinta) dias depois de constitu&iacute;do em mora  {Cliente_Nome} .<br /><span style=\"font-weight: 400;\">&sect;</span>1&deg; Para os fins desta cl&aacute;usula o  {Cliente_Nome}  ser&aacute; intimado, a requerimento da  {Empresa_Nome} , pelo Oficial do Registro de Im&oacute;veis, a   satisfazer   os   encargos   mensais   vencidos   e   os   que   se vencerem at&eacute; a data do pagamento, os juros e multas convencionados e as custas de intima&ccedil;&atilde;o.<br /><span style=\"font-weight: 400;\">&sect;</span>2&deg; Purgada a mora, convalescer&aacute; o contrato.</p>\r\n<p style=\"padding-left: 40px;\"><span style=\"font-weight: 400;\">&sect;</span>3&deg; Com a certid&atilde;o de n&atilde;o haver sido feito o pagamento em cart&oacute;rio, o   PROMITENTE VENDEDOR requerer&aacute; ao Oficial do Registro o cancelamento da averba&ccedil;&atilde;o.<br />12 &ndash; CL&Aacute;USULA D&Eacute;CIMA SEGUNDA &ndash; DA RESOLU&Ccedil;&Atilde;O CONTRATUAL MOTIVADA POR INADIMPLEMENTO DE OBRIGA&Ccedil;&Otilde;ES DA  {Empresa_Nome} :<br />12.1 &ndash; Em caso de resolu&ccedil;&atilde;o contratual por inadimplemento de   obriga&ccedil;&atilde;o   do   PROMITENTE   VENDEDOR,   os valores pagos por este contrato ser&atilde;o restitu&iacute;dos, com   a   dedu&ccedil;&atilde;o   dos   valores   correspondentes   &agrave;   frui&ccedil;&atilde;o   do im&oacute;vel, equivalente a   0,75% (setenta e cinco cent&eacute;simos   por   cento)   sobre o valor   atualizado do contrato, cujo prazo ser&aacute; contado a partir da data da transmiss&atilde;o da posse do im&oacute;vel ao  {Cliente_Nome}  at&eacute; sua restitui&ccedil;&atilde;o a  {Empresa_Nome} . O pagamento da restitui&ccedil;&atilde;o   ocorrer&aacute;   em at&eacute;   12 (doze) parcelas mensais, com in&iacute;cio ap&oacute;s a formaliza&ccedil;&atilde;o da rescis&atilde;o contratual.<br />12.2 &ndash; As benfeitorias necess&aacute;rias   ou   uteis   realizadas   no   im&oacute;vel dever&atilde;o   ser   indenizadas,   salvo   as realizadas em desconformidade com o contrato ou a lei.<br />13 &ndash; CL&Aacute;USULA D&Eacute;CIMA TERCEIRA &ndash; DO DISTRATO E DA RESOLU&Ccedil;&Atilde;O CONTRATUAL MOTIVADA POR INADIMPLEMENTO DE OBRIGA&Ccedil;&Otilde;ES DO  {Cliente_Nome} :<br />13.1 &ndash; N&atilde;o obstante o   car&aacute;ter   de   irrevogabilidade   e   irretratabilidade,   o   presente   contrato   poder&aacute;   ser distratado pelas   partes   mediante   comum acordo,   bem   como poder&aacute;   ser   desfeito   mediante resolu&ccedil;&atilde;o contratual por inadimplemento de obriga&ccedil;&otilde;es   do    {Cliente_Nome} ,   sendo,   em   ambos   os   casos,   aplicado   as penalidades e prazos abaixo.<br />13.2 &ndash; Em caso de resolu&ccedil;&atilde;o   contratual   por   fato   imputado   ao    {Cliente_Nome} ,   respeitado   o disposto no &sect; 2&ordm; deste item, dever&atilde;o ser restitu&iacute;dos os valores pagos por ele, atualizados com base no &iacute;ndice contratualmente estabelecido para a corre&ccedil;&atilde;o monet&aacute;ria das parcelas   do   pre&ccedil;o   do   im&oacute;vel,   podendo   ser descontados dos valores pagos os seguintes itens:</p>\r\n<p style=\"padding-left: 40px;\">a) Os valores correspondentes &agrave; eventual frui&ccedil;&atilde;o do im&oacute;vel, at&eacute; o   equivalente   a   0,75%   (setenta   e   cinco cent&eacute;simos por cento) sobre o valor atualizado do contrato, cujo prazo ser&aacute; contado a   partir   da   data   da transmiss&atilde;o da posse do im&oacute;vel ao  {Cliente_Nome}  at&eacute; sua restitui&ccedil;&atilde;o a  {Empresa_Nome} ;<br />b) O montante devido por cl&aacute;usula penal e   despesas   administrativas,   inclusive arras ou   sinal, limitado a   um desconto de 10% (dez por cento) do valor atualizado do contrato;<br />c) Os encargos morat&oacute;rios relativos &agrave;s presta&ccedil;&otilde;es pagas em atraso pelo  {Cliente_Nome} ;</p>\r\n<p style=\"padding-left: 40px;\"><br />d) Os d&eacute;bitos de impostos sobre a propriedade predial   e territorial urbana,   taxas e   tarifas   vinculadas ao im&oacute;vel, bem como tributos, custas e emolumentos incidentes sobre a restitui&ccedil;&atilde;o e/ou rescis&atilde;o;<br />e) A comiss&atilde;o de corretagem, desde que integrada ao pre&ccedil;o do lote.</p>\r\n<p style=\"padding-left: 40px;\"><br /><span style=\"font-weight: 400;\">&sect;</span>1&deg; O pagamento da restitui&ccedil;&atilde;o ocorrer&aacute; em at&eacute; 12 (doze) parcelas mensais, com in&iacute;cio ap&oacute;s o prazo de car&ecirc;ncia de 12 meses ap&oacute;s a formaliza&ccedil;&atilde;o da rescis&atilde;o contratual.<br /><span style=\"font-weight: 400;\">&sect;</span>2&deg; Somente ser&aacute; efetuado registro   do contrato de nova venda   se   for   comprovado   o   in&iacute;cio   da   restitui&ccedil;&atilde;o   do valor pago pelo vendedor ao titular do   registro   cancelado   na   forma   e   condi&ccedil;&otilde;es   pactuadas   no   distrato, dispensada essa comprova&ccedil;&atilde;o nos casos em que o   adquirente   n&atilde;o   for   localizado   ou   n&atilde;o   tiver   se   manifestado, nos termos do art. 32 desta Lei.<br />13.3 &ndash; Se a  {Empresa_Nome} , credor das presta&ccedil;&otilde;es, se recusar receb&ecirc;-las ou furtar-se ao seu recebimento, ser&aacute; constitu&iacute;do   em mora   mediante   notifica&ccedil;&atilde;o   do Oficial do   Registro   de   Im&oacute;veis para   vir   receber as import&acirc;ncias depositadas pelo  {Cliente_Nome}    no   pr&oacute;prio   Registro   de   Im&oacute;veis.   Decorridos   15 (quinze) dias ap&oacute;s o recebimento da intima&ccedil;&atilde;o, considerar -se-&aacute; efetuado o   pagamento,   a   menos   que   a  {Empresa_Nome}    impugne   o   dep&oacute;sito   e,   alegando   inadimplemento   do    {Cliente_Nome} , requeira a intima&ccedil;&atilde;o deste para os fins do disposto no art. 32 desta Lei n&deg; 6.766/79 .<br />13.4 &ndash; Em qualquer caso de rescis&atilde;o por inadimplemento do  {Cliente_Nome} ,   as   benfeitorias necess&aacute;rias ou &uacute;teis por ele levadas a efeito no   im&oacute;vel   dever&atilde;o   ser   indenizadas,   sendo   de   nenhum   efeito qualquer disposi&ccedil;&atilde;o contratual em contr&aacute;rio.<br /><span style=\"font-weight: 400;\">&sect;</span>1&ordm; N&atilde;o ser&atilde;o indenizadas as benfeitorias feitas em desconformidade com o contrato ou com a lei.</p>\r\n<p style=\"padding-left: 40px;\"><span style=\"font-weight: 400;\">&sect;</span>2&deg; No prazo de 60 (sessenta) dias, contado da constitui&ccedil;&atilde;o em mora,   fica   a    {Empresa_Nome} ,   na hip&oacute;tese do caput desta cl&aacute;usula,   obrigada   a   alienar   o   im&oacute;vel   mediante   leil&atilde;o   judicial   ou   extrajudicial,   nos termos da Lei n&ordm; 9.514, de 20 de novembro de 1997.<br />13.5 &ndash; Se ocorrer o cancelamento do registro por inadimplemento do contrato, e tiver   sido   realizado   o pagamento de mais de 1/3 (um ter&ccedil;o) do pre&ccedil;o ajustado, o oficial do registro de im&oacute;veis mencionar&aacute; esse fato e a quantia paga no ato do cancelamento, e   somente   ser&aacute;   efetuado   novo   registro   relativo   ao   mesmo   lote, mediante apresenta&ccedil;&atilde;o do distrato assinado pelas partes e a comprova&ccedil;&atilde;o do pagamento da parcela &uacute;nica ou da primeira parcela do montante a ser restitu&iacute;do ao  {Cliente_Nome} , na forma do art. 32 -A da Lei n&deg; 6.766/79, ao titular do registro cancelado, ou mediante dep&oacute;sito em dinheiro &agrave; sua disposi&ccedil;&atilde;o   no registro   de im&oacute;veis.</p>\r\n<p style=\"padding-left: 40px;\"><span style=\"font-weight: 400;\">&sect;</span>1&ordm; Ocorrendo o dep&oacute;sito a que se refere este artigo, o Oficial do Registro de Im&oacute;veis intimar&aacute; o interessado para vir receb&ecirc;-lo no prazo de 10 (dez) dias, sob pena de ser devolvido ao depositante.<br /><span style=\"font-weight: 400;\">&sect;</span>2&ordm; No caso de n&atilde;o se encontrado o interessado, o Oficial do Registro de Im&oacute;veis deposita r&aacute; quantia em estabelecimento de   cr&eacute;dito, segundo a   ordem prevista   no inciso I do art. 666 do C&oacute;digo de   Processo Civil, em conta com incid&ecirc;ncia de juros e corre&ccedil;&atilde;o monet&aacute;ria.<br /><span style=\"font-weight: 400;\">&sect;</span>3&ordm; A obriga&ccedil;&atilde;o de comprova&ccedil;&atilde;o pr&eacute;via de pagamento da parcela &uacute;nica ou da primeir a parcela como condi&ccedil;&atilde;o para efetiva&ccedil;&atilde;o de novo registro, prevista no caput desta cl&aacute;usula, poder&aacute; ser dispensada se as   partes convencionarem de modo diverso e de forma expressa no documento de distrato por elas assinado.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA D&Eacute;CIMA QUARTA &ndash; DA CORRETAGEM:</p>\r\n<p style=\"padding-left: 40px;\">14.1 &ndash; No ato da assinatura do presente   instrumento,   em   pagamento   ao   Servi&ccedil;o   de   Corretagem,   o  {Cliente_Nome}  pagou ao CORRETOR, qualificado no item &ldquo;A.3&rdquo; do Quadro   Resumo,   doravante denominado CORRETOR, o valor informado   no item &ldquo;K.1&rdquo; do   Quadro  Resumo, por   cujo recebimento o CORRETOR d&aacute; ao  {Cliente_Nome}  a mais plena, rasa, geral e irrevog&aacute;vel quita&ccedil;&atilde;o.</p>\r\n<p style=\"padding-left: 40px;\">15 &ndash; CL&Aacute;USULA D&Eacute;CIMA QUINTA &ndash; DAS RESTRI&Ccedil;&Otilde;ES URBAN&Iacute;STICAS CONVENCIONAIS DO   LOTEAMENTO, SUPLETIVAS DA LEGISLA&Ccedil;&Atilde;O PERTINENTE:<br />15.1 &ndash; O  {Cliente_Nome}  somente poder&aacute; fazer edifica&ccedil;&otilde;es no   im&oacute;vel   ap&oacute;s   a   aprova&ccedil;&atilde;o   pela Prefeitura Municipal e somente se iniciar&atilde;o obras com o devido   alvar&aacute;   de   licen&ccedil;a   para   a   constru&ccedil;&atilde;o,   a   qual dever&aacute; respeitar   as   condi&ccedil;&otilde;es   previstas   na   Licen&ccedil;a   Ambiental   de   Instala&ccedil;&atilde;o   do   Loteamento   n&ordm;    {Lote_Matricula} , emitida pela Prefeitura Municipal   de {Lote_Municipio} &ndash; {Lote_Sigla_Estado} , de ___/___/___ , &agrave;   qual   estabelece   serem obriga&ccedil;&otilde;es dos PROMITENTES COMPRADORES:<br />a) Condi&ccedil;&atilde;o a;<br />b) Condi&ccedil;&atilde;o b;<br />c) Condi&ccedil;&atilde;o c;<br />d) Condi&ccedil;&atilde;o d;<br /><span style=\"font-weight: 400;\">&sect;</span>1&deg; Al&eacute;m de aprova&ccedil;&atilde;o e licen&ccedil;a de obras, pela qual as constru&ccedil;&otilde;es devem atender &agrave;s exig&ecirc;ncias do Munic&iacute;pio, o  {Cliente_Nome}  se compromete ainda, &agrave;s suas expensas, realizar constru&ccedil;&otilde;es atendendo os seguintes requisitos:<br />a) Sugest&atilde;o a: Projeto aprovado pela Prefeitura Municipal de {Lote_Municipio} &ndash; {Lote_Sigla_Estado} , com devida licen&ccedil;a de obras;b) Sugest&atilde;o b: Ser em alvenaria com embo&ccedil;o, cobertura   de telha ou   laje,   em cimento armado,   com &aacute;rea constru&iacute;da m&iacute;nima de 45,00m&sup2;;<br />c) Sugest&atilde;o c: Ter instalado um reservat&oacute;rio   de no   m&iacute;nimo   2.000 litros e caixa d&rsquo;&aacute;gua;  <br />d) Sugest&atilde;o d: Ter   instalado fossa   s&eacute;ptica ou caixa de absor&ccedil;&atilde;o antes de ser feita a liga&ccedil;&atilde;o &agrave; rede da rua, liga&ccedil;&atilde;o essa feita com materiais de boa qualidade e de acordo com as orienta&ccedil;&otilde;es da empresa.<br />15.2 &ndash; Nenhuma responsabilidade caber&aacute; a  {Empresa_Nome}  no caso de quaisquer san&ccedil;&otilde;es   das autoridades competentes em raz&atilde;o da inobserv&acirc;ncia das normas pertinentes.   O    {Cliente_Nome}  responder&aacute; ainda pelos preju&iacute;zos das constru&ccedil;&otilde;es irregulares, mal planejadas ou mal executadas que realizar.<br />15.3 &ndash; O  {Cliente_Nome}  ficar&aacute; respons&aacute;vel civil e criminalmente caso promova   a   destrui&ccedil;&atilde;o, aproprie-se indevidamente ou fa&ccedil;a mau uso dos equipamentos urbanos implantados no empreendimento.<br />15.4 &ndash; O  {Cliente_Nome}  n&atilde;o poder&aacute;, sobre qualquer pretexto, fazer nem permitir que se fa&ccedil;a no im&oacute;vel, escava&ccedil;&otilde;es e trabalhos de olaria, nem tirar   argila   ou ar eia ou   similares,   obrigando-se a us&aacute;-lo   para   fins que n&atilde;o venham prejudicar   o   bem-estar,   o   sossego   da   vizinhan&ccedil;a,   ou   meio   ambiente,   sendo   ainda expressamente proibido: a cria&ccedil;&atilde;o de gado ou animais de grande porte no im&oacute;vel; a constru&ccedil;&atilde;o de barracos de madeira,   para   quaisquer   fins,   est&aacute;bulos,   currais   ou   semelhantes;   e    armazenamento   de    material   inflam&aacute;vel, t&oacute;xico ou explosivo</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA D&Eacute;CIMA SEXTA &ndash; DO DIREITO DE ARREPENDIMENTO:</p>\r\n<p style=\"padding-left: 40px;\">16.1 &ndash; Caso o contrato seja firmado em estandes de vendas e fora da sede da  {Empresa_Nome}  ou do seu estabelecimento comercial, o    {Cliente_Nome}    poder&aacute;,   no   prazo   de   07   (sete)   dias   contados   da data de assinatura deste contrato,   exercer   o   seu   direito   de   arrependimento,   requerendo   a   desist&ecirc;ncia   do presente contrato, por escrito, atrav&eacute;s de e-mail encaminhado para o endere&ccedil;o eletr&ocirc;nico {Empresa_Email} , ficando acordado que o valor eventualmente pago pelo  {Cliente_Nome} , em raz&atilde;o do presente contrato, a t&iacute;tulo de entrada   (sinal) e corretagem ser&atilde;o devolvidos no prazo de at&eacute; 30 dias corridos.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA D&Eacute;CIMA S&Eacute;TIMA &ndash; DA OBRIGA&Ccedil;&Atilde;O PELO PAGAMENTO DOS IMPOSTOS E TAXAS INCIDENTES SOBRE O LOTE:</p>\r\n<p style=\"padding-left: 40px;\">17.1 &ndash; Os tributos, impostos, tarifas e taxas incidentes sobre o im&oacute;vel anteriormente &agrave; data deste contrato ser&aacute; de responsabilidade da  {Empresa_Nome} .<br />17.2 &ndash; Os tributos, impostos, tarifas e taxas incidentes sobre o im&oacute;vel posteriormente &agrave; data deste contrato ser&aacute; de responsabilidade do  {Cliente_Nome} , que se compromete a pag&aacute;-los em dia, sem multa, mesmo em nome da  {Empresa_Nome} , podendo a  {Empresa_Nome}  exigir comprova&ccedil;&atilde;o.<br />17.3 &ndash; O atraso no pagamento dos impostos, poder&aacute; ensejar no vencimento antecipado da d&iacute;vida ou no pagamento pela  {Empresa_Nome} , para posterior reembolso pelo  {Cliente_Nome} , atualizados monetariamente e acrescidos de juros morat&oacute;rios na forma da cl&aacute;usula 10.2.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA D&Eacute;CIMA OITAVA &ndash; DA AMORTIZA&Ccedil;&Atilde;O EXTRAORDIN&Aacute;RIA</p>\r\n<p style=\"padding-left: 40px;\">18.1 &ndash; Fica assegurado ao  {Cliente_Nome} , a qualquer tempo, efetuar amortiza&ccedil;&otilde;es extraordin&aacute;rias para redu&ccedil;&atilde;o do valor dos encargos mensais ou do prazo do financiamento, sendo o abatimento da amortiza&ccedil;&atilde;o precedido da cobran&ccedil;a de juros remunerat&oacute;rios.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA D&Eacute;CIMA NONA &ndash; DA LIQUIDA&Ccedil;&Atilde;O ANTECIPADA</p>\r\n<p style=\"padding-left: 40px;\">19.1 &ndash; Fica assegurado ao {Cliente_Nome} , a qualquer tempo, efetuar a liquida&ccedil;&atilde;o antecipada da d&iacute;vida apurada pelo saldo devedor atualizado, acrescido de juros remunerat&oacute;rios.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA VIG&Eacute;SIMA &ndash; DO VENCIMENTO ANTECIPADO DA D&Iacute;VIDA:</p>\r\n<p style=\"padding-left: 40px;\">20.1 &ndash; Ocorrer&aacute; o vencimento antecipado na d&iacute;vida nas seguintes hip&oacute;teses:</p>\r\n<p style=\"padding-left: 40px;\">a) Atraso a partir de 30 (trinta) dias no pagamento das obriga&ccedil;&otilde;es ou n&atilde;o pagamento dos tributos incidentes sobre o im&oacute;vel;</p>\r\n<p style=\"padding-left: 40px;\">b) Transfer&ecirc;ncia ou cess&atilde;o a terceiros, dos direitos e obriga&ccedil;&otilde;es deste contrato, sem autoriza&ccedil;&atilde;o da  {Empresa_Nome} </p>\r\n<p style=\"padding-left: 40px;\">c) Descumprimento das obriga&ccedil;&otilde;es estipuladas em lei ou neste contrato.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA VIG&Eacute;SIMA PRIMEIRA &ndash; DA CESS&Atilde;O OU TRANSFER&Ecirc;NCIA:</p>\r\n<p style=\"padding-left: 40px;\">21.1 &ndash; O   presente   contrato   particular pode   ser   transferido por   simples   trespasse,   lan&ccedil;ado no   verso   das vias em poder das partes, ou por   instrumento em   separado,   declarando-se o   n&uacute;mero do registro do   loteamento, o valor da cess&atilde;o e a qualifica&ccedil;&atilde;o do cession&aacute;rio, para o devido registro, desde que quitado o im&oacute;vel.<br />21.1.1 &ndash; A cess&atilde;o independe da anu&ecirc;ncia da  {Empresa_Nome} ,   mas,   em rela&ccedil;&atilde;o a esta,   seus   efeitos   somente    se produzem depois de cientificada, por escrito, pelas partes ou quando registrada a cess&atilde;o.<br />21.1.2 &ndash; Uma vez registrada a cess&atilde;o, feita sem anu&ecirc;ncia da   {Empresa_Nome} , o Oficial do Registro dar-lhe-&aacute; ci&ecirc;ncia, por escrito, dentro de 10 (dez) dias.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA VIG&Eacute;SIMA SEGUNDA &ndash; DA ESCRITURA DEFINITIVA:</p>\r\n<p style=\"padding-left: 40px;\">22.1 &ndash; No prazo m&aacute;ximo de 180 (cento e oitenta) dias ap&oacute;s o  {Cliente_Nome}  ter quitado o saldo devedor, ter&aacute; de providenciar a escritura definitiva, sendo que todas as despesas correr&atilde;o por conta do  {Cliente_Nome} , assim como todas as demais despesas decorrentes deste contrato, do Imposto de Transmiss&atilde;o, das averba&ccedil;&otilde;es, transcri&ccedil;&otilde;es, certid&otilde;es negativas, al&eacute;m de outras. Ap&oacute;s esse prazo, cessam as responsabilidades da Administradora referentes a este contrato.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA VIG&Eacute;SIMA TERCEIRA &ndash; DA COMUNICA&Ccedil;&Atilde;O ENTRE AS PARTES:</p>\r\n<p style=\"padding-left: 40px;\">23.1 &ndash; A  {Empresa_Nome}  e o  {Cliente_Nome}  convencionam e mutuamente consentem que a comunica&ccedil;&atilde;o entre os mesmos ser&aacute; feita atrav&eacute;s da Administradora, acima qualificada, unicamente atrav&eacute;s dos canais de comunica&ccedil;&atilde;o por acima informados. Convencionam ainda que a comunica&ccedil;&atilde;o da  {Empresa_Nome}  com o  {Cliente_Nome}  poder&aacute; ser feita atrav&eacute;s do endere&ccedil;o postal, endere&ccedil;o eletr&ocirc;nico ou n&uacute;mero telef&ocirc;nico fornecido neste contrato.<br />23.2 &ndash; Para todos os efeitos do presente contrato, ser&aacute; considerada v&aacute;lida toda comunica&ccedil;&atilde;o realizada via postal ao endere&ccedil;o postal acima fornecido, ou enviada de forma eletr&ocirc;nica para o endere&ccedil;o eletr&ocirc;nico acima fornecido, ou ainda para o telefone acima fornecido atrav&eacute;s de mensagem de texto e/ou por aplicativos utilizados para comunica&ccedil;&atilde;o.<br />23.3 &ndash; O  {Cliente_Nome}  se obriga a comunicar imediatamente qualquer mudan&ccedil;a de endere&ccedil;o postal, endere&ccedil;o eletr&ocirc;nico ou telefone de contato &agrave; Administradora, at&eacute; a final liquida&ccedil;&atilde;o deste contrato, sob pena de valer qualquer aviso, notifica&ccedil;&atilde;o ou cobran&ccedil;a enviada por qualquer dos canais de comunica&ccedil;&atilde;o informados.<br />23.4 &ndash; A comunica&ccedil;&atilde;o deve ser feita de forma inequ&iacute;voca (atrav&eacute;s de identifica&ccedil;&atilde;o completa de nome, CPF e im&oacute;vel), atrav&eacute;s dos canais mencionados, ou atrav&eacute;s de altera&ccedil;&atilde;o dos dados pessoais do  {Cliente_Nome} , na sua &aacute;rea restrita, dentro do sistema de controle desse contrato mencionado no item 6.4 da cl&aacute;usula sexta deste contrato.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA VIG&Eacute;SIMA QUARTA &ndash; DA POL&Iacute;TICA DE PRIVACIDADE E PROTE&Ccedil;&Atilde;O DE DADOS:</p>\r\n<p style=\"padding-left: 40px;\">24.1 &ndash; A  {Empresa_Nome}  se compromete com o fiel cumprimento &agrave; Lei Geral de Prote&ccedil;&atilde;o de Dados Pessoais (Lei n&ordm; 13.853/2019), por conta da qual se obriga a respeitar a privacidade do  {Cliente_Nome}  protegendo e mantendo em sigilo todos os dados pessoais fornecidos em fun&ccedil;&atilde;o deste contrato, salvo os casos em que seja obrigado, por autoridades p&uacute;blicas, a revelar tais informa&ccedil;&otilde;es a terceiros.<br />24.2 &ndash; Nos termos do artigo 10&ordm;, inciso I, da Lei Geral de Prote&ccedil;&atilde;o de Dados Pessoais, a  {Empresa_Nome}  diretamente ou atrav&eacute;s de seus prepostos, ostenta leg&iacute;timo interesse em armazenar, acessar, avaliar, modificar, transferir e comunicar, sob qualquer forma e por tempo indeterminado, todos e quaisquer contratos, termos aditivos, e-mails, cartas, pe&ccedil;as processuais, e demais documenta&ccedil;&otilde;es relativas ao objeto desta contrata&ccedil;&atilde;o.<br />24.3 &ndash; O tratamento dos dados do  {Cliente_Nome} , somente poder&aacute; ser feito para os fins determinados em Lei, e para a fiel execu&ccedil;&atilde;o do presente contrato, e tais opera&ccedil;&otilde;es de tratamento de dados ser&atilde;o sempre realizadas em apoio e promo&ccedil;&atilde;o &agrave;s atividades t&eacute;cnicas e intelectuais desenvolvidas internamente pela  {Empresa_Nome} , em especial para fins de comprova&ccedil;&atilde;o e defesa do cumprimento regular do presente contrato.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA VIG&Eacute;SIMA QUINTA &ndash; DO CUMPRIMENTO DAS OBRIGA&Ccedil;&Otilde;ES CONTRATUAIS:</p>\r\n<p style=\"padding-left: 40px;\">25.1 &ndash; A toler&acirc;ncia pela  {Empresa_Nome}  no cumprimento das obriga&ccedil;&otilde;es contratuais n&atilde;o acarretar&aacute; o cancelamento das penalidades e poderes ora conferidos, que poder&atilde;o ser exercidos a qualquer tempo, sendo as obriga&ccedil;&otilde;es extensivas aos herdeiros/sucessores/cession&aacute;rios/promitentes cession&aacute;rios do  {Cliente_Nome} .</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA VIG&Eacute;SIMA SEXTA &ndash; DA NOVA&Ccedil;&Atilde;O:</p>\r\n<p style=\"padding-left: 40px;\">26.1 &ndash; Nenhuma toler&acirc;ncia   ou   concess&atilde;o   por   parte   da    {Empresa_Nome}    incorrer&aacute;   em   nova&ccedil;&atilde;o, prevalecendo assim, todas as Cl&aacute;usulas e condi&ccedil;&otilde;es do presente contrato, que se faz em car&aacute;ter irrevog&aacute;vel e obrigat&oacute;rio &agrave;s partes, seus herdeiros ou sucessores. A efic&aacute;cia do presente contrato &eacute; subordinada a condi&ccedil;&atilde;o do pagamento i ntegral do pre&ccedil;o.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA VIG&Eacute;SIMA S&Eacute;TIMA &ndash; DAS DISPOSI&Ccedil;&Otilde;ES FINAIS:</p>\r\n<p style=\"padding-left: 40px;\">27.1 &ndash; Fica acordado entre as partes que   em   hip&oacute;tese   alguma   a    {Empresa_Nome}    ser&aacute; respons&aacute;vel pela a&ccedil;&atilde;o, omiss&atilde;o ou neglig&ecirc;ncia por parte do Poder P&uacute;blico Constitu&iacute;do ou de terceiros, ainda que estes sejam clientes da empresa, na condi&ccedil;&atilde;o de Promitentes Compradores, bem como responder por perdas e   danos cujas causas n&atilde;o decorram direta ou indiretamente de sua a&ccedil;&atilde;o ou omiss&atilde;o.<br />27.2 &ndash; Caso a  {Empresa_Nome}  tenha que   recorrer   a   notifica&ccedil;&otilde;es,   cobran&ccedil;a   extrajudicial,   tribunal arbitral ou justi&ccedil;a para defesa de seus interesses,   todas   as   despesas   decorrentes   dessa   medida,   correr&atilde;o   por conta do  {Cliente_Nome} , inclusive honor&aacute;rios advocat&iacute;cios.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA VIG&Eacute;SIMA OITAVA - AQUIESC&Ecirc;NCIA DO CONTE&Uacute;DO CONTRATUAL:</p>\r\n<p style=\"padding-left: 40px;\">28.1 &ndash; Ap&oacute;s exame de todas as cl&aacute;usulas e condi&ccedil;&otilde;es do aludido contrato, as partes declaram aceit&aacute;-lo como redigido e que o mesmo se encontra de acordo com o que foi previamente pactuado.</p>\r\n<p style=\"padding-left: 40px;\">CL&Aacute;USULA VIG&Eacute;SIMA NONA &ndash; DO ELEI&Ccedil;&Atilde;O DE FORO:</p>\r\n<p style=\"padding-left: 40px;\">29.1 &ndash; Fica eleito o foro da comarca de {Lote_Municipio} &ndash; {Lote_Sigla_Estado} para dirimir quest&otilde;es decorrentes do presente contrato.</p>\r\n<p style=\"padding-left: 40px;\">E por estarem de acordo com os termos e condi&ccedil;&otilde;es deste contrato, as partes assinam o presente em 3 (tr&ecirc;s) vias com as testemunhas.</p>\r\n<p> </p>\r\n<p style=\"text-align: center;\"><br /> {Empresa_Estado}  - {Empresa_Sigla_Estado} , ___/___/___ </p>\r\n<p style=\"text-align: center;\"> </p>\r\n<p style=\"text-align: center;\">____________________________________________________________________</p>\r\n<p style=\"text-align: center;\"> {Empresa_Nome} </p>\r\n<p style=\"text-align: center;\"> </p>\r\n<p style=\"text-align: center;\">____________________________________________________________________</p>\r\n<p style=\"text-align: center;\"> {Cliente_Nome} </p>\r\n<p style=\"text-align: center;\"> </p>\r\n<p style=\"text-align: center;\">____________________________________________________________________</p>\r\n<p style=\"text-align: center;\"> {Cliente2_Nome} </p>\r\n<p> </p>\r\n<p style=\"padding-left: 40px;\"><strong>Testemunhas:</strong></p>\r\n<p style=\"padding-left: 40px;\"> </p>\r\n<p style=\"text-align: left; padding-left: 40px;\">______________________________________    ______________________________________</p>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n\r\n</body>\r\n</html>", true, "Modelo SCAE 1 - Compra e Venda", 1 });

            migrationBuilder.InsertData(
                schema: "geral",
                table: "municipio",
                columns: new[] { "Id", "EstadoId", "Nome" },
                values: new object[,]
                {
                    { 1100015, 11, "Alta Floresta DOeste" },
                    { 1100023, 11, "Ariquemes" },
                    { 1100031, 11, "Cabixi" },
                    { 1100049, 11, "Cacoal" },
                    { 1100056, 11, "Cerejeiras" },
                    { 1100064, 11, "Colorado do Oeste" },
                    { 1100072, 11, "Corumbiara" },
                    { 1100080, 11, "Costa Marques" },
                    { 1100098, 11, "Espigão DOeste" },
                    { 1100106, 11, "Guajará-Mirim" },
                    { 1100114, 11, "Jaru" },
                    { 1100122, 11, "Ji-Paraná" },
                    { 1100130, 11, "Machadinho DOeste" },
                    { 1100148, 11, "Nova Brasilândia DOeste" },
                    { 1100155, 11, "Ouro Preto do Oeste" },
                    { 1100189, 11, "Pimenta Bueno" },
                    { 1100205, 11, "Porto Velho" },
                    { 1100254, 11, "Presidente Médici" },
                    { 1100262, 11, "Rio Crespo" },
                    { 1100288, 11, "Rolim de Moura" },
                    { 1100296, 11, "Santa Luzia DOeste" },
                    { 1100304, 11, "Vilhena" },
                    { 1100320, 11, "São Miguel do Guaporé" },
                    { 1100338, 11, "Nova Mamoré" },
                    { 1100346, 11, "Alvorada DOeste" },
                    { 1100379, 11, "Alto Alegre dos Parecis" },
                    { 1100403, 11, "Alto Paraíso" },
                    { 1100452, 11, "Buritis" },
                    { 1100502, 11, "Novo Horizonte do Oeste" },
                    { 1100601, 11, "Cacaulândia" },
                    { 1100700, 11, "Campo Novo de Rondônia" },
                    { 1100809, 11, "Candeias do Jamari" },
                    { 1100908, 11, "Castanheiras" },
                    { 1100924, 11, "Chupinguaia" },
                    { 1100940, 11, "Cujubim" },
                    { 1101005, 11, "Governador Jorge Teixeira" },
                    { 1101104, 11, "Itapuã do Oeste" },
                    { 1101203, 11, "Ministro Andreazza" },
                    { 1101302, 11, "Mirante da Serra" },
                    { 1101401, 11, "Monte Negro" },
                    { 1101435, 11, "Nova União" },
                    { 1101450, 11, "Parecis" },
                    { 1101468, 11, "Pimenteiras do Oeste" },
                    { 1101476, 11, "Primavera de Rondônia" },
                    { 1101484, 11, "São Felipe DOeste" },
                    { 1101492, 11, "São Francisco do Guaporé" },
                    { 1101500, 11, "Seringueiras" },
                    { 1101559, 11, "Teixeirópolis" },
                    { 1101609, 11, "Theobroma" },
                    { 1101708, 11, "Urupá" },
                    { 1101757, 11, "Vale do Anari" },
                    { 1101807, 11, "Vale do Paraíso" },
                    { 1200013, 12, "Acrelândia" },
                    { 1200054, 12, "Assis Brasil" },
                    { 1200104, 12, "Brasiléia" },
                    { 1200138, 12, "Bujari" },
                    { 1200179, 12, "Capixaba" },
                    { 1200203, 12, "Cruzeiro do Sul" },
                    { 1200252, 12, "Epitaciolândia" },
                    { 1200302, 12, "Feijó" },
                    { 1200328, 12, "Jordão" },
                    { 1200336, 12, "Mâncio Lima" },
                    { 1200344, 12, "Manoel Urbano" },
                    { 1200351, 12, "Marechal Thaumaturgo" },
                    { 1200385, 12, "Plácido de Castro" },
                    { 1200393, 12, "Porto Walter" },
                    { 1200401, 12, "Rio Branco" },
                    { 1200427, 12, "Rodrigues Alves" },
                    { 1200435, 12, "Santa Rosa do Purus" },
                    { 1200450, 12, "Senador Guiomard" },
                    { 1200500, 12, "Sena Madureira" },
                    { 1200609, 12, "Tarauacá" },
                    { 1200708, 12, "Xapuri" },
                    { 1200807, 12, "Porto Acre" },
                    { 1300029, 13, "Alvarães" },
                    { 1300060, 13, "Amaturá" },
                    { 1300086, 13, "Anamã" },
                    { 1300102, 13, "Anori" },
                    { 1300144, 13, "Apuí" },
                    { 1300201, 13, "Atalaia do Norte" },
                    { 1300300, 13, "Autazes" },
                    { 1300409, 13, "Barcelos" },
                    { 1300508, 13, "Barreirinha" },
                    { 1300607, 13, "Benjamin Constant" },
                    { 1300631, 13, "Beruri" },
                    { 1300680, 13, "Boa Vista do Ramos" },
                    { 1300706, 13, "Boca do Acre" },
                    { 1300805, 13, "Borba" },
                    { 1300839, 13, "Caapiranga" },
                    { 1300904, 13, "Canutama" },
                    { 1301001, 13, "Carauari" },
                    { 1301100, 13, "Careiro" },
                    { 1301159, 13, "Careiro da Várzea" },
                    { 1301209, 13, "Coari" },
                    { 1301308, 13, "Codajás" },
                    { 1301407, 13, "Eirunepé" },
                    { 1301506, 13, "Envira" },
                    { 1301605, 13, "Fonte Boa" },
                    { 1301654, 13, "Guajará" },
                    { 1301704, 13, "Humaitá" },
                    { 1301803, 13, "Ipixuna" },
                    { 1301852, 13, "Iranduba" },
                    { 1301902, 13, "Itacoatiara" },
                    { 1301951, 13, "Itamarati" },
                    { 1302009, 13, "Itapiranga" },
                    { 1302108, 13, "Japurá" },
                    { 1302207, 13, "Juruá" },
                    { 1302306, 13, "Jutaí" },
                    { 1302405, 13, "Lábrea" },
                    { 1302504, 13, "Manacapuru" },
                    { 1302553, 13, "Manaquiri" },
                    { 1302603, 13, "Manaus" },
                    { 1302702, 13, "Manicoré" },
                    { 1302801, 13, "Maraã" },
                    { 1302900, 13, "Maués" },
                    { 1303007, 13, "Nhamundá" },
                    { 1303106, 13, "Nova Olinda do Norte" },
                    { 1303205, 13, "Novo Airão" },
                    { 1303304, 13, "Novo Aripuanã" },
                    { 1303403, 13, "Parintins" },
                    { 1303502, 13, "Pauini" },
                    { 1303536, 13, "Presidente Figueiredo" },
                    { 1303569, 13, "Rio Preto da Eva" },
                    { 1303601, 13, "Santa Isabel do Rio Negro" },
                    { 1303700, 13, "Santo Antônio do Içá" },
                    { 1303809, 13, "São Gabriel da Cachoeira" },
                    { 1303908, 13, "São Paulo de Olivença" },
                    { 1303957, 13, "São Sebastião do Uatumã" },
                    { 1304005, 13, "Silves" },
                    { 1304062, 13, "Tabatinga" },
                    { 1304104, 13, "Tapauá" },
                    { 1304203, 13, "Tefé" },
                    { 1304237, 13, "Tonantins" },
                    { 1304260, 13, "Uarini" },
                    { 1304302, 13, "Urucará" },
                    { 1304401, 13, "Urucurituba" },
                    { 1400027, 14, "Amajari" },
                    { 1400050, 14, "Alto Alegre" },
                    { 1400100, 14, "Boa Vista" },
                    { 1400159, 14, "Bonfim" },
                    { 1400175, 14, "Cantá" },
                    { 1400209, 14, "Caracaraí" },
                    { 1400233, 14, "Caroebe" },
                    { 1400282, 14, "Iracema" },
                    { 1400308, 14, "Mucajaí" },
                    { 1400407, 14, "Normandia" },
                    { 1400456, 14, "Pacaraima" },
                    { 1400472, 14, "Rorainópolis" },
                    { 1400506, 14, "São João da Baliza" },
                    { 1400605, 14, "São Luiz" },
                    { 1400704, 14, "Uiramutã" },
                    { 1500107, 15, "Abaetetuba" },
                    { 1500131, 15, "Abel Figueiredo" },
                    { 1500206, 15, "Acará" },
                    { 1500305, 15, "Afuá" },
                    { 1500347, 15, "Água Azul do Norte" },
                    { 1500404, 15, "Alenquer" },
                    { 1500503, 15, "Almeirim" },
                    { 1500602, 15, "Altamira" },
                    { 1500701, 15, "Anajás" },
                    { 1500800, 15, "Ananindeua" },
                    { 1500859, 15, "Anapu" },
                    { 1500909, 15, "Augusto Corrêa" },
                    { 1500958, 15, "Aurora do Pará" },
                    { 1501006, 15, "Aveiro" },
                    { 1501105, 15, "Bagre" },
                    { 1501204, 15, "Baião" },
                    { 1501253, 15, "Bannach" },
                    { 1501303, 15, "Barcarena" },
                    { 1501402, 15, "Belém" },
                    { 1501451, 15, "Belterra" },
                    { 1501501, 15, "Benevides" },
                    { 1501576, 15, "Bom Jesus do Tocantins" },
                    { 1501600, 15, "Bonito" },
                    { 1501709, 15, "Bragança" },
                    { 1501725, 15, "Brasil Novo" },
                    { 1501758, 15, "Brejo Grande do Araguaia" },
                    { 1501782, 15, "Breu Branco" },
                    { 1501808, 15, "Breves" },
                    { 1501907, 15, "Bujaru" },
                    { 1501956, 15, "Cachoeira do Piriá" },
                    { 1502004, 15, "Cachoeira do Arari" },
                    { 1502103, 15, "Cametá" },
                    { 1502152, 15, "Canaã dos Carajás" },
                    { 1502202, 15, "Capanema" },
                    { 1502301, 15, "Capitão Poço" },
                    { 1502400, 15, "Castanhal" },
                    { 1502509, 15, "Chaves" },
                    { 1502608, 15, "Colares" },
                    { 1502707, 15, "Conceição do Araguaia" },
                    { 1502756, 15, "Concórdia do Pará" },
                    { 1502764, 15, "Cumaru do Norte" },
                    { 1502772, 15, "Curionópolis" },
                    { 1502806, 15, "Curralinho" },
                    { 1502855, 15, "Curuá" },
                    { 1502905, 15, "Curuçá" },
                    { 1502939, 15, "Dom Eliseu" },
                    { 1502954, 15, "Eldorado dos Carajás" },
                    { 1503002, 15, "Faro" },
                    { 1503044, 15, "Floresta do Araguaia" },
                    { 1503077, 15, "Garrafão do Norte" },
                    { 1503093, 15, "Goianésia do Pará" },
                    { 1503101, 15, "Gurupá" },
                    { 1503200, 15, "Igarapé-Açu" },
                    { 1503309, 15, "Igarapé-Miri" },
                    { 1503408, 15, "Inhangapi" },
                    { 1503457, 15, "Ipixuna do Pará" },
                    { 1503507, 15, "Irituia" },
                    { 1503606, 15, "Itaituba" },
                    { 1503705, 15, "Itupiranga" },
                    { 1503754, 15, "Jacareacanga" },
                    { 1503804, 15, "Jacundá" },
                    { 1503903, 15, "Juruti" },
                    { 1504000, 15, "Limoeiro do Ajuru" },
                    { 1504059, 15, "Mãe do Rio" },
                    { 1504109, 15, "Magalhães Barata" },
                    { 1504208, 15, "Marabá" },
                    { 1504307, 15, "Maracanã" },
                    { 1504406, 15, "Marapanim" },
                    { 1504422, 15, "Marituba" },
                    { 1504455, 15, "Medicilândia" },
                    { 1504505, 15, "Melgaço" },
                    { 1504604, 15, "Mocajuba" },
                    { 1504703, 15, "Moju" },
                    { 1504752, 15, "Mojuí dos Campos" },
                    { 1504802, 15, "Monte Alegre" },
                    { 1504901, 15, "Muaná" },
                    { 1504950, 15, "Nova Esperança do Piriá" },
                    { 1504976, 15, "Nova Ipixuna" },
                    { 1505007, 15, "Nova Timboteua" },
                    { 1505031, 15, "Novo Progresso" },
                    { 1505064, 15, "Novo Repartimento" },
                    { 1505106, 15, "Óbidos" },
                    { 1505205, 15, "Oeiras do Pará" },
                    { 1505304, 15, "Oriximiná" },
                    { 1505403, 15, "Ourém" },
                    { 1505437, 15, "Ourilândia do Norte" },
                    { 1505486, 15, "Pacajá" },
                    { 1505494, 15, "Palestina do Pará" },
                    { 1505502, 15, "Paragominas" },
                    { 1505536, 15, "Parauapebas" },
                    { 1505551, 15, "Pau DArco" },
                    { 1505601, 15, "Peixe-Boi" },
                    { 1505635, 15, "Piçarra" },
                    { 1505650, 15, "Placas" },
                    { 1505700, 15, "Ponta de Pedras" },
                    { 1505809, 15, "Portel" },
                    { 1505908, 15, "Porto de Moz" },
                    { 1506005, 15, "Prainha" },
                    { 1506104, 15, "Primavera" },
                    { 1506112, 15, "Quatipuru" },
                    { 1506138, 15, "Redenção" },
                    { 1506161, 15, "Rio Maria" },
                    { 1506187, 15, "Rondon do Pará" },
                    { 1506195, 15, "Rurópolis" },
                    { 1506203, 15, "Salinópolis" },
                    { 1506302, 15, "Salvaterra" },
                    { 1506351, 15, "Santa Bárbara do Pará" },
                    { 1506401, 15, "Santa Cruz do Arari" },
                    { 1506500, 15, "Santa Izabel do Pará" },
                    { 1506559, 15, "Santa Luzia do Pará" },
                    { 1506583, 15, "Santa Maria das Barreiras" },
                    { 1506609, 15, "Santa Maria do Pará" },
                    { 1506708, 15, "Santana do Araguaia" },
                    { 1506807, 15, "Santarém" },
                    { 1506906, 15, "Santarém Novo" },
                    { 1507003, 15, "Santo Antônio do Tauá" },
                    { 1507102, 15, "São Caetano de Odivelas" },
                    { 1507151, 15, "São Domingos do Araguaia" },
                    { 1507201, 15, "São Domingos do Capim" },
                    { 1507300, 15, "São Félix do Xingu" },
                    { 1507409, 15, "São Francisco do Pará" },
                    { 1507458, 15, "São Geraldo do Araguaia" },
                    { 1507466, 15, "São João da Ponta" },
                    { 1507474, 15, "São João de Pirabas" },
                    { 1507508, 15, "São João do Araguaia" },
                    { 1507607, 15, "São Miguel do Guamá" },
                    { 1507706, 15, "São Sebastião da Boa Vista" },
                    { 1507755, 15, "Sapucaia" },
                    { 1507805, 15, "Senador José Porfírio" },
                    { 1507904, 15, "Soure" },
                    { 1507953, 15, "Tailândia" },
                    { 1507961, 15, "Terra Alta" },
                    { 1507979, 15, "Terra Santa" },
                    { 1508001, 15, "Tomé-Açu" },
                    { 1508035, 15, "Tracuateua" },
                    { 1508050, 15, "Trairão" },
                    { 1508084, 15, "Tucumã" },
                    { 1508100, 15, "Tucuruí" },
                    { 1508126, 15, "Ulianópolis" },
                    { 1508159, 15, "Uruará" },
                    { 1508209, 15, "Vigia" },
                    { 1508308, 15, "Viseu" },
                    { 1508357, 15, "Vitória do Xingu" },
                    { 1508407, 15, "Xinguara" },
                    { 1600055, 16, "Serra do Navio" },
                    { 1600105, 16, "Amapá" },
                    { 1600154, 16, "Pedra Branca do Amapari" },
                    { 1600204, 16, "Calçoene" },
                    { 1600212, 16, "Cutias" },
                    { 1600238, 16, "Ferreira Gomes" },
                    { 1600253, 16, "Itaubal" },
                    { 1600279, 16, "Laranjal do Jari" },
                    { 1600303, 16, "Macapá" },
                    { 1600402, 16, "Mazagão" },
                    { 1600501, 16, "Oiapoque" },
                    { 1600535, 16, "Porto Grande" },
                    { 1600550, 16, "Pracuúba" },
                    { 1600600, 16, "Santana" },
                    { 1600709, 16, "Tartarugalzinho" },
                    { 1600808, 16, "Vitória do Jari" },
                    { 1700251, 17, "Abreulândia" },
                    { 1700301, 17, "Aguiarnópolis" },
                    { 1700350, 17, "Aliança do Tocantins" },
                    { 1700400, 17, "Almas" },
                    { 1700707, 17, "Alvorada" },
                    { 1701002, 17, "Ananás" },
                    { 1701051, 17, "Angico" },
                    { 1701101, 17, "Aparecida do Rio Negro" },
                    { 1701309, 17, "Aragominas" },
                    { 1701903, 17, "Araguacema" },
                    { 1702000, 17, "Araguaçu" },
                    { 1702109, 17, "Araguaína" },
                    { 1702158, 17, "Araguanã" },
                    { 1702208, 17, "Araguatins" },
                    { 1702307, 17, "Arapoema" },
                    { 1702406, 17, "Arraias" },
                    { 1702554, 17, "Augustinópolis" },
                    { 1702703, 17, "Aurora do Tocantins" },
                    { 1702901, 17, "Axixá do Tocantins" },
                    { 1703008, 17, "Babaçulândia" },
                    { 1703057, 17, "Bandeirantes do Tocantins" },
                    { 1703073, 17, "Barra do Ouro" },
                    { 1703107, 17, "Barrolândia" },
                    { 1703206, 17, "Bernardo Sayão" },
                    { 1703305, 17, "Bom Jesus do Tocantins" },
                    { 1703602, 17, "Brasilândia do Tocantins" },
                    { 1703701, 17, "Brejinho de Nazaré" },
                    { 1703800, 17, "Buriti do Tocantins" },
                    { 1703826, 17, "Cachoeirinha" },
                    { 1703842, 17, "Campos Lindos" },
                    { 1703867, 17, "Cariri do Tocantins" },
                    { 1703883, 17, "Carmolândia" },
                    { 1703891, 17, "Carrasco Bonito" },
                    { 1703909, 17, "Caseara" },
                    { 1704105, 17, "Centenário" },
                    { 1704600, 17, "Chapada de Areia" },
                    { 1705102, 17, "Chapada da Natividade" },
                    { 1705508, 17, "Colinas do Tocantins" },
                    { 1705557, 17, "Combinado" },
                    { 1705607, 17, "Conceição do Tocantins" },
                    { 1706001, 17, "Couto de Magalhães" },
                    { 1706100, 17, "Cristalândia" },
                    { 1706258, 17, "Crixás do Tocantins" },
                    { 1706506, 17, "Darcinópolis" },
                    { 1707009, 17, "Dianópolis" },
                    { 1707108, 17, "Divinópolis do Tocantins" },
                    { 1707207, 17, "Dois Irmãos do Tocantins" },
                    { 1707306, 17, "Dueré" },
                    { 1707405, 17, "Esperantina" },
                    { 1707553, 17, "Fátima" },
                    { 1707652, 17, "Figueirópolis" },
                    { 1707702, 17, "Filadélfia" },
                    { 1708205, 17, "Formoso do Araguaia" },
                    { 1708254, 17, "Fortaleza do Tabocão" },
                    { 1708304, 17, "Goianorte" },
                    { 1709005, 17, "Goiatins" },
                    { 1709302, 17, "Guaraí" },
                    { 1709500, 17, "Gurupi" },
                    { 1709807, 17, "Ipueiras" },
                    { 1710508, 17, "Itacajá" },
                    { 1710706, 17, "Itaguatins" },
                    { 1710904, 17, "Itapiratins" },
                    { 1711100, 17, "Itaporã do Tocantins" },
                    { 1711506, 17, "Jaú do Tocantins" },
                    { 1711803, 17, "Juarina" },
                    { 1711902, 17, "Lagoa da Confusão" },
                    { 1711951, 17, "Lagoa do Tocantins" },
                    { 1712009, 17, "Lajeado" },
                    { 1712157, 17, "Lavandeira" },
                    { 1712405, 17, "Lizarda" },
                    { 1712454, 17, "Luzinópolis" },
                    { 1712504, 17, "Marianópolis do Tocantins" },
                    { 1712702, 17, "Mateiros" },
                    { 1712801, 17, "Maurilândia do Tocantins" },
                    { 1713205, 17, "Miracema do Tocantins" },
                    { 1713304, 17, "Miranorte" },
                    { 1713601, 17, "Monte do Carmo" },
                    { 1713700, 17, "Monte Santo do Tocantins" },
                    { 1713809, 17, "Palmeiras do Tocantins" },
                    { 1713957, 17, "Muricilândia" },
                    { 1714203, 17, "Natividade" },
                    { 1714302, 17, "Nazaré" },
                    { 1714880, 17, "Nova Olinda" },
                    { 1715002, 17, "Nova Rosalândia" },
                    { 1715101, 17, "Novo Acordo" },
                    { 1715150, 17, "Novo Alegre" },
                    { 1715259, 17, "Novo Jardim" },
                    { 1715507, 17, "Oliveira de Fátima" },
                    { 1715705, 17, "Palmeirante" },
                    { 1715754, 17, "Palmeirópolis" },
                    { 1716109, 17, "Paraíso do Tocantins" },
                    { 1716208, 17, "Paranã" },
                    { 1716307, 17, "Pau DArco" },
                    { 1716505, 17, "Pedro Afonso" },
                    { 1716604, 17, "Peixe" },
                    { 1716653, 17, "Pequizeiro" },
                    { 1716703, 17, "Colméia" },
                    { 1717008, 17, "Pindorama do Tocantins" },
                    { 1717206, 17, "Piraquê" },
                    { 1717503, 17, "Pium" },
                    { 1717800, 17, "Ponte Alta do Bom Jesus" },
                    { 1717909, 17, "Ponte Alta do Tocantins" },
                    { 1718006, 17, "Porto Alegre do Tocantins" },
                    { 1718204, 17, "Porto Nacional" },
                    { 1718303, 17, "Praia Norte" },
                    { 1718402, 17, "Presidente Kennedy" },
                    { 1718451, 17, "Pugmil" },
                    { 1718501, 17, "Recursolândia" },
                    { 1718550, 17, "Riachinho" },
                    { 1718659, 17, "Rio da Conceição" },
                    { 1718709, 17, "Rio dos Bois" },
                    { 1718758, 17, "Rio Sono" },
                    { 1718808, 17, "Sampaio" },
                    { 1718840, 17, "Sandolândia" },
                    { 1718865, 17, "Santa Fé do Araguaia" },
                    { 1718881, 17, "Santa Maria do Tocantins" },
                    { 1718899, 17, "Santa Rita do Tocantins" },
                    { 1718907, 17, "Santa Rosa do Tocantins" },
                    { 1719004, 17, "Santa Tereza do Tocantins" },
                    { 1720002, 17, "Santa Terezinha do Tocantins" },
                    { 1720101, 17, "São Bento do Tocantins" },
                    { 1720150, 17, "São Félix do Tocantins" },
                    { 1720200, 17, "São Miguel do Tocantins" },
                    { 1720259, 17, "São Salvador do Tocantins" },
                    { 1720309, 17, "São Sebastião do Tocantins" },
                    { 1720499, 17, "São Valério da Natividade" },
                    { 1720655, 17, "Silvanópolis" },
                    { 1720804, 17, "Sítio Novo do Tocantins" },
                    { 1720853, 17, "Sucupira" },
                    { 1720903, 17, "Taguatinga" },
                    { 1720937, 17, "Taipas do Tocantins" },
                    { 1720978, 17, "Talismã" },
                    { 1721000, 17, "Palmas" },
                    { 1721109, 17, "Tocantínia" },
                    { 1721208, 17, "Tocantinópolis" },
                    { 1721257, 17, "Tupirama" },
                    { 1721307, 17, "Tupiratins" },
                    { 1722081, 17, "Wanderlândia" },
                    { 1722107, 17, "Xambioá" },
                    { 2100055, 21, "Açailândia" },
                    { 2100105, 21, "Afonso Cunha" },
                    { 2100154, 21, "Água Doce do Maranhão" },
                    { 2100204, 21, "Alcântara" },
                    { 2100303, 21, "Aldeias Altas" },
                    { 2100402, 21, "Altamira do Maranhão" },
                    { 2100436, 21, "Alto Alegre do Maranhão" },
                    { 2100477, 21, "Alto Alegre do Pindaré" },
                    { 2100501, 21, "Alto Parnaíba" },
                    { 2100550, 21, "Amapá do Maranhão" },
                    { 2100600, 21, "Amarante do Maranhão" },
                    { 2100709, 21, "Anajatuba" },
                    { 2100808, 21, "Anapurus" },
                    { 2100832, 21, "Apicum-Açu" },
                    { 2100873, 21, "Araguanã" },
                    { 2100907, 21, "Araioses" },
                    { 2100956, 21, "Arame" },
                    { 2101004, 21, "Arari" },
                    { 2101103, 21, "Axixá" },
                    { 2101202, 21, "Bacabal" },
                    { 2101251, 21, "Bacabeira" },
                    { 2101301, 21, "Bacuri" },
                    { 2101350, 21, "Bacurituba" },
                    { 2101400, 21, "Balsas" },
                    { 2101509, 21, "Barão de Grajaú" },
                    { 2101608, 21, "Barra do Corda" },
                    { 2101707, 21, "Barreirinhas" },
                    { 2101731, 21, "Belágua" },
                    { 2101772, 21, "Bela Vista do Maranhão" },
                    { 2101806, 21, "Benedito Leite" },
                    { 2101905, 21, "Bequimão" },
                    { 2101939, 21, "Bernardo do Mearim" },
                    { 2101970, 21, "Boa Vista do Gurupi" },
                    { 2102002, 21, "Bom Jardim" },
                    { 2102036, 21, "Bom Jesus das Selvas" },
                    { 2102077, 21, "Bom Lugar" },
                    { 2102101, 21, "Brejo" },
                    { 2102150, 21, "Brejo de Areia" },
                    { 2102200, 21, "Buriti" },
                    { 2102309, 21, "Buriti Bravo" },
                    { 2102325, 21, "Buriticupu" },
                    { 2102358, 21, "Buritirana" },
                    { 2102374, 21, "Cachoeira Grande" },
                    { 2102408, 21, "Cajapió" },
                    { 2102507, 21, "Cajari" },
                    { 2102556, 21, "Campestre do Maranhão" },
                    { 2102606, 21, "Cândido Mendes" },
                    { 2102705, 21, "Cantanhede" },
                    { 2102754, 21, "Capinzal do Norte" },
                    { 2102804, 21, "Carolina" },
                    { 2102903, 21, "Carutapera" },
                    { 2103000, 21, "Caxias" },
                    { 2103109, 21, "Cedral" },
                    { 2103125, 21, "Central do Maranhão" },
                    { 2103158, 21, "Centro do Guilherme" },
                    { 2103174, 21, "Centro Novo do Maranhão" },
                    { 2103208, 21, "Chapadinha" },
                    { 2103257, 21, "Cidelândia" },
                    { 2103307, 21, "Codó" },
                    { 2103406, 21, "Coelho Neto" },
                    { 2103505, 21, "Colinas" },
                    { 2103554, 21, "Conceição do Lago-Açu" },
                    { 2103604, 21, "Coroatá" },
                    { 2103703, 21, "Cururupu" },
                    { 2103752, 21, "Davinópolis" },
                    { 2103802, 21, "Dom Pedro" },
                    { 2103901, 21, "Duque Bacelar" },
                    { 2104008, 21, "Esperantinópolis" },
                    { 2104057, 21, "Estreito" },
                    { 2104073, 21, "Feira Nova do Maranhão" },
                    { 2104081, 21, "Fernando Falcão" },
                    { 2104099, 21, "Formosa da Serra Negra" },
                    { 2104107, 21, "Fortaleza dos Nogueiras" },
                    { 2104206, 21, "Fortuna" },
                    { 2104305, 21, "Godofredo Viana" },
                    { 2104404, 21, "Gonçalves Dias" },
                    { 2104503, 21, "Governador Archer" },
                    { 2104552, 21, "Governador Edison Lobão" },
                    { 2104602, 21, "Governador Eugênio Barros" },
                    { 2104628, 21, "Governador Luiz Rocha" },
                    { 2104651, 21, "Governador Newton Bello" },
                    { 2104677, 21, "Governador Nunes Freire" },
                    { 2104701, 21, "Graça Aranha" },
                    { 2104800, 21, "Grajaú" },
                    { 2104909, 21, "Guimarães" },
                    { 2105005, 21, "Humberto de Campos" },
                    { 2105104, 21, "Icatu" },
                    { 2105153, 21, "Igarapé do Meio" },
                    { 2105203, 21, "Igarapé Grande" },
                    { 2105302, 21, "Imperatriz" },
                    { 2105351, 21, "Itaipava do Grajaú" },
                    { 2105401, 21, "Itapecuru Mirim" },
                    { 2105427, 21, "Itinga do Maranhão" },
                    { 2105450, 21, "Jatobá" },
                    { 2105476, 21, "Jenipapo dos Vieiras" },
                    { 2105500, 21, "João Lisboa" },
                    { 2105609, 21, "Joselândia" },
                    { 2105658, 21, "Junco do Maranhão" },
                    { 2105708, 21, "Lago da Pedra" },
                    { 2105807, 21, "Lago do Junco" },
                    { 2105906, 21, "Lago Verde" },
                    { 2105922, 21, "Lagoa do Mato" },
                    { 2105948, 21, "Lago dos Rodrigues" },
                    { 2105963, 21, "Lagoa Grande do Maranhão" },
                    { 2105989, 21, "Lajeado Novo" },
                    { 2106003, 21, "Lima Campos" },
                    { 2106102, 21, "Loreto" },
                    { 2106201, 21, "Luís Domingues" },
                    { 2106300, 21, "Magalhães de Almeida" },
                    { 2106326, 21, "Maracaçumé" },
                    { 2106359, 21, "Marajá do Sena" },
                    { 2106375, 21, "Maranhãozinho" },
                    { 2106409, 21, "Mata Roma" },
                    { 2106508, 21, "Matinha" },
                    { 2106607, 21, "Matões" },
                    { 2106631, 21, "Matões do Norte" },
                    { 2106672, 21, "Milagres do Maranhão" },
                    { 2106706, 21, "Mirador" },
                    { 2106755, 21, "Miranda do Norte" },
                    { 2106805, 21, "Mirinzal" },
                    { 2106904, 21, "Monção" },
                    { 2107001, 21, "Montes Altos" },
                    { 2107100, 21, "Morros" },
                    { 2107209, 21, "Nina Rodrigues" },
                    { 2107258, 21, "Nova Colinas" },
                    { 2107308, 21, "Nova Iorque" },
                    { 2107357, 21, "Nova Olinda do Maranhão" },
                    { 2107407, 21, "Olho dÁgua das Cunhãs" },
                    { 2107456, 21, "Olinda Nova do Maranhão" },
                    { 2107506, 21, "Paço do Lumiar" },
                    { 2107605, 21, "Palmeirândia" },
                    { 2107704, 21, "Paraibano" },
                    { 2107803, 21, "Parnarama" },
                    { 2107902, 21, "Passagem Franca" },
                    { 2108009, 21, "Pastos Bons" },
                    { 2108058, 21, "Paulino Neves" },
                    { 2108108, 21, "Paulo Ramos" },
                    { 2108207, 21, "Pedreiras" },
                    { 2108256, 21, "Pedro do Rosário" },
                    { 2108306, 21, "Penalva" },
                    { 2108405, 21, "Peri Mirim" },
                    { 2108454, 21, "Peritoró" },
                    { 2108504, 21, "Pindaré-Mirim" },
                    { 2108603, 21, "Pinheiro" },
                    { 2108702, 21, "Pio XII" },
                    { 2108801, 21, "Pirapemas" },
                    { 2108900, 21, "Poção de Pedras" },
                    { 2109007, 21, "Porto Franco" },
                    { 2109056, 21, "Porto Rico do Maranhão" },
                    { 2109106, 21, "Presidente Dutra" },
                    { 2109205, 21, "Presidente Juscelino" },
                    { 2109239, 21, "Presidente Médici" },
                    { 2109270, 21, "Presidente Sarney" },
                    { 2109304, 21, "Presidente Vargas" },
                    { 2109403, 21, "Primeira Cruz" },
                    { 2109452, 21, "Raposa" },
                    { 2109502, 21, "Riachão" },
                    { 2109551, 21, "Ribamar Fiquene" },
                    { 2109601, 21, "Rosário" },
                    { 2109700, 21, "Sambaíba" },
                    { 2109759, 21, "Santa Filomena do Maranhão" },
                    { 2109809, 21, "Santa Helena" },
                    { 2109908, 21, "Santa Inês" },
                    { 2110005, 21, "Santa Luzia" },
                    { 2110039, 21, "Santa Luzia do Paruá" },
                    { 2110104, 21, "Santa Quitéria do Maranhão" },
                    { 2110203, 21, "Santa Rita" },
                    { 2110237, 21, "Santana do Maranhão" },
                    { 2110278, 21, "Santo Amaro do Maranhão" },
                    { 2110302, 21, "Santo Antônio dos Lopes" },
                    { 2110401, 21, "São Benedito do Rio Preto" },
                    { 2110500, 21, "São Bento" },
                    { 2110609, 21, "São Bernardo" },
                    { 2110658, 21, "São Domingos do Azeitão" },
                    { 2110708, 21, "São Domingos do Maranhão" },
                    { 2110807, 21, "São Félix de Balsas" },
                    { 2110856, 21, "São Francisco do Brejão" },
                    { 2110906, 21, "São Francisco do Maranhão" },
                    { 2111003, 21, "São João Batista" },
                    { 2111029, 21, "São João do Carú" },
                    { 2111052, 21, "São João do Paraíso" },
                    { 2111078, 21, "São João do Soter" },
                    { 2111102, 21, "São João dos Patos" },
                    { 2111201, 21, "São José de Ribamar" },
                    { 2111250, 21, "São José dos Basílios" },
                    { 2111300, 21, "São Luís" },
                    { 2111409, 21, "São Luís Gonzaga do Maranhão" },
                    { 2111508, 21, "São Mateus do Maranhão" },
                    { 2111532, 21, "São Pedro da Água Branca" },
                    { 2111573, 21, "São Pedro dos Crentes" },
                    { 2111607, 21, "São Raimundo das Mangabeiras" },
                    { 2111631, 21, "São Raimundo do Doca Bezerra" },
                    { 2111672, 21, "São Roberto" },
                    { 2111706, 21, "São Vicente Ferrer" },
                    { 2111722, 21, "Satubinha" },
                    { 2111748, 21, "Senador Alexandre Costa" },
                    { 2111763, 21, "Senador La Rocque" },
                    { 2111789, 21, "Serrano do Maranhão" },
                    { 2111805, 21, "Sítio Novo" },
                    { 2111904, 21, "Sucupira do Norte" },
                    { 2111953, 21, "Sucupira do Riachão" },
                    { 2112001, 21, "Tasso Fragoso" },
                    { 2112100, 21, "Timbiras" },
                    { 2112209, 21, "Timon" },
                    { 2112233, 21, "Trizidela do Vale" },
                    { 2112274, 21, "Tufilândia" },
                    { 2112308, 21, "Tuntum" },
                    { 2112407, 21, "Turiaçu" },
                    { 2112456, 21, "Turilândia" },
                    { 2112506, 21, "Tutóia" },
                    { 2112605, 21, "Urbano Santos" },
                    { 2112704, 21, "Vargem Grande" },
                    { 2112803, 21, "Viana" },
                    { 2112852, 21, "Vila Nova dos Martírios" },
                    { 2112902, 21, "Vitória do Mearim" },
                    { 2113009, 21, "Vitorino Freire" },
                    { 2114007, 21, "Zé Doca" },
                    { 2200053, 22, "Acauã" },
                    { 2200103, 22, "Agricolândia" },
                    { 2200202, 22, "Água Branca" },
                    { 2200251, 22, "Alagoinha do Piauí" },
                    { 2200277, 22, "Alegrete do Piauí" },
                    { 2200301, 22, "Alto Longá" },
                    { 2200400, 22, "Altos" },
                    { 2200459, 22, "Alvorada do Gurguéia" },
                    { 2200509, 22, "Amarante" },
                    { 2200608, 22, "Angical do Piauí" },
                    { 2200707, 22, "Anísio de Abreu" },
                    { 2200806, 22, "Antônio Almeida" },
                    { 2200905, 22, "Aroazes" },
                    { 2200954, 22, "Aroeiras do Itaim" },
                    { 2201002, 22, "Arraial" },
                    { 2201051, 22, "Assunção do Piauí" },
                    { 2201101, 22, "Avelino Lopes" },
                    { 2201150, 22, "Baixa Grande do Ribeiro" },
                    { 2201176, 22, "Barra DAlcântara" },
                    { 2201200, 22, "Barras" },
                    { 2201309, 22, "Barreiras do Piauí" },
                    { 2201408, 22, "Barro Duro" },
                    { 2201507, 22, "Batalha" },
                    { 2201556, 22, "Bela Vista do Piauí" },
                    { 2201572, 22, "Belém do Piauí" },
                    { 2201606, 22, "Beneditinos" },
                    { 2201705, 22, "Bertolínia" },
                    { 2201739, 22, "Betânia do Piauí" },
                    { 2201770, 22, "Boa Hora" },
                    { 2201804, 22, "Bocaina" },
                    { 2201903, 22, "Bom Jesus" },
                    { 2201919, 22, "Bom Princípio do Piauí" },
                    { 2201929, 22, "Bonfim do Piauí" },
                    { 2201945, 22, "Boqueirão do Piauí" },
                    { 2201960, 22, "Brasileira" },
                    { 2201988, 22, "Brejo do Piauí" },
                    { 2202000, 22, "Buriti dos Lopes" },
                    { 2202026, 22, "Buriti dos Montes" },
                    { 2202059, 22, "Cabeceiras do Piauí" },
                    { 2202075, 22, "Cajazeiras do Piauí" },
                    { 2202083, 22, "Cajueiro da Praia" },
                    { 2202091, 22, "Caldeirão Grande do Piauí" },
                    { 2202109, 22, "Campinas do Piauí" },
                    { 2202117, 22, "Campo Alegre do Fidalgo" },
                    { 2202133, 22, "Campo Grande do Piauí" },
                    { 2202174, 22, "Campo Largo do Piauí" },
                    { 2202208, 22, "Campo Maior" },
                    { 2202251, 22, "Canavieira" },
                    { 2202307, 22, "Canto do Buriti" },
                    { 2202406, 22, "Capitão de Campos" },
                    { 2202455, 22, "Capitão Gervásio Oliveira" },
                    { 2202505, 22, "Caracol" },
                    { 2202539, 22, "Caraúbas do Piauí" },
                    { 2202554, 22, "Caridade do Piauí" },
                    { 2202604, 22, "Castelo do Piauí" },
                    { 2202653, 22, "Caxingó" },
                    { 2202703, 22, "Cocal" },
                    { 2202711, 22, "Cocal de Telha" },
                    { 2202729, 22, "Cocal dos Alves" },
                    { 2202737, 22, "Coivaras" },
                    { 2202752, 22, "Colônia do Gurguéia" },
                    { 2202778, 22, "Colônia do Piauí" },
                    { 2202802, 22, "Conceição do Canindé" },
                    { 2202851, 22, "Coronel José Dias" },
                    { 2202901, 22, "Corrente" },
                    { 2203008, 22, "Cristalândia do Piauí" },
                    { 2203107, 22, "Cristino Castro" },
                    { 2203206, 22, "Curimatá" },
                    { 2203230, 22, "Currais" },
                    { 2203255, 22, "Curralinhos" },
                    { 2203271, 22, "Curral Novo do Piauí" },
                    { 2203305, 22, "Demerval Lobão" },
                    { 2203354, 22, "Dirceu Arcoverde" },
                    { 2203404, 22, "Dom Expedito Lopes" },
                    { 2203420, 22, "Domingos Mourão" },
                    { 2203453, 22, "Dom Inocêncio" },
                    { 2203503, 22, "Elesbão Veloso" },
                    { 2203602, 22, "Eliseu Martins" },
                    { 2203701, 22, "Esperantina" },
                    { 2203750, 22, "Fartura do Piauí" },
                    { 2203800, 22, "Flores do Piauí" },
                    { 2203859, 22, "Floresta do Piauí" },
                    { 2203909, 22, "Floriano" },
                    { 2204006, 22, "Francinópolis" },
                    { 2204105, 22, "Francisco Ayres" },
                    { 2204154, 22, "Francisco Macedo" },
                    { 2204204, 22, "Francisco Santos" },
                    { 2204303, 22, "Fronteiras" },
                    { 2204352, 22, "Geminiano" },
                    { 2204402, 22, "Gilbués" },
                    { 2204501, 22, "Guadalupe" },
                    { 2204550, 22, "Guaribas" },
                    { 2204600, 22, "Hugo Napoleão" },
                    { 2204659, 22, "Ilha Grande" },
                    { 2204709, 22, "Inhuma" },
                    { 2204808, 22, "Ipiranga do Piauí" },
                    { 2204907, 22, "Isaías Coelho" },
                    { 2205003, 22, "Itainópolis" },
                    { 2205102, 22, "Itaueira" },
                    { 2205151, 22, "Jacobina do Piauí" },
                    { 2205201, 22, "Jaicós" },
                    { 2205250, 22, "Jardim do Mulato" },
                    { 2205276, 22, "Jatobá do Piauí" },
                    { 2205300, 22, "Jerumenha" },
                    { 2205359, 22, "João Costa" },
                    { 2205409, 22, "Joaquim Pires" },
                    { 2205458, 22, "Joca Marques" },
                    { 2205508, 22, "José de Freitas" },
                    { 2205516, 22, "Juazeiro do Piauí" },
                    { 2205524, 22, "Júlio Borges" },
                    { 2205532, 22, "Jurema" },
                    { 2205540, 22, "Lagoinha do Piauí" },
                    { 2205557, 22, "Lagoa Alegre" },
                    { 2205565, 22, "Lagoa do Barro do Piauí" },
                    { 2205573, 22, "Lagoa de São Francisco" },
                    { 2205581, 22, "Lagoa do Piauí" },
                    { 2205599, 22, "Lagoa do Sítio" },
                    { 2205607, 22, "Landri Sales" },
                    { 2205706, 22, "Luís Correia" },
                    { 2205805, 22, "Luzilândia" },
                    { 2205854, 22, "Madeiro" },
                    { 2205904, 22, "Manoel Emídio" },
                    { 2205953, 22, "Marcolândia" },
                    { 2206001, 22, "Marcos Parente" },
                    { 2206050, 22, "Massapê do Piauí" },
                    { 2206100, 22, "Matias Olímpio" },
                    { 2206209, 22, "Miguel Alves" },
                    { 2206308, 22, "Miguel Leão" },
                    { 2206357, 22, "Milton Brandão" },
                    { 2206407, 22, "Monsenhor Gil" },
                    { 2206506, 22, "Monsenhor Hipólito" },
                    { 2206605, 22, "Monte Alegre do Piauí" },
                    { 2206654, 22, "Morro Cabeça no Tempo" },
                    { 2206670, 22, "Morro do Chapéu do Piauí" },
                    { 2206696, 22, "Murici dos Portelas" },
                    { 2206704, 22, "Nazaré do Piauí" },
                    { 2206720, 22, "Nazária" },
                    { 2206753, 22, "Nossa Senhora de Nazaré" },
                    { 2206803, 22, "Nossa Senhora dos Remédios" },
                    { 2206902, 22, "Novo Oriente do Piauí" },
                    { 2206951, 22, "Novo Santo Antônio" },
                    { 2207009, 22, "Oeiras" },
                    { 2207108, 22, "Olho DÁgua do Piauí" },
                    { 2207207, 22, "Padre Marcos" },
                    { 2207306, 22, "Paes Landim" },
                    { 2207355, 22, "Pajeú do Piauí" },
                    { 2207405, 22, "Palmeira do Piauí" },
                    { 2207504, 22, "Palmeirais" },
                    { 2207553, 22, "Paquetá" },
                    { 2207603, 22, "Parnaguá" },
                    { 2207702, 22, "Parnaíba" },
                    { 2207751, 22, "Passagem Franca do Piauí" },
                    { 2207777, 22, "Patos do Piauí" },
                    { 2207793, 22, "Pau DArco do Piauí" },
                    { 2207801, 22, "Paulistana" },
                    { 2207850, 22, "Pavussu" },
                    { 2207900, 22, "Pedro II" },
                    { 2207934, 22, "Pedro Laurentino" },
                    { 2207959, 22, "Nova Santa Rita" },
                    { 2208007, 22, "Picos" },
                    { 2208106, 22, "Pimenteiras" },
                    { 2208205, 22, "Pio IX" },
                    { 2208304, 22, "Piracuruca" },
                    { 2208403, 22, "Piripiri" },
                    { 2208502, 22, "Porto" },
                    { 2208551, 22, "Porto Alegre do Piauí" },
                    { 2208601, 22, "Prata do Piauí" },
                    { 2208650, 22, "Queimada Nova" },
                    { 2208700, 22, "Redenção do Gurguéia" },
                    { 2208809, 22, "Regeneração" },
                    { 2208858, 22, "Riacho Frio" },
                    { 2208874, 22, "Ribeira do Piauí" },
                    { 2208908, 22, "Ribeiro Gonçalves" },
                    { 2209005, 22, "Rio Grande do Piauí" },
                    { 2209104, 22, "Santa Cruz do Piauí" },
                    { 2209153, 22, "Santa Cruz dos Milagres" },
                    { 2209203, 22, "Santa Filomena" },
                    { 2209302, 22, "Santa Luz" },
                    { 2209351, 22, "Santana do Piauí" },
                    { 2209377, 22, "Santa Rosa do Piauí" },
                    { 2209401, 22, "Santo Antônio de Lisboa" },
                    { 2209450, 22, "Santo Antônio dos Milagres" },
                    { 2209500, 22, "Santo Inácio do Piauí" },
                    { 2209559, 22, "São Braz do Piauí" },
                    { 2209609, 22, "São Félix do Piauí" },
                    { 2209658, 22, "São Francisco de Assis do Piauí" },
                    { 2209708, 22, "São Francisco do Piauí" },
                    { 2209757, 22, "São Gonçalo do Gurguéia" },
                    { 2209807, 22, "São Gonçalo do Piauí" },
                    { 2209856, 22, "São João da Canabrava" },
                    { 2209872, 22, "São João da Fronteira" },
                    { 2209906, 22, "São João da Serra" },
                    { 2209955, 22, "São João da Varjota" },
                    { 2209971, 22, "São João do Arraial" },
                    { 2210003, 22, "São João do Piauí" },
                    { 2210052, 22, "São José do Divino" },
                    { 2210102, 22, "São José do Peixe" },
                    { 2210201, 22, "São José do Piauí" },
                    { 2210300, 22, "São Julião" },
                    { 2210359, 22, "São Lourenço do Piauí" },
                    { 2210375, 22, "São Luis do Piauí" },
                    { 2210383, 22, "São Miguel da Baixa Grande" },
                    { 2210391, 22, "São Miguel do Fidalgo" },
                    { 2210409, 22, "São Miguel do Tapuio" },
                    { 2210508, 22, "São Pedro do Piauí" },
                    { 2210607, 22, "São Raimundo Nonato" },
                    { 2210623, 22, "Sebastião Barros" },
                    { 2210631, 22, "Sebastião Leal" },
                    { 2210656, 22, "Sigefredo Pacheco" },
                    { 2210706, 22, "Simões" },
                    { 2210805, 22, "Simplício Mendes" },
                    { 2210904, 22, "Socorro do Piauí" },
                    { 2210938, 22, "Sussuapara" },
                    { 2210953, 22, "Tamboril do Piauí" },
                    { 2210979, 22, "Tanque do Piauí" },
                    { 2211001, 22, "Teresina" },
                    { 2211100, 22, "União" },
                    { 2211209, 22, "Uruçuí" },
                    { 2211308, 22, "Valença do Piauí" },
                    { 2211357, 22, "Várzea Branca" },
                    { 2211407, 22, "Várzea Grande" },
                    { 2211506, 22, "Vera Mendes" },
                    { 2211605, 22, "Vila Nova do Piauí" },
                    { 2211704, 22, "Wall Ferraz" },
                    { 2300101, 23, "Abaiara" },
                    { 2300150, 23, "Acarape" },
                    { 2300200, 23, "Acaraú" },
                    { 2300309, 23, "Acopiara" },
                    { 2300408, 23, "Aiuaba" },
                    { 2300507, 23, "Alcântaras" },
                    { 2300606, 23, "Altaneira" },
                    { 2300705, 23, "Alto Santo" },
                    { 2300754, 23, "Amontada" },
                    { 2300804, 23, "Antonina do Norte" },
                    { 2300903, 23, "Apuiarés" },
                    { 2301000, 23, "Aquiraz" },
                    { 2301109, 23, "Aracati" },
                    { 2301208, 23, "Aracoiaba" },
                    { 2301257, 23, "Ararendá" },
                    { 2301307, 23, "Araripe" },
                    { 2301406, 23, "Aratuba" },
                    { 2301505, 23, "Arneiroz" },
                    { 2301604, 23, "Assaré" },
                    { 2301703, 23, "Aurora" },
                    { 2301802, 23, "Baixio" },
                    { 2301851, 23, "Banabuiú" },
                    { 2301901, 23, "Barbalha" },
                    { 2301950, 23, "Barreira" },
                    { 2302008, 23, "Barro" },
                    { 2302057, 23, "Barroquinha" },
                    { 2302107, 23, "Baturité" },
                    { 2302206, 23, "Beberibe" },
                    { 2302305, 23, "Bela Cruz" },
                    { 2302404, 23, "Boa Viagem" },
                    { 2302503, 23, "Brejo Santo" },
                    { 2302602, 23, "Camocim" },
                    { 2302701, 23, "Campos Sales" },
                    { 2302800, 23, "Canindé" },
                    { 2302909, 23, "Capistrano" },
                    { 2303006, 23, "Caridade" },
                    { 2303105, 23, "Cariré" },
                    { 2303204, 23, "Caririaçu" },
                    { 2303303, 23, "Cariús" },
                    { 2303402, 23, "Carnaubal" },
                    { 2303501, 23, "Cascavel" },
                    { 2303600, 23, "Catarina" },
                    { 2303659, 23, "Catunda" },
                    { 2303709, 23, "Caucaia" },
                    { 2303808, 23, "Cedro" },
                    { 2303907, 23, "Chaval" },
                    { 2303931, 23, "Choró" },
                    { 2303956, 23, "Chorozinho" },
                    { 2304004, 23, "Coreaú" },
                    { 2304103, 23, "Crateús" },
                    { 2304202, 23, "Crato" },
                    { 2304236, 23, "Croatá" },
                    { 2304251, 23, "Cruz" },
                    { 2304269, 23, "Deputado Irapuan Pinheiro" },
                    { 2304277, 23, "Ererê" },
                    { 2304285, 23, "Eusébio" },
                    { 2304301, 23, "Farias Brito" },
                    { 2304350, 23, "Forquilha" },
                    { 2304400, 23, "Fortaleza" },
                    { 2304459, 23, "Fortim" },
                    { 2304509, 23, "Frecheirinha" },
                    { 2304608, 23, "General Sampaio" },
                    { 2304657, 23, "Graça" },
                    { 2304707, 23, "Granja" },
                    { 2304806, 23, "Granjeiro" },
                    { 2304905, 23, "Groaíras" },
                    { 2304954, 23, "Guaiúba" },
                    { 2305001, 23, "Guaraciaba do Norte" },
                    { 2305100, 23, "Guaramiranga" },
                    { 2305209, 23, "Hidrolândia" },
                    { 2305233, 23, "Horizonte" },
                    { 2305266, 23, "Ibaretama" },
                    { 2305308, 23, "Ibiapina" },
                    { 2305332, 23, "Ibicuitinga" },
                    { 2305357, 23, "Icapuí" },
                    { 2305407, 23, "Icó" },
                    { 2305506, 23, "Iguatu" },
                    { 2305605, 23, "Independência" },
                    { 2305654, 23, "Ipaporanga" },
                    { 2305704, 23, "Ipaumirim" },
                    { 2305803, 23, "Ipu" },
                    { 2305902, 23, "Ipueiras" },
                    { 2306009, 23, "Iracema" },
                    { 2306108, 23, "Irauçuba" },
                    { 2306207, 23, "Itaiçaba" },
                    { 2306256, 23, "Itaitinga" },
                    { 2306306, 23, "Itapajé**" },
                    { 2306405, 23, "Itapipoca" },
                    { 2306504, 23, "Itapiúna" },
                    { 2306553, 23, "Itarema" },
                    { 2306603, 23, "Itatira" },
                    { 2306702, 23, "Jaguaretama" },
                    { 2306801, 23, "Jaguaribara" },
                    { 2306900, 23, "Jaguaribe" },
                    { 2307007, 23, "Jaguaruana" },
                    { 2307106, 23, "Jardim" },
                    { 2307205, 23, "Jati" },
                    { 2307254, 23, "Jijoca de Jericoacoara" },
                    { 2307304, 23, "Juazeiro do Norte" },
                    { 2307403, 23, "Jucás" },
                    { 2307502, 23, "Lavras da Mangabeira" },
                    { 2307601, 23, "Limoeiro do Norte" },
                    { 2307635, 23, "Madalena" },
                    { 2307650, 23, "Maracanaú" },
                    { 2307700, 23, "Maranguape" },
                    { 2307809, 23, "Marco" },
                    { 2307908, 23, "Martinópole" },
                    { 2308005, 23, "Massapê" },
                    { 2308104, 23, "Mauriti" },
                    { 2308203, 23, "Meruoca" },
                    { 2308302, 23, "Milagres" },
                    { 2308351, 23, "Milhã" },
                    { 2308377, 23, "Miraíma" },
                    { 2308401, 23, "Missão Velha" },
                    { 2308500, 23, "Mombaça" },
                    { 2308609, 23, "Monsenhor Tabosa" },
                    { 2308708, 23, "Morada Nova" },
                    { 2308807, 23, "Moraújo" },
                    { 2308906, 23, "Morrinhos" },
                    { 2309003, 23, "Mucambo" },
                    { 2309102, 23, "Mulungu" },
                    { 2309201, 23, "Nova Olinda" },
                    { 2309300, 23, "Nova Russas" },
                    { 2309409, 23, "Novo Oriente" },
                    { 2309458, 23, "Ocara" },
                    { 2309508, 23, "Orós" },
                    { 2309607, 23, "Pacajus" },
                    { 2309706, 23, "Pacatuba" },
                    { 2309805, 23, "Pacoti" },
                    { 2309904, 23, "Pacujá" },
                    { 2310001, 23, "Palhano" },
                    { 2310100, 23, "Palmácia" },
                    { 2310209, 23, "Paracuru" },
                    { 2310258, 23, "Paraipaba" },
                    { 2310308, 23, "Parambu" },
                    { 2310407, 23, "Paramoti" },
                    { 2310506, 23, "Pedra Branca" },
                    { 2310605, 23, "Penaforte" },
                    { 2310704, 23, "Pentecoste" },
                    { 2310803, 23, "Pereiro" },
                    { 2310852, 23, "Pindoretama" },
                    { 2310902, 23, "Piquet Carneiro" },
                    { 2310951, 23, "Pires Ferreira" },
                    { 2311009, 23, "Poranga" },
                    { 2311108, 23, "Porteiras" },
                    { 2311207, 23, "Potengi" },
                    { 2311231, 23, "Potiretama" },
                    { 2311264, 23, "Quiterianópolis" },
                    { 2311306, 23, "Quixadá" },
                    { 2311355, 23, "Quixelô" },
                    { 2311405, 23, "Quixeramobim" },
                    { 2311504, 23, "Quixeré" },
                    { 2311603, 23, "Redenção" },
                    { 2311702, 23, "Reriutaba" },
                    { 2311801, 23, "Russas" },
                    { 2311900, 23, "Saboeiro" },
                    { 2311959, 23, "Salitre" },
                    { 2312007, 23, "Santana do Acaraú" },
                    { 2312106, 23, "Santana do Cariri" },
                    { 2312205, 23, "Santa Quitéria" },
                    { 2312304, 23, "São Benedito" },
                    { 2312403, 23, "São Gonçalo do Amarante" },
                    { 2312502, 23, "São João do Jaguaribe" },
                    { 2312601, 23, "São Luís do Curu" },
                    { 2312700, 23, "Senador Pompeu" },
                    { 2312809, 23, "Senador Sá" },
                    { 2312908, 23, "Sobral" },
                    { 2313005, 23, "Solonópole" },
                    { 2313104, 23, "Tabuleiro do Norte" },
                    { 2313203, 23, "Tamboril" },
                    { 2313252, 23, "Tarrafas" },
                    { 2313302, 23, "Tauá" },
                    { 2313351, 23, "Tejuçuoca" },
                    { 2313401, 23, "Tianguá" },
                    { 2313500, 23, "Trairi" },
                    { 2313559, 23, "Tururu" },
                    { 2313609, 23, "Ubajara" },
                    { 2313708, 23, "Umari" },
                    { 2313757, 23, "Umirim" },
                    { 2313807, 23, "Uruburetama" },
                    { 2313906, 23, "Uruoca" },
                    { 2313955, 23, "Varjota" },
                    { 2314003, 23, "Várzea Alegre" },
                    { 2314102, 23, "Viçosa do Ceará" },
                    { 2400109, 24, "Acari" },
                    { 2400208, 24, "Açu" },
                    { 2400307, 24, "Afonso Bezerra" },
                    { 2400406, 24, "Água Nova" },
                    { 2400505, 24, "Alexandria" },
                    { 2400604, 24, "Almino Afonso" },
                    { 2400703, 24, "Alto do Rodrigues" },
                    { 2400802, 24, "Angicos" },
                    { 2400901, 24, "Antônio Martins" },
                    { 2401008, 24, "Apodi" },
                    { 2401107, 24, "Areia Branca" },
                    { 2401206, 24, "Arês" },
                    { 2401305, 24, "Augusto Severo" },
                    { 2401404, 24, "Baía Formosa" },
                    { 2401453, 24, "Baraúna" },
                    { 2401503, 24, "Barcelona" },
                    { 2401602, 24, "Bento Fernandes" },
                    { 2401651, 24, "Bodó" },
                    { 2401701, 24, "Bom Jesus" },
                    { 2401800, 24, "Brejinho" },
                    { 2401859, 24, "Caiçara do Norte" },
                    { 2401909, 24, "Caiçara do Rio do Vento" },
                    { 2402006, 24, "Caicó" },
                    { 2402105, 24, "Campo Redondo" },
                    { 2402204, 24, "Canguaretama" },
                    { 2402303, 24, "Caraúbas" },
                    { 2402402, 24, "Carnaúba dos Dantas" },
                    { 2402501, 24, "Carnaubais" },
                    { 2402600, 24, "Ceará-Mirim" },
                    { 2402709, 24, "Cerro Corá" },
                    { 2402808, 24, "Coronel Ezequiel" },
                    { 2402907, 24, "Coronel João Pessoa" },
                    { 2403004, 24, "Cruzeta" },
                    { 2403103, 24, "Currais Novos" },
                    { 2403202, 24, "Doutor Severiano" },
                    { 2403251, 24, "Parnamirim" },
                    { 2403301, 24, "Encanto" },
                    { 2403400, 24, "Equador" },
                    { 2403509, 24, "Espírito Santo" },
                    { 2403608, 24, "Extremoz" },
                    { 2403707, 24, "Felipe Guerra" },
                    { 2403756, 24, "Fernando Pedroza" },
                    { 2403806, 24, "Florânia" },
                    { 2403905, 24, "Francisco Dantas" },
                    { 2404002, 24, "Frutuoso Gomes" },
                    { 2404101, 24, "Galinhos" },
                    { 2404200, 24, "Goianinha" },
                    { 2404309, 24, "Governador Dix-Sept Rosado" },
                    { 2404408, 24, "Grossos" },
                    { 2404507, 24, "Guamaré" },
                    { 2404606, 24, "Ielmo Marinho" },
                    { 2404705, 24, "Ipanguaçu" },
                    { 2404804, 24, "Ipueira" },
                    { 2404853, 24, "Itajá" },
                    { 2404903, 24, "Itaú" },
                    { 2405009, 24, "Jaçanã" },
                    { 2405108, 24, "Jandaíra" },
                    { 2405207, 24, "Janduís" },
                    { 2405306, 24, "Januário Cicco" },
                    { 2405405, 24, "Japi" },
                    { 2405504, 24, "Jardim de Angicos" },
                    { 2405603, 24, "Jardim de Piranhas" },
                    { 2405702, 24, "Jardim do Seridó" },
                    { 2405801, 24, "João Câmara" },
                    { 2405900, 24, "João Dias" },
                    { 2406007, 24, "José da Penha" },
                    { 2406106, 24, "Jucurutu" },
                    { 2406155, 24, "Jundiá" },
                    { 2406205, 24, "Lagoa dAnta" },
                    { 2406304, 24, "Lagoa de Pedras" },
                    { 2406403, 24, "Lagoa de Velhos" },
                    { 2406502, 24, "Lagoa Nova" },
                    { 2406601, 24, "Lagoa Salgada" },
                    { 2406700, 24, "Lajes" },
                    { 2406809, 24, "Lajes Pintadas" },
                    { 2406908, 24, "Lucrécia" },
                    { 2407005, 24, "Luís Gomes" },
                    { 2407104, 24, "Macaíba" },
                    { 2407203, 24, "Macau" },
                    { 2407252, 24, "Major Sales" },
                    { 2407302, 24, "Marcelino Vieira" },
                    { 2407401, 24, "Martins" },
                    { 2407500, 24, "Maxaranguape" },
                    { 2407609, 24, "Messias Targino" },
                    { 2407708, 24, "Montanhas" },
                    { 2407807, 24, "Monte Alegre" },
                    { 2407906, 24, "Monte das Gameleiras" },
                    { 2408003, 24, "Mossoró" },
                    { 2408102, 24, "Natal" },
                    { 2408201, 24, "Nísia Floresta" },
                    { 2408300, 24, "Nova Cruz" },
                    { 2408409, 24, "Olho-dÁgua do Borges" },
                    { 2408508, 24, "Ouro Branco" },
                    { 2408607, 24, "Paraná" },
                    { 2408706, 24, "Paraú" },
                    { 2408805, 24, "Parazinho" },
                    { 2408904, 24, "Parelhas" },
                    { 2408953, 24, "Rio do Fogo" },
                    { 2409100, 24, "Passa e Fica" },
                    { 2409209, 24, "Passagem" },
                    { 2409308, 24, "Patu" },
                    { 2409332, 24, "Santa Maria" },
                    { 2409407, 24, "Pau dos Ferros" },
                    { 2409506, 24, "Pedra Grande" },
                    { 2409605, 24, "Pedra Preta" },
                    { 2409704, 24, "Pedro Avelino" },
                    { 2409803, 24, "Pedro Velho" },
                    { 2409902, 24, "Pendências" },
                    { 2410009, 24, "Pilões" },
                    { 2410108, 24, "Poço Branco" },
                    { 2410207, 24, "Portalegre" },
                    { 2410256, 24, "Porto do Mangue" },
                    { 2410306, 24, "Serra Caiada***" },
                    { 2410405, 24, "Pureza" },
                    { 2410504, 24, "Rafael Fernandes" },
                    { 2410603, 24, "Rafael Godeiro" },
                    { 2410702, 24, "Riacho da Cruz" },
                    { 2410801, 24, "Riacho de Santana" },
                    { 2410900, 24, "Riachuelo" },
                    { 2411007, 24, "Rodolfo Fernandes" },
                    { 2411056, 24, "Tibau" },
                    { 2411106, 24, "Ruy Barbosa" },
                    { 2411205, 24, "Santa Cruz" },
                    { 2411403, 24, "Santana do Matos" },
                    { 2411429, 24, "Santana do Seridó" },
                    { 2411502, 24, "Santo Antônio" },
                    { 2411601, 24, "São Bento do Norte" },
                    { 2411700, 24, "São Bento do Trairí" },
                    { 2411809, 24, "São Fernando" },
                    { 2411908, 24, "São Francisco do Oeste" },
                    { 2412005, 24, "São Gonçalo do Amarante" },
                    { 2412104, 24, "São João do Sabugi" },
                    { 2412203, 24, "São José de Mipibu" },
                    { 2412302, 24, "São José do Campestre" },
                    { 2412401, 24, "São José do Seridó" },
                    { 2412500, 24, "São Miguel" },
                    { 2412559, 24, "São Miguel do Gostoso" },
                    { 2412609, 24, "São Paulo do Potengi" },
                    { 2412708, 24, "São Pedro" },
                    { 2412807, 24, "São Rafael" },
                    { 2412906, 24, "São Tomé" },
                    { 2413003, 24, "São Vicente" },
                    { 2413102, 24, "Senador Elói de Souza" },
                    { 2413201, 24, "Senador Georgino Avelino" },
                    { 2413300, 24, "Serra de São Bento" },
                    { 2413359, 24, "Serra do Mel" },
                    { 2413409, 24, "Serra Negra do Norte" },
                    { 2413508, 24, "Serrinha" },
                    { 2413557, 24, "Serrinha dos Pintos" },
                    { 2413607, 24, "Severiano Melo" },
                    { 2413706, 24, "Sítio Novo" },
                    { 2413805, 24, "Taboleiro Grande" },
                    { 2413904, 24, "Taipu" },
                    { 2414001, 24, "Tangará" },
                    { 2414100, 24, "Tenente Ananias" },
                    { 2414159, 24, "Tenente Laurentino Cruz" },
                    { 2414209, 24, "Tibau do Sul" },
                    { 2414308, 24, "Timbaúba dos Batistas" },
                    { 2414407, 24, "Touros" },
                    { 2414456, 24, "Triunfo Potiguar" },
                    { 2414506, 24, "Umarizal" },
                    { 2414605, 24, "Upanema" },
                    { 2414704, 24, "Várzea" },
                    { 2414753, 24, "Venha-Ver" },
                    { 2414803, 24, "Vera Cruz" },
                    { 2414902, 24, "Viçosa" },
                    { 2415008, 24, "Vila Flor" },
                    { 2500106, 25, "Água Branca" },
                    { 2500205, 25, "Aguiar" },
                    { 2500304, 25, "Alagoa Grande" },
                    { 2500403, 25, "Alagoa Nova" },
                    { 2500502, 25, "Alagoinha" },
                    { 2500536, 25, "Alcantil" },
                    { 2500577, 25, "Algodão de Jandaíra" },
                    { 2500601, 25, "Alhandra" },
                    { 2500700, 25, "São João do Rio do Peixe" },
                    { 2500734, 25, "Amparo" },
                    { 2500775, 25, "Aparecida" },
                    { 2500809, 25, "Araçagi" },
                    { 2500908, 25, "Arara" },
                    { 2501005, 25, "Araruna" },
                    { 2501104, 25, "Areia" },
                    { 2501153, 25, "Areia de Baraúnas" },
                    { 2501203, 25, "Areial" },
                    { 2501302, 25, "Aroeiras" },
                    { 2501351, 25, "Assunção" },
                    { 2501401, 25, "Baía da Traição" },
                    { 2501500, 25, "Bananeiras" },
                    { 2501534, 25, "Baraúna" },
                    { 2501575, 25, "Barra de Santana" },
                    { 2501609, 25, "Barra de Santa Rosa" },
                    { 2501708, 25, "Barra de São Miguel" },
                    { 2501807, 25, "Bayeux" },
                    { 2501906, 25, "Belém" },
                    { 2502003, 25, "Belém do Brejo do Cruz" },
                    { 2502052, 25, "Bernardino Batista" },
                    { 2502102, 25, "Boa Ventura" },
                    { 2502151, 25, "Boa Vista" },
                    { 2502201, 25, "Bom Jesus" },
                    { 2502300, 25, "Bom Sucesso" },
                    { 2502409, 25, "Bonito de Santa Fé" },
                    { 2502508, 25, "Boqueirão" },
                    { 2502607, 25, "Igaracy" },
                    { 2502706, 25, "Borborema" },
                    { 2502805, 25, "Brejo do Cruz" },
                    { 2502904, 25, "Brejo dos Santos" },
                    { 2503001, 25, "Caaporã" },
                    { 2503100, 25, "Cabaceiras" },
                    { 2503209, 25, "Cabedelo" },
                    { 2503308, 25, "Cachoeira dos Índios" },
                    { 2503407, 25, "Cacimba de Areia" },
                    { 2503506, 25, "Cacimba de Dentro" },
                    { 2503555, 25, "Cacimbas" },
                    { 2503605, 25, "Caiçara" },
                    { 2503704, 25, "Cajazeiras" },
                    { 2503753, 25, "Cajazeirinhas" },
                    { 2503803, 25, "Caldas Brandão" },
                    { 2503902, 25, "Camalaú" },
                    { 2504009, 25, "Campina Grande" },
                    { 2504033, 25, "Capim" },
                    { 2504074, 25, "Caraúbas" },
                    { 2504108, 25, "Carrapateira" },
                    { 2504157, 25, "Casserengue" },
                    { 2504207, 25, "Catingueira" },
                    { 2504306, 25, "Catolé do Rocha" },
                    { 2504355, 25, "Caturité" },
                    { 2504405, 25, "Conceição" },
                    { 2504504, 25, "Condado" },
                    { 2504603, 25, "Conde" },
                    { 2504702, 25, "Congo" },
                    { 2504801, 25, "Coremas" },
                    { 2504850, 25, "Coxixola" },
                    { 2504900, 25, "Cruz do Espírito Santo" },
                    { 2505006, 25, "Cubati" },
                    { 2505105, 25, "Cuité" },
                    { 2505204, 25, "Cuitegi" },
                    { 2505238, 25, "Cuité de Mamanguape" },
                    { 2505279, 25, "Curral de Cima" },
                    { 2505303, 25, "Curral Velho" },
                    { 2505352, 25, "Damião" },
                    { 2505402, 25, "Desterro" },
                    { 2505501, 25, "Vista Serrana" },
                    { 2505600, 25, "Diamante" },
                    { 2505709, 25, "Dona Inês" },
                    { 2505808, 25, "Duas Estradas" },
                    { 2505907, 25, "Emas" },
                    { 2506004, 25, "Esperança" },
                    { 2506103, 25, "Fagundes" },
                    { 2506202, 25, "Frei Martinho" },
                    { 2506251, 25, "Gado Bravo" },
                    { 2506301, 25, "Guarabira" },
                    { 2506400, 25, "Gurinhém" },
                    { 2506509, 25, "Gurjão" },
                    { 2506608, 25, "Ibiara" },
                    { 2506707, 25, "Imaculada" },
                    { 2506806, 25, "Ingá" },
                    { 2506905, 25, "Itabaiana" },
                    { 2507002, 25, "Itaporanga" },
                    { 2507101, 25, "Itapororoca" },
                    { 2507200, 25, "Itatuba" },
                    { 2507309, 25, "Jacaraú" },
                    { 2507408, 25, "Jericó" },
                    { 2507507, 25, "João Pessoa" },
                    { 2507606, 25, "Juarez Távora" },
                    { 2507705, 25, "Juazeirinho" },
                    { 2507804, 25, "Junco do Seridó" },
                    { 2507903, 25, "Juripiranga" },
                    { 2508000, 25, "Juru" },
                    { 2508109, 25, "Lagoa" },
                    { 2508208, 25, "Lagoa de Dentro" },
                    { 2508307, 25, "Lagoa Seca" },
                    { 2508406, 25, "Lastro" },
                    { 2508505, 25, "Livramento" },
                    { 2508554, 25, "Logradouro" },
                    { 2508604, 25, "Lucena" },
                    { 2508703, 25, "Mãe dÁgua" },
                    { 2508802, 25, "Malta" },
                    { 2508901, 25, "Mamanguape" },
                    { 2509008, 25, "Manaíra" },
                    { 2509057, 25, "Marcação" },
                    { 2509107, 25, "Mari" },
                    { 2509156, 25, "Marizópolis" },
                    { 2509206, 25, "Massaranduba" },
                    { 2509305, 25, "Mataraca" },
                    { 2509339, 25, "Matinhas" },
                    { 2509370, 25, "Mato Grosso" },
                    { 2509396, 25, "Maturéia" },
                    { 2509404, 25, "Mogeiro" },
                    { 2509503, 25, "Montadas" },
                    { 2509602, 25, "Monte Horebe" },
                    { 2509701, 25, "Monteiro" },
                    { 2509800, 25, "Mulungu" },
                    { 2509909, 25, "Natuba" },
                    { 2510006, 25, "Nazarezinho" },
                    { 2510105, 25, "Nova Floresta" },
                    { 2510204, 25, "Nova Olinda" },
                    { 2510303, 25, "Nova Palmeira" },
                    { 2510402, 25, "Olho dÁgua" },
                    { 2510501, 25, "Olivedos" },
                    { 2510600, 25, "Ouro Velho" },
                    { 2510659, 25, "Parari" },
                    { 2510709, 25, "Passagem" },
                    { 2510808, 25, "Patos" },
                    { 2510907, 25, "Paulista" },
                    { 2511004, 25, "Pedra Branca" },
                    { 2511103, 25, "Pedra Lavrada" },
                    { 2511202, 25, "Pedras de Fogo" },
                    { 2511301, 25, "Piancó" },
                    { 2511400, 25, "Picuí" },
                    { 2511509, 25, "Pilar" },
                    { 2511608, 25, "Pilões" },
                    { 2511707, 25, "Pilõezinhos" },
                    { 2511806, 25, "Pirpirituba" },
                    { 2511905, 25, "Pitimbu" },
                    { 2512002, 25, "Pocinhos" },
                    { 2512036, 25, "Poço Dantas" },
                    { 2512077, 25, "Poço de José de Moura" },
                    { 2512101, 25, "Pombal" },
                    { 2512200, 25, "Prata" },
                    { 2512309, 25, "Princesa Isabel" },
                    { 2512408, 25, "Puxinanã" },
                    { 2512507, 25, "Queimadas" },
                    { 2512606, 25, "Quixabá" },
                    { 2512705, 25, "Remígio" },
                    { 2512721, 25, "Pedro Régis" },
                    { 2512747, 25, "Riachão" },
                    { 2512754, 25, "Riachão do Bacamarte" },
                    { 2512762, 25, "Riachão do Poço" },
                    { 2512788, 25, "Riacho de Santo Antônio" },
                    { 2512804, 25, "Riacho dos Cavalos" },
                    { 2512903, 25, "Rio Tinto" },
                    { 2513000, 25, "Salgadinho" },
                    { 2513109, 25, "Salgado de São Félix" },
                    { 2513158, 25, "Santa Cecília" },
                    { 2513208, 25, "Santa Cruz" },
                    { 2513307, 25, "Santa Helena" },
                    { 2513356, 25, "Santa Inês" },
                    { 2513406, 25, "Santa Luzia" },
                    { 2513505, 25, "Santana de Mangueira" },
                    { 2513604, 25, "Santana dos Garrotes" },
                    { 2513653, 25, "Joca Claudino" },
                    { 2513703, 25, "Santa Rita" },
                    { 2513802, 25, "Santa Teresinha" },
                    { 2513851, 25, "Santo André" },
                    { 2513901, 25, "São Bento" },
                    { 2513927, 25, "São Bentinho" },
                    { 2513943, 25, "São Domingos do Cariri" },
                    { 2513968, 25, "São Domingos de Pombal" },
                    { 2513984, 25, "São Francisco" },
                    { 2514008, 25, "São João do Cariri" },
                    { 2514107, 25, "São João do Tigre" },
                    { 2514206, 25, "São José da Lagoa Tapada" },
                    { 2514305, 25, "São José de Caiana" },
                    { 2514404, 25, "São José de Espinharas" },
                    { 2514453, 25, "São José dos Ramos" },
                    { 2514503, 25, "São José de Piranhas" },
                    { 2514552, 25, "São José de Princesa" },
                    { 2514602, 25, "São José do Bonfim" },
                    { 2514651, 25, "São José do Brejo do Cruz" },
                    { 2514701, 25, "São José do Sabugi" },
                    { 2514800, 25, "São José dos Cordeiros" },
                    { 2514909, 25, "São Mamede" },
                    { 2515005, 25, "São Miguel de Taipu" },
                    { 2515104, 25, "São Sebastião de Lagoa de Roça" },
                    { 2515203, 25, "São Sebastião do Umbuzeiro" },
                    { 2515302, 25, "Sapé" },
                    { 2515401, 25, "Seridó" },
                    { 2515500, 25, "Serra Branca" },
                    { 2515609, 25, "Serra da Raiz" },
                    { 2515708, 25, "Serra Grande" },
                    { 2515807, 25, "Serra Redonda" },
                    { 2515906, 25, "Serraria" },
                    { 2515930, 25, "Sertãozinho" },
                    { 2515971, 25, "Sobrado" },
                    { 2516003, 25, "Solânea" },
                    { 2516102, 25, "Soledade" },
                    { 2516151, 25, "Sossêgo" },
                    { 2516201, 25, "Sousa" },
                    { 2516300, 25, "Sumé" },
                    { 2516409, 25, "Tacima" },
                    { 2516508, 25, "Taperoá" },
                    { 2516607, 25, "Tavares" },
                    { 2516706, 25, "Teixeira" },
                    { 2516755, 25, "Tenório" },
                    { 2516805, 25, "Triunfo" },
                    { 2516904, 25, "Uiraúna" },
                    { 2517001, 25, "Umbuzeiro" },
                    { 2517100, 25, "Várzea" },
                    { 2517209, 25, "Vieirópolis" },
                    { 2517407, 25, "Zabelê" },
                    { 2600054, 26, "Abreu e Lima" },
                    { 2600104, 26, "Afogados da Ingazeira" },
                    { 2600203, 26, "Afrânio" },
                    { 2600302, 26, "Agrestina" },
                    { 2600401, 26, "Água Preta" },
                    { 2600500, 26, "Águas Belas" },
                    { 2600609, 26, "Alagoinha" },
                    { 2600708, 26, "Aliança" },
                    { 2600807, 26, "Altinho" },
                    { 2600906, 26, "Amaraji" },
                    { 2601003, 26, "Angelim" },
                    { 2601052, 26, "Araçoiaba" },
                    { 2601102, 26, "Araripina" },
                    { 2601201, 26, "Arcoverde" },
                    { 2601300, 26, "Barra de Guabiraba" },
                    { 2601409, 26, "Barreiros" },
                    { 2601508, 26, "Belém de Maria" },
                    { 2601607, 26, "Belém de São Francisco" },
                    { 2601706, 26, "Belo Jardim" },
                    { 2601805, 26, "Betânia" },
                    { 2601904, 26, "Bezerros" },
                    { 2602001, 26, "Bodocó" },
                    { 2602100, 26, "Bom Conselho" },
                    { 2602209, 26, "Bom Jardim" },
                    { 2602308, 26, "Bonito" },
                    { 2602407, 26, "Brejão" },
                    { 2602506, 26, "Brejinho" },
                    { 2602605, 26, "Brejo da Madre de Deus" },
                    { 2602704, 26, "Buenos Aires" },
                    { 2602803, 26, "Buíque" },
                    { 2602902, 26, "Cabo de Santo Agostinho" },
                    { 2603009, 26, "Cabrobó" },
                    { 2603108, 26, "Cachoeirinha" },
                    { 2603207, 26, "Caetés" },
                    { 2603306, 26, "Calçado" },
                    { 2603405, 26, "Calumbi" },
                    { 2603454, 26, "Camaragibe" },
                    { 2603504, 26, "Camocim de São Félix" },
                    { 2603603, 26, "Camutanga" },
                    { 2603702, 26, "Canhotinho" },
                    { 2603801, 26, "Capoeiras" },
                    { 2603900, 26, "Carnaíba" },
                    { 2603926, 26, "Carnaubeira da Penha" },
                    { 2604007, 26, "Carpina" },
                    { 2604106, 26, "Caruaru" },
                    { 2604155, 26, "Casinhas" },
                    { 2604205, 26, "Catende" },
                    { 2604304, 26, "Cedro" },
                    { 2604403, 26, "Chã de Alegria" },
                    { 2604502, 26, "Chã Grande" },
                    { 2604601, 26, "Condado" },
                    { 2604700, 26, "Correntes" },
                    { 2604809, 26, "Cortês" },
                    { 2604908, 26, "Cumaru" },
                    { 2605004, 26, "Cupira" },
                    { 2605103, 26, "Custódia" },
                    { 2605152, 26, "Dormentes" },
                    { 2605202, 26, "Escada" },
                    { 2605301, 26, "Exu" },
                    { 2605400, 26, "Feira Nova" },
                    { 2605459, 26, "Fernando de Noronha" },
                    { 2605509, 26, "Ferreiros" },
                    { 2605608, 26, "Flores" },
                    { 2605707, 26, "Floresta" },
                    { 2605806, 26, "Frei Miguelinho" },
                    { 2605905, 26, "Gameleira" },
                    { 2606002, 26, "Garanhuns" },
                    { 2606101, 26, "Glória do Goitá" },
                    { 2606200, 26, "Goiana" },
                    { 2606309, 26, "Granito" },
                    { 2606408, 26, "Gravatá" },
                    { 2606507, 26, "Iati" },
                    { 2606606, 26, "Ibimirim" },
                    { 2606705, 26, "Ibirajuba" },
                    { 2606804, 26, "Igarassu" },
                    { 2606903, 26, "Iguaraci" },
                    { 2607000, 26, "Inajá" },
                    { 2607109, 26, "Ingazeira" },
                    { 2607208, 26, "Ipojuca" },
                    { 2607307, 26, "Ipubi" },
                    { 2607406, 26, "Itacuruba" },
                    { 2607505, 26, "Itaíba" },
                    { 2607604, 26, "Ilha de Itamaracá" },
                    { 2607653, 26, "Itambé" },
                    { 2607703, 26, "Itapetim" },
                    { 2607752, 26, "Itapissuma" },
                    { 2607802, 26, "Itaquitinga" },
                    { 2607901, 26, "Jaboatão dos Guararapes" },
                    { 2607950, 26, "Jaqueira" },
                    { 2608008, 26, "Jataúba" },
                    { 2608057, 26, "Jatobá" },
                    { 2608107, 26, "João Alfredo" },
                    { 2608206, 26, "Joaquim Nabuco" },
                    { 2608255, 26, "Jucati" },
                    { 2608305, 26, "Jupi" },
                    { 2608404, 26, "Jurema" },
                    { 2608453, 26, "Lagoa do Carro" },
                    { 2608503, 26, "Lagoa do Itaenga" },
                    { 2608602, 26, "Lagoa do Ouro" },
                    { 2608701, 26, "Lagoa dos Gatos" },
                    { 2608750, 26, "Lagoa Grande" },
                    { 2608800, 26, "Lajedo" },
                    { 2608909, 26, "Limoeiro" },
                    { 2609006, 26, "Macaparana" },
                    { 2609105, 26, "Machados" },
                    { 2609154, 26, "Manari" },
                    { 2609204, 26, "Maraial" },
                    { 2609303, 26, "Mirandiba" },
                    { 2609402, 26, "Moreno" },
                    { 2609501, 26, "Nazaré da Mata" },
                    { 2609600, 26, "Olinda" },
                    { 2609709, 26, "Orobó" },
                    { 2609808, 26, "Orocó" },
                    { 2609907, 26, "Ouricuri" },
                    { 2610004, 26, "Palmares" },
                    { 2610103, 26, "Palmeirina" },
                    { 2610202, 26, "Panelas" },
                    { 2610301, 26, "Paranatama" },
                    { 2610400, 26, "Parnamirim" },
                    { 2610509, 26, "Passira" },
                    { 2610608, 26, "Paudalho" },
                    { 2610707, 26, "Paulista" },
                    { 2610806, 26, "Pedra" },
                    { 2610905, 26, "Pesqueira" },
                    { 2611002, 26, "Petrolândia" },
                    { 2611101, 26, "Petrolina" },
                    { 2611200, 26, "Poção" },
                    { 2611309, 26, "Pombos" },
                    { 2611408, 26, "Primavera" },
                    { 2611507, 26, "Quipapá" },
                    { 2611533, 26, "Quixaba" },
                    { 2611606, 26, "Recife" },
                    { 2611705, 26, "Riacho das Almas" },
                    { 2611804, 26, "Ribeirão" },
                    { 2611903, 26, "Rio Formoso" },
                    { 2612000, 26, "Sairé" },
                    { 2612109, 26, "Salgadinho" },
                    { 2612208, 26, "Salgueiro" },
                    { 2612307, 26, "Saloá" },
                    { 2612406, 26, "Sanharó" },
                    { 2612455, 26, "Santa Cruz" },
                    { 2612471, 26, "Santa Cruz da Baixa Verde" },
                    { 2612505, 26, "Santa Cruz do Capibaribe" },
                    { 2612554, 26, "Santa Filomena" },
                    { 2612604, 26, "Santa Maria da Boa Vista" },
                    { 2612703, 26, "Santa Maria do Cambucá" },
                    { 2612802, 26, "Santa Terezinha" },
                    { 2612901, 26, "São Benedito do Sul" },
                    { 2613008, 26, "São Bento do Una" },
                    { 2613107, 26, "São Caitano" },
                    { 2613206, 26, "São João" },
                    { 2613305, 26, "São Joaquim do Monte" },
                    { 2613404, 26, "São José da Coroa Grande" },
                    { 2613503, 26, "São José do Belmonte" },
                    { 2613602, 26, "São José do Egito" },
                    { 2613701, 26, "São Lourenço da Mata" },
                    { 2613800, 26, "São Vicente Ferrer" },
                    { 2613909, 26, "Serra Talhada" },
                    { 2614006, 26, "Serrita" },
                    { 2614105, 26, "Sertânia" },
                    { 2614204, 26, "Sirinhaém" },
                    { 2614303, 26, "Moreilândia" },
                    { 2614402, 26, "Solidão" },
                    { 2614501, 26, "Surubim" },
                    { 2614600, 26, "Tabira" },
                    { 2614709, 26, "Tacaimbó" },
                    { 2614808, 26, "Tacaratu" },
                    { 2614857, 26, "Tamandaré" },
                    { 2615003, 26, "Taquaritinga do Norte" },
                    { 2615102, 26, "Terezinha" },
                    { 2615201, 26, "Terra Nova" },
                    { 2615300, 26, "Timbaúba" },
                    { 2615409, 26, "Toritama" },
                    { 2615508, 26, "Tracunhaém" },
                    { 2615607, 26, "Trindade" },
                    { 2615706, 26, "Triunfo" },
                    { 2615805, 26, "Tupanatinga" },
                    { 2615904, 26, "Tuparetama" },
                    { 2616001, 26, "Venturosa" },
                    { 2616100, 26, "Verdejante" },
                    { 2616183, 26, "Vertente do Lério" },
                    { 2616209, 26, "Vertentes" },
                    { 2616308, 26, "Vicência" },
                    { 2616407, 26, "Vitória de Santo Antão" },
                    { 2616506, 26, "Xexéu" },
                    { 2700102, 27, "Água Branca" },
                    { 2700201, 27, "Anadia" },
                    { 2700300, 27, "Arapiraca" },
                    { 2700409, 27, "Atalaia" },
                    { 2700508, 27, "Barra de Santo Antônio" },
                    { 2700607, 27, "Barra de São Miguel" },
                    { 2700706, 27, "Batalha" },
                    { 2700805, 27, "Belém" },
                    { 2700904, 27, "Belo Monte" },
                    { 2701001, 27, "Boca da Mata" },
                    { 2701100, 27, "Branquinha" },
                    { 2701209, 27, "Cacimbinhas" },
                    { 2701308, 27, "Cajueiro" },
                    { 2701357, 27, "Campestre" },
                    { 2701407, 27, "Campo Alegre" },
                    { 2701506, 27, "Campo Grande" },
                    { 2701605, 27, "Canapi" },
                    { 2701704, 27, "Capela" },
                    { 2701803, 27, "Carneiros" },
                    { 2701902, 27, "Chã Preta" },
                    { 2702009, 27, "Coité do Nóia" },
                    { 2702108, 27, "Colônia Leopoldina" },
                    { 2702207, 27, "Coqueiro Seco" },
                    { 2702306, 27, "Coruripe" },
                    { 2702355, 27, "Craíbas" },
                    { 2702405, 27, "Delmiro Gouveia" },
                    { 2702504, 27, "Dois Riachos" },
                    { 2702553, 27, "Estrela de Alagoas" },
                    { 2702603, 27, "Feira Grande" },
                    { 2702702, 27, "Feliz Deserto" },
                    { 2702801, 27, "Flexeiras" },
                    { 2702900, 27, "Girau do Ponciano" },
                    { 2703007, 27, "Ibateguara" },
                    { 2703106, 27, "Igaci" },
                    { 2703205, 27, "Igreja Nova" },
                    { 2703304, 27, "Inhapi" },
                    { 2703403, 27, "Jacaré dos Homens" },
                    { 2703502, 27, "Jacuípe" },
                    { 2703601, 27, "Japaratinga" },
                    { 2703700, 27, "Jaramataia" },
                    { 2703759, 27, "Jequiá da Praia" },
                    { 2703809, 27, "Joaquim Gomes" },
                    { 2703908, 27, "Jundiá" },
                    { 2704005, 27, "Junqueiro" },
                    { 2704104, 27, "Lagoa da Canoa" },
                    { 2704203, 27, "Limoeiro de Anadia" },
                    { 2704302, 27, "Maceió" },
                    { 2704401, 27, "Major Isidoro" },
                    { 2704500, 27, "Maragogi" },
                    { 2704609, 27, "Maravilha" },
                    { 2704708, 27, "Marechal Deodoro" },
                    { 2704807, 27, "Maribondo" },
                    { 2704906, 27, "Mar Vermelho" },
                    { 2705002, 27, "Mata Grande" },
                    { 2705101, 27, "Matriz de Camaragibe" },
                    { 2705200, 27, "Messias" },
                    { 2705309, 27, "Minador do Negrão" },
                    { 2705408, 27, "Monteirópolis" },
                    { 2705507, 27, "Murici" },
                    { 2705606, 27, "Novo Lino" },
                    { 2705705, 27, "Olho dÁgua das Flores" },
                    { 2705804, 27, "Olho dÁgua do Casado" },
                    { 2705903, 27, "Olho dÁgua Grande" },
                    { 2706000, 27, "Olivença" },
                    { 2706109, 27, "Ouro Branco" },
                    { 2706208, 27, "Palestina" },
                    { 2706307, 27, "Palmeira dos Índios" },
                    { 2706406, 27, "Pão de Açúcar" },
                    { 2706422, 27, "Pariconha" },
                    { 2706448, 27, "Paripueira" },
                    { 2706505, 27, "Passo de Camaragibe" },
                    { 2706604, 27, "Paulo Jacinto" },
                    { 2706703, 27, "Penedo" },
                    { 2706802, 27, "Piaçabuçu" },
                    { 2706901, 27, "Pilar" },
                    { 2707008, 27, "Pindoba" },
                    { 2707107, 27, "Piranhas" },
                    { 2707206, 27, "Poço das Trincheiras" },
                    { 2707305, 27, "Porto Calvo" },
                    { 2707404, 27, "Porto de Pedras" },
                    { 2707503, 27, "Porto Real do Colégio" },
                    { 2707602, 27, "Quebrangulo" },
                    { 2707701, 27, "Rio Largo" },
                    { 2707800, 27, "Roteiro" },
                    { 2707909, 27, "Santa Luzia do Norte" },
                    { 2708006, 27, "Santana do Ipanema" },
                    { 2708105, 27, "Santana do Mundaú" },
                    { 2708204, 27, "São Brás" },
                    { 2708303, 27, "São José da Laje" },
                    { 2708402, 27, "São José da Tapera" },
                    { 2708501, 27, "São Luís do Quitunde" },
                    { 2708600, 27, "São Miguel dos Campos" },
                    { 2708709, 27, "São Miguel dos Milagres" },
                    { 2708808, 27, "São Sebastião" },
                    { 2708907, 27, "Satuba" },
                    { 2708956, 27, "Senador Rui Palmeira" },
                    { 2709004, 27, "Tanque dArca" },
                    { 2709103, 27, "Taquarana" },
                    { 2709152, 27, "Teotônio Vilela" },
                    { 2709202, 27, "Traipu" },
                    { 2709301, 27, "União dos Palmares" },
                    { 2709400, 27, "Viçosa" },
                    { 2800100, 28, "Amparo de São Francisco" },
                    { 2800209, 28, "Aquidabã" },
                    { 2800308, 28, "Aracaju" },
                    { 2800407, 28, "Arauá" },
                    { 2800506, 28, "Areia Branca" },
                    { 2800605, 28, "Barra dos Coqueiros" },
                    { 2800670, 28, "Boquim" },
                    { 2800704, 28, "Brejo Grande" },
                    { 2801009, 28, "Campo do Brito" },
                    { 2801108, 28, "Canhoba" },
                    { 2801207, 28, "Canindé de São Francisco" },
                    { 2801306, 28, "Capela" },
                    { 2801405, 28, "Carira" },
                    { 2801504, 28, "Carmópolis" },
                    { 2801603, 28, "Cedro de São João" },
                    { 2801702, 28, "Cristinápolis" },
                    { 2801900, 28, "Cumbe" },
                    { 2802007, 28, "Divina Pastora" },
                    { 2802106, 28, "Estância" },
                    { 2802205, 28, "Feira Nova" },
                    { 2802304, 28, "Frei Paulo" },
                    { 2802403, 28, "Gararu" },
                    { 2802502, 28, "General Maynard" },
                    { 2802601, 28, "Gracho Cardoso" },
                    { 2802700, 28, "Ilha das Flores" },
                    { 2802809, 28, "Indiaroba" },
                    { 2802908, 28, "Itabaiana" },
                    { 2803005, 28, "Itabaianinha" },
                    { 2803104, 28, "Itabi" },
                    { 2803203, 28, "Itaporanga dAjuda" },
                    { 2803302, 28, "Japaratuba" },
                    { 2803401, 28, "Japoatã" },
                    { 2803500, 28, "Lagarto" },
                    { 2803609, 28, "Laranjeiras" },
                    { 2803708, 28, "Macambira" },
                    { 2803807, 28, "Malhada dos Bois" },
                    { 2803906, 28, "Malhador" },
                    { 2804003, 28, "Maruim" },
                    { 2804102, 28, "Moita Bonita" },
                    { 2804201, 28, "Monte Alegre de Sergipe" },
                    { 2804300, 28, "Muribeca" },
                    { 2804409, 28, "Neópolis" },
                    { 2804458, 28, "Nossa Senhora Aparecida" },
                    { 2804508, 28, "Nossa Senhora da Glória" },
                    { 2804607, 28, "Nossa Senhora das Dores" },
                    { 2804706, 28, "Nossa Senhora de Lourdes" },
                    { 2804805, 28, "Nossa Senhora do Socorro" },
                    { 2804904, 28, "Pacatuba" },
                    { 2805000, 28, "Pedra Mole" },
                    { 2805109, 28, "Pedrinhas" },
                    { 2805208, 28, "Pinhão" },
                    { 2805307, 28, "Pirambu" },
                    { 2805406, 28, "Poço Redondo" },
                    { 2805505, 28, "Poço Verde" },
                    { 2805604, 28, "Porto da Folha" },
                    { 2805703, 28, "Propriá" },
                    { 2805802, 28, "Riachão do Dantas" },
                    { 2805901, 28, "Riachuelo" },
                    { 2806008, 28, "Ribeirópolis" },
                    { 2806107, 28, "Rosário do Catete" },
                    { 2806206, 28, "Salgado" },
                    { 2806305, 28, "Santa Luzia do Itanhy" },
                    { 2806404, 28, "Santana do São Francisco" },
                    { 2806503, 28, "Santa Rosa de Lima" },
                    { 2806602, 28, "Santo Amaro das Brotas" },
                    { 2806701, 28, "São Cristóvão" },
                    { 2806800, 28, "São Domingos" },
                    { 2806909, 28, "São Francisco" },
                    { 2807006, 28, "São Miguel do Aleixo" },
                    { 2807105, 28, "Simão Dias" },
                    { 2807204, 28, "Siriri" },
                    { 2807303, 28, "Telha" },
                    { 2807402, 28, "Tobias Barreto" },
                    { 2807501, 28, "Tomar do Geru" },
                    { 2807600, 28, "Umbaúba" },
                    { 2900108, 29, "Abaíra" },
                    { 2900207, 29, "Abaré" },
                    { 2900306, 29, "Acajutiba" },
                    { 2900355, 29, "Adustina" },
                    { 2900405, 29, "Água Fria" },
                    { 2900504, 29, "Érico Cardoso" },
                    { 2900603, 29, "Aiquara" },
                    { 2900702, 29, "Alagoinhas" },
                    { 2900801, 29, "Alcobaça" },
                    { 2900900, 29, "Almadina" },
                    { 2901007, 29, "Amargosa" },
                    { 2901106, 29, "Amélia Rodrigues" },
                    { 2901155, 29, "América Dourada" },
                    { 2901205, 29, "Anagé" },
                    { 2901304, 29, "Andaraí" },
                    { 2901353, 29, "Andorinha" },
                    { 2901403, 29, "Angical" },
                    { 2901502, 29, "Anguera" },
                    { 2901601, 29, "Antas" },
                    { 2901700, 29, "Antônio Cardoso" },
                    { 2901809, 29, "Antônio Gonçalves" },
                    { 2901908, 29, "Aporá" },
                    { 2901957, 29, "Apuarema" },
                    { 2902005, 29, "Aracatu" },
                    { 2902054, 29, "Araças" },
                    { 2902104, 29, "Araci" },
                    { 2902203, 29, "Aramari" },
                    { 2902252, 29, "Arataca" },
                    { 2902302, 29, "Aratuípe" },
                    { 2902401, 29, "Aurelino Leal" },
                    { 2902500, 29, "Baianópolis" },
                    { 2902609, 29, "Baixa Grande" },
                    { 2902658, 29, "Banzaê" },
                    { 2902708, 29, "Barra" },
                    { 2902807, 29, "Barra da Estiva" },
                    { 2902906, 29, "Barra do Choça" },
                    { 2903003, 29, "Barra do Mendes" },
                    { 2903102, 29, "Barra do Rocha" },
                    { 2903201, 29, "Barreiras" },
                    { 2903235, 29, "Barro Alto" },
                    { 2903276, 29, "Barrocas" },
                    { 2903300, 29, "Barro Preto" },
                    { 2903409, 29, "Belmonte" },
                    { 2903508, 29, "Belo Campo" },
                    { 2903607, 29, "Biritinga" },
                    { 2903706, 29, "Boa Nova" },
                    { 2903805, 29, "Boa Vista do Tupim" },
                    { 2903904, 29, "Bom Jesus da Lapa" },
                    { 2903953, 29, "Bom Jesus da Serra" },
                    { 2904001, 29, "Boninal" },
                    { 2904050, 29, "Bonito" },
                    { 2904100, 29, "Boquira" },
                    { 2904209, 29, "Botuporã" },
                    { 2904308, 29, "Brejões" },
                    { 2904407, 29, "Brejolândia" },
                    { 2904506, 29, "Brotas de Macaúbas" },
                    { 2904605, 29, "Brumado" },
                    { 2904704, 29, "Buerarema" },
                    { 2904753, 29, "Buritirama" },
                    { 2904803, 29, "Caatiba" },
                    { 2904852, 29, "Cabaceiras do Paraguaçu" },
                    { 2904902, 29, "Cachoeira" },
                    { 2905008, 29, "Caculé" },
                    { 2905107, 29, "Caém" },
                    { 2905156, 29, "Caetanos" },
                    { 2905206, 29, "Caetité" },
                    { 2905305, 29, "Cafarnaum" },
                    { 2905404, 29, "Cairu" },
                    { 2905503, 29, "Caldeirão Grande" },
                    { 2905602, 29, "Camacan" },
                    { 2905701, 29, "Camaçari" },
                    { 2905800, 29, "Camamu" },
                    { 2905909, 29, "Campo Alegre de Lourdes" },
                    { 2906006, 29, "Campo Formoso" },
                    { 2906105, 29, "Canápolis" },
                    { 2906204, 29, "Canarana" },
                    { 2906303, 29, "Canavieiras" },
                    { 2906402, 29, "Candeal" },
                    { 2906501, 29, "Candeias" },
                    { 2906600, 29, "Candiba" },
                    { 2906709, 29, "Cândido Sales" },
                    { 2906808, 29, "Cansanção" },
                    { 2906824, 29, "Canudos" },
                    { 2906857, 29, "Capela do Alto Alegre" },
                    { 2906873, 29, "Capim Grosso" },
                    { 2906899, 29, "Caraíbas" },
                    { 2906907, 29, "Caravelas" },
                    { 2907004, 29, "Cardeal da Silva" },
                    { 2907103, 29, "Carinhanha" },
                    { 2907202, 29, "Casa Nova" },
                    { 2907301, 29, "Castro Alves" },
                    { 2907400, 29, "Catolândia" },
                    { 2907509, 29, "Catu" },
                    { 2907558, 29, "Caturama" },
                    { 2907608, 29, "Central" },
                    { 2907707, 29, "Chorrochó" },
                    { 2907806, 29, "Cícero Dantas" },
                    { 2907905, 29, "Cipó" },
                    { 2908002, 29, "Coaraci" },
                    { 2908101, 29, "Cocos" },
                    { 2908200, 29, "Conceição da Feira" },
                    { 2908309, 29, "Conceição do Almeida" },
                    { 2908408, 29, "Conceição do Coité" },
                    { 2908507, 29, "Conceição do Jacuípe" },
                    { 2908606, 29, "Conde" },
                    { 2908705, 29, "Condeúba" },
                    { 2908804, 29, "Contendas do Sincorá" },
                    { 2908903, 29, "Coração de Maria" },
                    { 2909000, 29, "Cordeiros" },
                    { 2909109, 29, "Coribe" },
                    { 2909208, 29, "Coronel João Sá" },
                    { 2909307, 29, "Correntina" },
                    { 2909406, 29, "Cotegipe" },
                    { 2909505, 29, "Cravolândia" },
                    { 2909604, 29, "Crisópolis" },
                    { 2909703, 29, "Cristópolis" },
                    { 2909802, 29, "Cruz das Almas" },
                    { 2909901, 29, "Curaçá" },
                    { 2910008, 29, "Dário Meira" },
                    { 2910057, 29, "Dias dÁvila" },
                    { 2910107, 29, "Dom Basílio" },
                    { 2910206, 29, "Dom Macedo Costa" },
                    { 2910305, 29, "Elísio Medrado" },
                    { 2910404, 29, "Encruzilhada" },
                    { 2910503, 29, "Entre Rios" },
                    { 2910602, 29, "Esplanada" },
                    { 2910701, 29, "Euclides da Cunha" },
                    { 2910727, 29, "Eunápolis" },
                    { 2910750, 29, "Fátima" },
                    { 2910776, 29, "Feira da Mata" },
                    { 2910800, 29, "Feira de Santana" },
                    { 2910859, 29, "Filadélfia" },
                    { 2910909, 29, "Firmino Alves" },
                    { 2911006, 29, "Floresta Azul" },
                    { 2911105, 29, "Formosa do Rio Preto" },
                    { 2911204, 29, "Gandu" },
                    { 2911253, 29, "Gavião" },
                    { 2911303, 29, "Gentio do Ouro" },
                    { 2911402, 29, "Glória" },
                    { 2911501, 29, "Gongogi" },
                    { 2911600, 29, "Governador Mangabeira" },
                    { 2911659, 29, "Guajeru" },
                    { 2911709, 29, "Guanambi" },
                    { 2911808, 29, "Guaratinga" },
                    { 2911857, 29, "Heliópolis" },
                    { 2911907, 29, "Iaçu" },
                    { 2912004, 29, "Ibiassucê" },
                    { 2912103, 29, "Ibicaraí" },
                    { 2912202, 29, "Ibicoara" },
                    { 2912301, 29, "Ibicuí" },
                    { 2912400, 29, "Ibipeba" },
                    { 2912509, 29, "Ibipitanga" },
                    { 2912608, 29, "Ibiquera" },
                    { 2912707, 29, "Ibirapitanga" },
                    { 2912806, 29, "Ibirapuã" },
                    { 2912905, 29, "Ibirataia" },
                    { 2913002, 29, "Ibitiara" },
                    { 2913101, 29, "Ibititá" },
                    { 2913200, 29, "Ibotirama" },
                    { 2913309, 29, "Ichu" },
                    { 2913408, 29, "Igaporã" },
                    { 2913457, 29, "Igrapiúna" },
                    { 2913507, 29, "Iguaí" },
                    { 2913606, 29, "Ilhéus" },
                    { 2913705, 29, "Inhambupe" },
                    { 2913804, 29, "Ipecaetá" },
                    { 2913903, 29, "Ipiaú" },
                    { 2914000, 29, "Ipirá" },
                    { 2914109, 29, "Ipupiara" },
                    { 2914208, 29, "Irajuba" },
                    { 2914307, 29, "Iramaia" },
                    { 2914406, 29, "Iraquara" },
                    { 2914505, 29, "Irará" },
                    { 2914604, 29, "Irecê" },
                    { 2914653, 29, "Itabela" },
                    { 2914703, 29, "Itaberaba" },
                    { 2914802, 29, "Itabuna" },
                    { 2914901, 29, "Itacaré" },
                    { 2915007, 29, "Itaeté" },
                    { 2915106, 29, "Itagi" },
                    { 2915205, 29, "Itagibá" },
                    { 2915304, 29, "Itagimirim" },
                    { 2915353, 29, "Itaguaçu da Bahia" },
                    { 2915403, 29, "Itaju do Colônia" },
                    { 2915502, 29, "Itajuípe" },
                    { 2915601, 29, "Itamaraju" },
                    { 2915700, 29, "Itamari" },
                    { 2915809, 29, "Itambé" },
                    { 2915908, 29, "Itanagra" },
                    { 2916005, 29, "Itanhém" },
                    { 2916104, 29, "Itaparica" },
                    { 2916203, 29, "Itapé" },
                    { 2916302, 29, "Itapebi" },
                    { 2916401, 29, "Itapetinga" },
                    { 2916500, 29, "Itapicuru" },
                    { 2916609, 29, "Itapitanga" },
                    { 2916708, 29, "Itaquara" },
                    { 2916807, 29, "Itarantim" },
                    { 2916856, 29, "Itatim" },
                    { 2916906, 29, "Itiruçu" },
                    { 2917003, 29, "Itiúba" },
                    { 2917102, 29, "Itororó" },
                    { 2917201, 29, "Ituaçu" },
                    { 2917300, 29, "Ituberá" },
                    { 2917334, 29, "Iuiú" },
                    { 2917359, 29, "Jaborandi" },
                    { 2917409, 29, "Jacaraci" },
                    { 2917508, 29, "Jacobina" },
                    { 2917607, 29, "Jaguaquara" },
                    { 2917706, 29, "Jaguarari" },
                    { 2917805, 29, "Jaguaripe" },
                    { 2917904, 29, "Jandaíra" },
                    { 2918001, 29, "Jequié" },
                    { 2918100, 29, "Jeremoabo" },
                    { 2918209, 29, "Jiquiriçá" },
                    { 2918308, 29, "Jitaúna" },
                    { 2918357, 29, "João Dourado" },
                    { 2918407, 29, "Juazeiro" },
                    { 2918456, 29, "Jucuruçu" },
                    { 2918506, 29, "Jussara" },
                    { 2918555, 29, "Jussari" },
                    { 2918605, 29, "Jussiape" },
                    { 2918704, 29, "Lafaiete Coutinho" },
                    { 2918753, 29, "Lagoa Real" },
                    { 2918803, 29, "Laje" },
                    { 2918902, 29, "Lajedão" },
                    { 2919009, 29, "Lajedinho" },
                    { 2919058, 29, "Lajedo do Tabocal" },
                    { 2919108, 29, "Lamarão" },
                    { 2919157, 29, "Lapão" },
                    { 2919207, 29, "Lauro de Freitas" },
                    { 2919306, 29, "Lençóis" },
                    { 2919405, 29, "Licínio de Almeida" },
                    { 2919504, 29, "Livramento de Nossa Senhora" },
                    { 2919553, 29, "Luís Eduardo Magalhães" },
                    { 2919603, 29, "Macajuba" },
                    { 2919702, 29, "Macarani" },
                    { 2919801, 29, "Macaúbas" },
                    { 2919900, 29, "Macururé" },
                    { 2919926, 29, "Madre de Deus" },
                    { 2919959, 29, "Maetinga" },
                    { 2920007, 29, "Maiquinique" },
                    { 2920106, 29, "Mairi" },
                    { 2920205, 29, "Malhada" },
                    { 2920304, 29, "Malhada de Pedras" },
                    { 2920403, 29, "Manoel Vitorino" },
                    { 2920452, 29, "Mansidão" },
                    { 2920502, 29, "Maracás" },
                    { 2920601, 29, "Maragogipe" },
                    { 2920700, 29, "Maraú" },
                    { 2920809, 29, "Marcionílio Souza" },
                    { 2920908, 29, "Mascote" },
                    { 2921005, 29, "Mata de São João" },
                    { 2921054, 29, "Matina" },
                    { 2921104, 29, "Medeiros Neto" },
                    { 2921203, 29, "Miguel Calmon" },
                    { 2921302, 29, "Milagres" },
                    { 2921401, 29, "Mirangaba" },
                    { 2921450, 29, "Mirante" },
                    { 2921500, 29, "Monte Santo" },
                    { 2921609, 29, "Morpará" },
                    { 2921708, 29, "Morro do Chapéu" },
                    { 2921807, 29, "Mortugaba" },
                    { 2921906, 29, "Mucugê" },
                    { 2922003, 29, "Mucuri" },
                    { 2922052, 29, "Mulungu do Morro" },
                    { 2922102, 29, "Mundo Novo" },
                    { 2922201, 29, "Muniz Ferreira" },
                    { 2922250, 29, "Muquém de São Francisco" },
                    { 2922300, 29, "Muritiba" },
                    { 2922409, 29, "Mutuípe" },
                    { 2922508, 29, "Nazaré" },
                    { 2922607, 29, "Nilo Peçanha" },
                    { 2922656, 29, "Nordestina" },
                    { 2922706, 29, "Nova Canaã" },
                    { 2922730, 29, "Nova Fátima" },
                    { 2922755, 29, "Nova Ibiá" },
                    { 2922805, 29, "Nova Itarana" },
                    { 2922854, 29, "Nova Redenção" },
                    { 2922904, 29, "Nova Soure" },
                    { 2923001, 29, "Nova Viçosa" },
                    { 2923035, 29, "Novo Horizonte" },
                    { 2923050, 29, "Novo Triunfo" },
                    { 2923100, 29, "Olindina" },
                    { 2923209, 29, "Oliveira dos Brejinhos" },
                    { 2923308, 29, "Ouriçangas" },
                    { 2923357, 29, "Ourolândia" },
                    { 2923407, 29, "Palmas de Monte Alto" },
                    { 2923506, 29, "Palmeiras" },
                    { 2923605, 29, "Paramirim" },
                    { 2923704, 29, "Paratinga" },
                    { 2923803, 29, "Paripiranga" },
                    { 2923902, 29, "Pau Brasil" },
                    { 2924009, 29, "Paulo Afonso" },
                    { 2924058, 29, "Pé de Serra" },
                    { 2924108, 29, "Pedrão" },
                    { 2924207, 29, "Pedro Alexandre" },
                    { 2924306, 29, "Piatã" },
                    { 2924405, 29, "Pilão Arcado" },
                    { 2924504, 29, "Pindaí" },
                    { 2924603, 29, "Pindobaçu" },
                    { 2924652, 29, "Pintadas" },
                    { 2924678, 29, "Piraí do Norte" },
                    { 2924702, 29, "Piripá" },
                    { 2924801, 29, "Piritiba" },
                    { 2924900, 29, "Planaltino" },
                    { 2925006, 29, "Planalto" },
                    { 2925105, 29, "Poções" },
                    { 2925204, 29, "Pojuca" },
                    { 2925253, 29, "Ponto Novo" },
                    { 2925303, 29, "Porto Seguro" },
                    { 2925402, 29, "Potiraguá" },
                    { 2925501, 29, "Prado" },
                    { 2925600, 29, "Presidente Dutra" },
                    { 2925709, 29, "Presidente Jânio Quadros" },
                    { 2925758, 29, "Presidente Tancredo Neves" },
                    { 2925808, 29, "Queimadas" },
                    { 2925907, 29, "Quijingue" },
                    { 2925931, 29, "Quixabeira" },
                    { 2925956, 29, "Rafael Jambeiro" },
                    { 2926004, 29, "Remanso" },
                    { 2926103, 29, "Retirolândia" },
                    { 2926202, 29, "Riachão das Neves" },
                    { 2926301, 29, "Riachão do Jacuípe" },
                    { 2926400, 29, "Riacho de Santana" },
                    { 2926509, 29, "Ribeira do Amparo" },
                    { 2926608, 29, "Ribeira do Pombal" },
                    { 2926657, 29, "Ribeirão do Largo" },
                    { 2926707, 29, "Rio de Contas" },
                    { 2926806, 29, "Rio do Antônio" },
                    { 2926905, 29, "Rio do Pires" },
                    { 2927002, 29, "Rio Real" },
                    { 2927101, 29, "Rodelas" },
                    { 2927200, 29, "Ruy Barbosa" },
                    { 2927309, 29, "Salinas da Margarida" },
                    { 2927408, 29, "Salvador" },
                    { 2927507, 29, "Santa Bárbara" },
                    { 2927606, 29, "Santa Brígida" },
                    { 2927705, 29, "Santa Cruz Cabrália" },
                    { 2927804, 29, "Santa Cruz da Vitória" },
                    { 2927903, 29, "Santa Inês" },
                    { 2928000, 29, "Santaluz" },
                    { 2928059, 29, "Santa Luzia" },
                    { 2928109, 29, "Santa Maria da Vitória" },
                    { 2928208, 29, "Santana" },
                    { 2928307, 29, "Santanópolis" },
                    { 2928406, 29, "Santa Rita de Cássia" },
                    { 2928505, 29, "Santa Teresinha" },
                    { 2928604, 29, "Santo Amaro" },
                    { 2928703, 29, "Santo Antônio de Jesus" },
                    { 2928802, 29, "Santo Estêvão" },
                    { 2928901, 29, "São Desidério" },
                    { 2928950, 29, "São Domingos" },
                    { 2929008, 29, "São Félix" },
                    { 2929057, 29, "São Félix do Coribe" },
                    { 2929107, 29, "São Felipe" },
                    { 2929206, 29, "São Francisco do Conde" },
                    { 2929255, 29, "São Gabriel" },
                    { 2929305, 29, "São Gonçalo dos Campos" },
                    { 2929354, 29, "São José da Vitória" },
                    { 2929370, 29, "São José do Jacuípe" },
                    { 2929404, 29, "São Miguel das Matas" },
                    { 2929503, 29, "São Sebastião do Passé" },
                    { 2929602, 29, "Sapeaçu" },
                    { 2929701, 29, "Sátiro Dias" },
                    { 2929750, 29, "Saubara" },
                    { 2929800, 29, "Saúde" },
                    { 2929909, 29, "Seabra" },
                    { 2930006, 29, "Sebastião Laranjeiras" },
                    { 2930105, 29, "Senhor do Bonfim" },
                    { 2930154, 29, "Serra do Ramalho" },
                    { 2930204, 29, "Sento Sé" },
                    { 2930303, 29, "Serra Dourada" },
                    { 2930402, 29, "Serra Preta" },
                    { 2930501, 29, "Serrinha" },
                    { 2930600, 29, "Serrolândia" },
                    { 2930709, 29, "Simões Filho" },
                    { 2930758, 29, "Sítio do Mato" },
                    { 2930766, 29, "Sítio do Quinto" },
                    { 2930774, 29, "Sobradinho" },
                    { 2930808, 29, "Souto Soares" },
                    { 2930907, 29, "Tabocas do Brejo Velho" },
                    { 2931004, 29, "Tanhaçu" },
                    { 2931053, 29, "Tanque Novo" },
                    { 2931103, 29, "Tanquinho" },
                    { 2931202, 29, "Taperoá" },
                    { 2931301, 29, "Tapiramutá" },
                    { 2931350, 29, "Teixeira de Freitas" },
                    { 2931400, 29, "Teodoro Sampaio" },
                    { 2931509, 29, "Teofilândia" },
                    { 2931608, 29, "Teolândia" },
                    { 2931707, 29, "Terra Nova" },
                    { 2931806, 29, "Tremedal" },
                    { 2931905, 29, "Tucano" },
                    { 2932002, 29, "Uauá" },
                    { 2932101, 29, "Ubaíra" },
                    { 2932200, 29, "Ubaitaba" },
                    { 2932309, 29, "Ubatã" },
                    { 2932408, 29, "Uibaí" },
                    { 2932457, 29, "Umburanas" },
                    { 2932507, 29, "Una" },
                    { 2932606, 29, "Urandi" },
                    { 2932705, 29, "Uruçuca" },
                    { 2932804, 29, "Utinga" },
                    { 2932903, 29, "Valença" },
                    { 2933000, 29, "Valente" },
                    { 2933059, 29, "Várzea da Roça" },
                    { 2933109, 29, "Várzea do Poço" },
                    { 2933158, 29, "Várzea Nova" },
                    { 2933174, 29, "Varzedo" },
                    { 2933208, 29, "Vera Cruz" },
                    { 2933257, 29, "Vereda" },
                    { 2933307, 29, "Vitória da Conquista" },
                    { 2933406, 29, "Wagner" },
                    { 2933455, 29, "Wanderley" },
                    { 2933505, 29, "Wenceslau Guimarães" },
                    { 2933604, 29, "Xique-Xique" },
                    { 3100104, 31, "Abadia dos Dourados" },
                    { 3100203, 31, "Abaeté" },
                    { 3100302, 31, "Abre Campo" },
                    { 3100401, 31, "Acaiaca" },
                    { 3100500, 31, "Açucena" },
                    { 3100609, 31, "Água Boa" },
                    { 3100708, 31, "Água Comprida" },
                    { 3100807, 31, "Aguanil" },
                    { 3100906, 31, "Águas Formosas" },
                    { 3101003, 31, "Águas Vermelhas" },
                    { 3101102, 31, "Aimorés" },
                    { 3101201, 31, "Aiuruoca" },
                    { 3101300, 31, "Alagoa" },
                    { 3101409, 31, "Albertina" },
                    { 3101508, 31, "Além Paraíba" },
                    { 3101607, 31, "Alfenas" },
                    { 3101631, 31, "Alfredo Vasconcelos" },
                    { 3101706, 31, "Almenara" },
                    { 3101805, 31, "Alpercata" },
                    { 3101904, 31, "Alpinópolis" },
                    { 3102001, 31, "Alterosa" },
                    { 3102050, 31, "Alto Caparaó" },
                    { 3102100, 31, "Alto Rio Doce" },
                    { 3102209, 31, "Alvarenga" },
                    { 3102308, 31, "Alvinópolis" },
                    { 3102407, 31, "Alvorada de Minas" },
                    { 3102506, 31, "Amparo do Serra" },
                    { 3102605, 31, "Andradas" },
                    { 3102704, 31, "Cachoeira de Pajeú" },
                    { 3102803, 31, "Andrelândia" },
                    { 3102852, 31, "Angelândia" },
                    { 3102902, 31, "Antônio Carlos" },
                    { 3103009, 31, "Antônio Dias" },
                    { 3103108, 31, "Antônio Prado de Minas" },
                    { 3103207, 31, "Araçaí" },
                    { 3103306, 31, "Aracitaba" },
                    { 3103405, 31, "Araçuaí" },
                    { 3103504, 31, "Araguari" },
                    { 3103603, 31, "Arantina" },
                    { 3103702, 31, "Araponga" },
                    { 3103751, 31, "Araporã" },
                    { 3103801, 31, "Arapuá" },
                    { 3103900, 31, "Araújos" },
                    { 3104007, 31, "Araxá" },
                    { 3104106, 31, "Arceburgo" },
                    { 3104205, 31, "Arcos" },
                    { 3104304, 31, "Areado" },
                    { 3104403, 31, "Argirita" },
                    { 3104452, 31, "Aricanduva" },
                    { 3104502, 31, "Arinos" },
                    { 3104601, 31, "Astolfo Dutra" },
                    { 3104700, 31, "Ataléia" },
                    { 3104809, 31, "Augusto de Lima" },
                    { 3104908, 31, "Baependi" },
                    { 3105004, 31, "Baldim" },
                    { 3105103, 31, "Bambuí" },
                    { 3105202, 31, "Bandeira" },
                    { 3105301, 31, "Bandeira do Sul" },
                    { 3105400, 31, "Barão de Cocais" },
                    { 3105509, 31, "Barão de Monte Alto" },
                    { 3105608, 31, "Barbacena" },
                    { 3105707, 31, "Barra Longa" },
                    { 3105905, 31, "Barroso" },
                    { 3106002, 31, "Bela Vista de Minas" },
                    { 3106101, 31, "Belmiro Braga" },
                    { 3106200, 31, "Belo Horizonte" },
                    { 3106309, 31, "Belo Oriente" },
                    { 3106408, 31, "Belo Vale" },
                    { 3106507, 31, "Berilo" },
                    { 3106606, 31, "Bertópolis" },
                    { 3106655, 31, "Berizal" },
                    { 3106705, 31, "Betim" },
                    { 3106804, 31, "Bias Fortes" },
                    { 3106903, 31, "Bicas" },
                    { 3107000, 31, "Biquinhas" },
                    { 3107109, 31, "Boa Esperança" },
                    { 3107208, 31, "Bocaina de Minas" },
                    { 3107307, 31, "Bocaiúva" },
                    { 3107406, 31, "Bom Despacho" },
                    { 3107505, 31, "Bom Jardim de Minas" },
                    { 3107604, 31, "Bom Jesus da Penha" },
                    { 3107703, 31, "Bom Jesus do Amparo" },
                    { 3107802, 31, "Bom Jesus do Galho" },
                    { 3107901, 31, "Bom Repouso" },
                    { 3108008, 31, "Bom Sucesso" },
                    { 3108107, 31, "Bonfim" },
                    { 3108206, 31, "Bonfinópolis de Minas" },
                    { 3108255, 31, "Bonito de Minas" },
                    { 3108305, 31, "Borda da Mata" },
                    { 3108404, 31, "Botelhos" },
                    { 3108503, 31, "Botumirim" },
                    { 3108552, 31, "Brasilândia de Minas" },
                    { 3108602, 31, "Brasília de Minas" },
                    { 3108701, 31, "Brás Pires" },
                    { 3108800, 31, "Braúnas" },
                    { 3108909, 31, "Brasópolis" },
                    { 3109006, 31, "Brumadinho" },
                    { 3109105, 31, "Bueno Brandão" },
                    { 3109204, 31, "Buenópolis" },
                    { 3109253, 31, "Bugre" },
                    { 3109303, 31, "Buritis" },
                    { 3109402, 31, "Buritizeiro" },
                    { 3109451, 31, "Cabeceira Grande" },
                    { 3109501, 31, "Cabo Verde" },
                    { 3109600, 31, "Cachoeira da Prata" },
                    { 3109709, 31, "Cachoeira de Minas" },
                    { 3109808, 31, "Cachoeira Dourada" },
                    { 3109907, 31, "Caetanópolis" },
                    { 3110004, 31, "Caeté" },
                    { 3110103, 31, "Caiana" },
                    { 3110202, 31, "Cajuri" },
                    { 3110301, 31, "Caldas" },
                    { 3110400, 31, "Camacho" },
                    { 3110509, 31, "Camanducaia" },
                    { 3110608, 31, "Cambuí" },
                    { 3110707, 31, "Cambuquira" },
                    { 3110806, 31, "Campanário" },
                    { 3110905, 31, "Campanha" },
                    { 3111002, 31, "Campestre" },
                    { 3111101, 31, "Campina Verde" },
                    { 3111150, 31, "Campo Azul" },
                    { 3111200, 31, "Campo Belo" },
                    { 3111309, 31, "Campo do Meio" },
                    { 3111408, 31, "Campo Florido" },
                    { 3111507, 31, "Campos Altos" },
                    { 3111606, 31, "Campos Gerais" },
                    { 3111705, 31, "Canaã" },
                    { 3111804, 31, "Canápolis" },
                    { 3111903, 31, "Cana Verde" },
                    { 3112000, 31, "Candeias" },
                    { 3112059, 31, "Cantagalo" },
                    { 3112109, 31, "Caparaó" },
                    { 3112208, 31, "Capela Nova" },
                    { 3112307, 31, "Capelinha" },
                    { 3112406, 31, "Capetinga" },
                    { 3112505, 31, "Capim Branco" },
                    { 3112604, 31, "Capinópolis" },
                    { 3112653, 31, "Capitão Andrade" },
                    { 3112703, 31, "Capitão Enéas" },
                    { 3112802, 31, "Capitólio" },
                    { 3112901, 31, "Caputira" },
                    { 3113008, 31, "Caraí" },
                    { 3113107, 31, "Caranaíba" },
                    { 3113206, 31, "Carandaí" },
                    { 3113305, 31, "Carangola" },
                    { 3113404, 31, "Caratinga" },
                    { 3113503, 31, "Carbonita" },
                    { 3113602, 31, "Careaçu" },
                    { 3113701, 31, "Carlos Chagas" },
                    { 3113800, 31, "Carmésia" },
                    { 3113909, 31, "Carmo da Cachoeira" },
                    { 3114006, 31, "Carmo da Mata" },
                    { 3114105, 31, "Carmo de Minas" },
                    { 3114204, 31, "Carmo do Cajuru" },
                    { 3114303, 31, "Carmo do Paranaíba" },
                    { 3114402, 31, "Carmo do Rio Claro" },
                    { 3114501, 31, "Carmópolis de Minas" },
                    { 3114550, 31, "Carneirinho" },
                    { 3114600, 31, "Carrancas" },
                    { 3114709, 31, "Carvalhópolis" },
                    { 3114808, 31, "Carvalhos" },
                    { 3114907, 31, "Casa Grande" },
                    { 3115003, 31, "Cascalho Rico" },
                    { 3115102, 31, "Cássia" },
                    { 3115201, 31, "Conceição da Barra de Minas" },
                    { 3115300, 31, "Cataguases" },
                    { 3115359, 31, "Catas Altas" },
                    { 3115409, 31, "Catas Altas da Noruega" },
                    { 3115458, 31, "Catuji" },
                    { 3115474, 31, "Catuti" },
                    { 3115508, 31, "Caxambu" },
                    { 3115607, 31, "Cedro do Abaeté" },
                    { 3115706, 31, "Central de Minas" },
                    { 3115805, 31, "Centralina" },
                    { 3115904, 31, "Chácara" },
                    { 3116001, 31, "Chalé" },
                    { 3116100, 31, "Chapada do Norte" },
                    { 3116159, 31, "Chapada Gaúcha" },
                    { 3116209, 31, "Chiador" },
                    { 3116308, 31, "Cipotânea" },
                    { 3116407, 31, "Claraval" },
                    { 3116506, 31, "Claro dos Poções" },
                    { 3116605, 31, "Cláudio" },
                    { 3116704, 31, "Coimbra" },
                    { 3116803, 31, "Coluna" },
                    { 3116902, 31, "Comendador Gomes" },
                    { 3117009, 31, "Comercinho" },
                    { 3117108, 31, "Conceição da Aparecida" },
                    { 3117207, 31, "Conceição das Pedras" },
                    { 3117306, 31, "Conceição das Alagoas" },
                    { 3117405, 31, "Conceição de Ipanema" },
                    { 3117504, 31, "Conceição do Mato Dentro" },
                    { 3117603, 31, "Conceição do Pará" },
                    { 3117702, 31, "Conceição do Rio Verde" },
                    { 3117801, 31, "Conceição dos Ouros" },
                    { 3117836, 31, "Cônego Marinho" },
                    { 3117876, 31, "Confins" },
                    { 3117900, 31, "Congonhal" },
                    { 3118007, 31, "Congonhas" },
                    { 3118106, 31, "Congonhas do Norte" },
                    { 3118205, 31, "Conquista" },
                    { 3118304, 31, "Conselheiro Lafaiete" },
                    { 3118403, 31, "Conselheiro Pena" },
                    { 3118502, 31, "Consolação" },
                    { 3118601, 31, "Contagem" },
                    { 3118700, 31, "Coqueiral" },
                    { 3118809, 31, "Coração de Jesus" },
                    { 3118908, 31, "Cordisburgo" },
                    { 3119005, 31, "Cordislândia" },
                    { 3119104, 31, "Corinto" },
                    { 3119203, 31, "Coroaci" },
                    { 3119302, 31, "Coromandel" },
                    { 3119401, 31, "Coronel Fabriciano" },
                    { 3119500, 31, "Coronel Murta" },
                    { 3119609, 31, "Coronel Pacheco" },
                    { 3119708, 31, "Coronel Xavier Chaves" },
                    { 3119807, 31, "Córrego Danta" },
                    { 3119906, 31, "Córrego do Bom Jesus" },
                    { 3119955, 31, "Córrego Fundo" },
                    { 3120003, 31, "Córrego Novo" },
                    { 3120102, 31, "Couto de Magalhães de Minas" },
                    { 3120151, 31, "Crisólita" },
                    { 3120201, 31, "Cristais" },
                    { 3120300, 31, "Cristália" },
                    { 3120409, 31, "Cristiano Otoni" },
                    { 3120508, 31, "Cristina" },
                    { 3120607, 31, "Crucilândia" },
                    { 3120706, 31, "Cruzeiro da Fortaleza" },
                    { 3120805, 31, "Cruzília" },
                    { 3120839, 31, "Cuparaque" },
                    { 3120870, 31, "Curral de Dentro" },
                    { 3120904, 31, "Curvelo" },
                    { 3121001, 31, "Datas" },
                    { 3121100, 31, "Delfim Moreira" },
                    { 3121209, 31, "Delfinópolis" },
                    { 3121258, 31, "Delta" },
                    { 3121308, 31, "Descoberto" },
                    { 3121407, 31, "Desterro de Entre Rios" },
                    { 3121506, 31, "Desterro do Melo" },
                    { 3121605, 31, "Diamantina" },
                    { 3121704, 31, "Diogo de Vasconcelos" },
                    { 3121803, 31, "Dionísio" },
                    { 3121902, 31, "Divinésia" },
                    { 3122009, 31, "Divino" },
                    { 3122108, 31, "Divino das Laranjeiras" },
                    { 3122207, 31, "Divinolândia de Minas" },
                    { 3122306, 31, "Divinópolis" },
                    { 3122355, 31, "Divisa Alegre" },
                    { 3122405, 31, "Divisa Nova" },
                    { 3122454, 31, "Divisópolis" },
                    { 3122470, 31, "Dom Bosco" },
                    { 3122504, 31, "Dom Cavati" },
                    { 3122603, 31, "Dom Joaquim" },
                    { 3122702, 31, "Dom Silvério" },
                    { 3122801, 31, "Dom Viçoso" },
                    { 3122900, 31, "Dona Eusébia" },
                    { 3123007, 31, "Dores de Campos" },
                    { 3123106, 31, "Dores de Guanhães" },
                    { 3123205, 31, "Dores do Indaiá" },
                    { 3123304, 31, "Dores do Turvo" },
                    { 3123403, 31, "Doresópolis" },
                    { 3123502, 31, "Douradoquara" },
                    { 3123528, 31, "Durandé" },
                    { 3123601, 31, "Elói Mendes" },
                    { 3123700, 31, "Engenheiro Caldas" },
                    { 3123809, 31, "Engenheiro Navarro" },
                    { 3123858, 31, "Entre Folhas" },
                    { 3123908, 31, "Entre Rios de Minas" },
                    { 3124005, 31, "Ervália" },
                    { 3124104, 31, "Esmeraldas" },
                    { 3124203, 31, "Espera Feliz" },
                    { 3124302, 31, "Espinosa" },
                    { 3124401, 31, "Espírito Santo do Dourado" },
                    { 3124500, 31, "Estiva" },
                    { 3124609, 31, "Estrela Dalva" },
                    { 3124708, 31, "Estrela do Indaiá" },
                    { 3124807, 31, "Estrela do Sul" },
                    { 3124906, 31, "Eugenópolis" },
                    { 3125002, 31, "Ewbank da Câmara" },
                    { 3125101, 31, "Extrema" },
                    { 3125200, 31, "Fama" },
                    { 3125309, 31, "Faria Lemos" },
                    { 3125408, 31, "Felício dos Santos" },
                    { 3125507, 31, "São Gonçalo do Rio Preto" },
                    { 3125606, 31, "Felisburgo" },
                    { 3125705, 31, "Felixlândia" },
                    { 3125804, 31, "Fernandes Tourinho" },
                    { 3125903, 31, "Ferros" },
                    { 3125952, 31, "Fervedouro" },
                    { 3126000, 31, "Florestal" },
                    { 3126109, 31, "Formiga" },
                    { 3126208, 31, "Formoso" },
                    { 3126307, 31, "Fortaleza de Minas" },
                    { 3126406, 31, "Fortuna de Minas" },
                    { 3126505, 31, "Francisco Badaró" },
                    { 3126604, 31, "Francisco Dumont" },
                    { 3126703, 31, "Francisco Sá" },
                    { 3126752, 31, "Franciscópolis" },
                    { 3126802, 31, "Frei Gaspar" },
                    { 3126901, 31, "Frei Inocêncio" },
                    { 3126950, 31, "Frei Lagonegro" },
                    { 3127008, 31, "Fronteira" },
                    { 3127057, 31, "Fronteira dos Vales" },
                    { 3127073, 31, "Fruta de Leite" },
                    { 3127107, 31, "Frutal" },
                    { 3127206, 31, "Funilândia" },
                    { 3127305, 31, "Galiléia" },
                    { 3127339, 31, "Gameleiras" },
                    { 3127354, 31, "Glaucilândia" },
                    { 3127370, 31, "Goiabeira" },
                    { 3127388, 31, "Goianá" },
                    { 3127404, 31, "Gonçalves" },
                    { 3127503, 31, "Gonzaga" },
                    { 3127602, 31, "Gouveia" },
                    { 3127701, 31, "Governador Valadares" },
                    { 3127800, 31, "Grão Mogol" },
                    { 3127909, 31, "Grupiara" },
                    { 3128006, 31, "Guanhães" },
                    { 3128105, 31, "Guapé" },
                    { 3128204, 31, "Guaraciaba" },
                    { 3128253, 31, "Guaraciama" },
                    { 3128303, 31, "Guaranésia" },
                    { 3128402, 31, "Guarani" },
                    { 3128501, 31, "Guarará" },
                    { 3128600, 31, "Guarda-Mor" },
                    { 3128709, 31, "Guaxupé" },
                    { 3128808, 31, "Guidoval" },
                    { 3128907, 31, "Guimarânia" },
                    { 3129004, 31, "Guiricema" },
                    { 3129103, 31, "Gurinhatã" },
                    { 3129202, 31, "Heliodora" },
                    { 3129301, 31, "Iapu" },
                    { 3129400, 31, "Ibertioga" },
                    { 3129509, 31, "Ibiá" },
                    { 3129608, 31, "Ibiaí" },
                    { 3129657, 31, "Ibiracatu" },
                    { 3129707, 31, "Ibiraci" },
                    { 3129806, 31, "Ibirité" },
                    { 3129905, 31, "Ibitiúra de Minas" },
                    { 3130002, 31, "Ibituruna" },
                    { 3130051, 31, "Icaraí de Minas" },
                    { 3130101, 31, "Igarapé" },
                    { 3130200, 31, "Igaratinga" },
                    { 3130309, 31, "Iguatama" },
                    { 3130408, 31, "Ijaci" },
                    { 3130507, 31, "Ilicínea" },
                    { 3130556, 31, "Imbé de Minas" },
                    { 3130606, 31, "Inconfidentes" },
                    { 3130655, 31, "Indaiabira" },
                    { 3130705, 31, "Indianópolis" },
                    { 3130804, 31, "Ingaí" },
                    { 3130903, 31, "Inhapim" },
                    { 3131000, 31, "Inhaúma" },
                    { 3131109, 31, "Inimutaba" },
                    { 3131158, 31, "Ipaba" },
                    { 3131208, 31, "Ipanema" },
                    { 3131307, 31, "Ipatinga" },
                    { 3131406, 31, "Ipiaçu" },
                    { 3131505, 31, "Ipuiúna" },
                    { 3131604, 31, "Iraí de Minas" },
                    { 3131703, 31, "Itabira" },
                    { 3131802, 31, "Itabirinha" },
                    { 3131901, 31, "Itabirito" },
                    { 3132008, 31, "Itacambira" },
                    { 3132107, 31, "Itacarambi" },
                    { 3132206, 31, "Itaguara" },
                    { 3132305, 31, "Itaipé" },
                    { 3132404, 31, "Itajubá" },
                    { 3132503, 31, "Itamarandiba" },
                    { 3132602, 31, "Itamarati de Minas" },
                    { 3132701, 31, "Itambacuri" },
                    { 3132800, 31, "Itambé do Mato Dentro" },
                    { 3132909, 31, "Itamogi" },
                    { 3133006, 31, "Itamonte" },
                    { 3133105, 31, "Itanhandu" },
                    { 3133204, 31, "Itanhomi" },
                    { 3133303, 31, "Itaobim" },
                    { 3133402, 31, "Itapagipe" },
                    { 3133501, 31, "Itapecerica" },
                    { 3133600, 31, "Itapeva" },
                    { 3133709, 31, "Itatiaiuçu" },
                    { 3133758, 31, "Itaú de Minas" },
                    { 3133808, 31, "Itaúna" },
                    { 3133907, 31, "Itaverava" },
                    { 3134004, 31, "Itinga" },
                    { 3134103, 31, "Itueta" },
                    { 3134202, 31, "Ituiutaba" },
                    { 3134301, 31, "Itumirim" },
                    { 3134400, 31, "Iturama" },
                    { 3134509, 31, "Itutinga" },
                    { 3134608, 31, "Jaboticatubas" },
                    { 3134707, 31, "Jacinto" },
                    { 3134806, 31, "Jacuí" },
                    { 3134905, 31, "Jacutinga" },
                    { 3135001, 31, "Jaguaraçu" },
                    { 3135050, 31, "Jaíba" },
                    { 3135076, 31, "Jampruca" },
                    { 3135100, 31, "Janaúba" },
                    { 3135209, 31, "Januária" },
                    { 3135308, 31, "Japaraíba" },
                    { 3135357, 31, "Japonvar" },
                    { 3135407, 31, "Jeceaba" },
                    { 3135456, 31, "Jenipapo de Minas" },
                    { 3135506, 31, "Jequeri" },
                    { 3135605, 31, "Jequitaí" },
                    { 3135704, 31, "Jequitibá" },
                    { 3135803, 31, "Jequitinhonha" },
                    { 3135902, 31, "Jesuânia" },
                    { 3136009, 31, "Joaíma" },
                    { 3136108, 31, "Joanésia" },
                    { 3136207, 31, "João Monlevade" },
                    { 3136306, 31, "João Pinheiro" },
                    { 3136405, 31, "Joaquim Felício" },
                    { 3136504, 31, "Jordânia" },
                    { 3136520, 31, "José Gonçalves de Minas" },
                    { 3136553, 31, "José Raydan" },
                    { 3136579, 31, "Josenópolis" },
                    { 3136603, 31, "Nova União" },
                    { 3136652, 31, "Juatuba" },
                    { 3136702, 31, "Juiz de Fora" },
                    { 3136801, 31, "Juramento" },
                    { 3136900, 31, "Juruaia" },
                    { 3136959, 31, "Juvenília" },
                    { 3137007, 31, "Ladainha" },
                    { 3137106, 31, "Lagamar" },
                    { 3137205, 31, "Lagoa da Prata" },
                    { 3137304, 31, "Lagoa dos Patos" },
                    { 3137403, 31, "Lagoa Dourada" },
                    { 3137502, 31, "Lagoa Formosa" },
                    { 3137536, 31, "Lagoa Grande" },
                    { 3137601, 31, "Lagoa Santa" },
                    { 3137700, 31, "Lajinha" },
                    { 3137809, 31, "Lambari" },
                    { 3137908, 31, "Lamim" },
                    { 3138005, 31, "Laranjal" },
                    { 3138104, 31, "Lassance" },
                    { 3138203, 31, "Lavras" },
                    { 3138302, 31, "Leandro Ferreira" },
                    { 3138351, 31, "Leme do Prado" },
                    { 3138401, 31, "Leopoldina" },
                    { 3138500, 31, "Liberdade" },
                    { 3138609, 31, "Lima Duarte" },
                    { 3138625, 31, "Limeira do Oeste" },
                    { 3138658, 31, "Lontra" },
                    { 3138674, 31, "Luisburgo" },
                    { 3138682, 31, "Luislândia" },
                    { 3138708, 31, "Luminárias" },
                    { 3138807, 31, "Luz" },
                    { 3138906, 31, "Machacalis" },
                    { 3139003, 31, "Machado" },
                    { 3139102, 31, "Madre de Deus de Minas" },
                    { 3139201, 31, "Malacacheta" },
                    { 3139250, 31, "Mamonas" },
                    { 3139300, 31, "Manga" },
                    { 3139409, 31, "Manhuaçu" },
                    { 3139508, 31, "Manhumirim" },
                    { 3139607, 31, "Mantena" },
                    { 3139706, 31, "Maravilhas" },
                    { 3139805, 31, "Mar de Espanha" },
                    { 3139904, 31, "Maria da Fé" },
                    { 3140001, 31, "Mariana" },
                    { 3140100, 31, "Marilac" },
                    { 3140159, 31, "Mário Campos" },
                    { 3140209, 31, "Maripá de Minas" },
                    { 3140308, 31, "Marliéria" },
                    { 3140407, 31, "Marmelópolis" },
                    { 3140506, 31, "Martinho Campos" },
                    { 3140530, 31, "Martins Soares" },
                    { 3140555, 31, "Mata Verde" },
                    { 3140605, 31, "Materlândia" },
                    { 3140704, 31, "Mateus Leme" },
                    { 3140803, 31, "Matias Barbosa" },
                    { 3140852, 31, "Matias Cardoso" },
                    { 3140902, 31, "Matipó" },
                    { 3141009, 31, "Mato Verde" },
                    { 3141108, 31, "Matozinhos" },
                    { 3141207, 31, "Matutina" },
                    { 3141306, 31, "Medeiros" },
                    { 3141405, 31, "Medina" },
                    { 3141504, 31, "Mendes Pimentel" },
                    { 3141603, 31, "Mercês" },
                    { 3141702, 31, "Mesquita" },
                    { 3141801, 31, "Minas Novas" },
                    { 3141900, 31, "Minduri" },
                    { 3142007, 31, "Mirabela" },
                    { 3142106, 31, "Miradouro" },
                    { 3142205, 31, "Miraí" },
                    { 3142254, 31, "Miravânia" },
                    { 3142304, 31, "Moeda" },
                    { 3142403, 31, "Moema" },
                    { 3142502, 31, "Monjolos" },
                    { 3142601, 31, "Monsenhor Paulo" },
                    { 3142700, 31, "Montalvânia" },
                    { 3142809, 31, "Monte Alegre de Minas" },
                    { 3142908, 31, "Monte Azul" },
                    { 3143005, 31, "Monte Belo" },
                    { 3143104, 31, "Monte Carmelo" },
                    { 3143153, 31, "Monte Formoso" },
                    { 3143203, 31, "Monte Santo de Minas" },
                    { 3143302, 31, "Montes Claros" },
                    { 3143401, 31, "Monte Sião" },
                    { 3143450, 31, "Montezuma" },
                    { 3143500, 31, "Morada Nova de Minas" },
                    { 3143609, 31, "Morro da Garça" },
                    { 3143708, 31, "Morro do Pilar" },
                    { 3143807, 31, "Munhoz" },
                    { 3143906, 31, "Muriaé" },
                    { 3144003, 31, "Mutum" },
                    { 3144102, 31, "Muzambinho" },
                    { 3144201, 31, "Nacip Raydan" },
                    { 3144300, 31, "Nanuque" },
                    { 3144359, 31, "Naque" },
                    { 3144375, 31, "Natalândia" },
                    { 3144409, 31, "Natércia" },
                    { 3144508, 31, "Nazareno" },
                    { 3144607, 31, "Nepomuceno" },
                    { 3144656, 31, "Ninheira" },
                    { 3144672, 31, "Nova Belém" },
                    { 3144706, 31, "Nova Era" },
                    { 3144805, 31, "Nova Lima" },
                    { 3144904, 31, "Nova Módica" },
                    { 3145000, 31, "Nova Ponte" },
                    { 3145059, 31, "Nova Porteirinha" },
                    { 3145109, 31, "Nova Resende" },
                    { 3145208, 31, "Nova Serrana" },
                    { 3145307, 31, "Novo Cruzeiro" },
                    { 3145356, 31, "Novo Oriente de Minas" },
                    { 3145372, 31, "Novorizonte" },
                    { 3145406, 31, "Olaria" },
                    { 3145455, 31, "Olhos-dÁgua" },
                    { 3145505, 31, "Olímpio Noronha" },
                    { 3145604, 31, "Oliveira" },
                    { 3145703, 31, "Oliveira Fortes" },
                    { 3145802, 31, "Onça de Pitangui" },
                    { 3145851, 31, "Oratórios" },
                    { 3145877, 31, "Orizânia" },
                    { 3145901, 31, "Ouro Branco" },
                    { 3146008, 31, "Ouro Fino" },
                    { 3146107, 31, "Ouro Preto" },
                    { 3146206, 31, "Ouro Verde de Minas" },
                    { 3146255, 31, "Padre Carvalho" },
                    { 3146305, 31, "Padre Paraíso" },
                    { 3146404, 31, "Paineiras" },
                    { 3146503, 31, "Pains" },
                    { 3146552, 31, "Pai Pedro" },
                    { 3146602, 31, "Paiva" },
                    { 3146701, 31, "Palma" },
                    { 3146750, 31, "Palmópolis" },
                    { 3146909, 31, "Papagaios" },
                    { 3147006, 31, "Paracatu" },
                    { 3147105, 31, "Pará de Minas" },
                    { 3147204, 31, "Paraguaçu" },
                    { 3147303, 31, "Paraisópolis" },
                    { 3147402, 31, "Paraopeba" },
                    { 3147501, 31, "Passabém" },
                    { 3147600, 31, "Passa Quatro" },
                    { 3147709, 31, "Passa Tempo" },
                    { 3147808, 31, "Passa-Vinte" },
                    { 3147907, 31, "Passos" },
                    { 3147956, 31, "Patis" },
                    { 3148004, 31, "Patos de Minas" },
                    { 3148103, 31, "Patrocínio" },
                    { 3148202, 31, "Patrocínio do Muriaé" },
                    { 3148301, 31, "Paula Cândido" },
                    { 3148400, 31, "Paulistas" },
                    { 3148509, 31, "Pavão" },
                    { 3148608, 31, "Peçanha" },
                    { 3148707, 31, "Pedra Azul" },
                    { 3148756, 31, "Pedra Bonita" },
                    { 3148806, 31, "Pedra do Anta" },
                    { 3148905, 31, "Pedra do Indaiá" },
                    { 3149002, 31, "Pedra Dourada" },
                    { 3149101, 31, "Pedralva" },
                    { 3149150, 31, "Pedras de Maria da Cruz" },
                    { 3149200, 31, "Pedrinópolis" },
                    { 3149309, 31, "Pedro Leopoldo" },
                    { 3149408, 31, "Pedro Teixeira" },
                    { 3149507, 31, "Pequeri" },
                    { 3149606, 31, "Pequi" },
                    { 3149705, 31, "Perdigão" },
                    { 3149804, 31, "Perdizes" },
                    { 3149903, 31, "Perdões" },
                    { 3149952, 31, "Periquito" },
                    { 3150000, 31, "Pescador" },
                    { 3150109, 31, "Piau" },
                    { 3150158, 31, "Piedade de Caratinga" },
                    { 3150208, 31, "Piedade de Ponte Nova" },
                    { 3150307, 31, "Piedade do Rio Grande" },
                    { 3150406, 31, "Piedade dos Gerais" },
                    { 3150505, 31, "Pimenta" },
                    { 3150539, 31, "Pingo-dÁgua" },
                    { 3150570, 31, "Pintópolis" },
                    { 3150604, 31, "Piracema" },
                    { 3150703, 31, "Pirajuba" },
                    { 3150802, 31, "Piranga" },
                    { 3150901, 31, "Piranguçu" },
                    { 3151008, 31, "Piranguinho" },
                    { 3151107, 31, "Pirapetinga" },
                    { 3151206, 31, "Pirapora" },
                    { 3151305, 31, "Piraúba" },
                    { 3151404, 31, "Pitangui" },
                    { 3151503, 31, "Piumhi" },
                    { 3151602, 31, "Planura" },
                    { 3151701, 31, "Poço Fundo" },
                    { 3151800, 31, "Poços de Caldas" },
                    { 3151909, 31, "Pocrane" },
                    { 3152006, 31, "Pompéu" },
                    { 3152105, 31, "Ponte Nova" },
                    { 3152131, 31, "Ponto Chique" },
                    { 3152170, 31, "Ponto dos Volantes" },
                    { 3152204, 31, "Porteirinha" },
                    { 3152303, 31, "Porto Firme" },
                    { 3152402, 31, "Poté" },
                    { 3152501, 31, "Pouso Alegre" },
                    { 3152600, 31, "Pouso Alto" },
                    { 3152709, 31, "Prados" },
                    { 3152808, 31, "Prata" },
                    { 3152907, 31, "Pratápolis" },
                    { 3153004, 31, "Pratinha" },
                    { 3153103, 31, "Presidente Bernardes" },
                    { 3153202, 31, "Presidente Juscelino" },
                    { 3153301, 31, "Presidente Kubitschek" },
                    { 3153400, 31, "Presidente Olegário" },
                    { 3153509, 31, "Alto Jequitibá" },
                    { 3153608, 31, "Prudente de Morais" },
                    { 3153707, 31, "Quartel Geral" },
                    { 3153806, 31, "Queluzito" },
                    { 3153905, 31, "Raposos" },
                    { 3154002, 31, "Raul Soares" },
                    { 3154101, 31, "Recreio" },
                    { 3154150, 31, "Reduto" },
                    { 3154200, 31, "Resende Costa" },
                    { 3154309, 31, "Resplendor" },
                    { 3154408, 31, "Ressaquinha" },
                    { 3154457, 31, "Riachinho" },
                    { 3154507, 31, "Riacho dos Machados" },
                    { 3154606, 31, "Ribeirão das Neves" },
                    { 3154705, 31, "Ribeirão Vermelho" },
                    { 3154804, 31, "Rio Acima" },
                    { 3154903, 31, "Rio Casca" },
                    { 3155009, 31, "Rio Doce" },
                    { 3155108, 31, "Rio do Prado" },
                    { 3155207, 31, "Rio Espera" },
                    { 3155306, 31, "Rio Manso" },
                    { 3155405, 31, "Rio Novo" },
                    { 3155504, 31, "Rio Paranaíba" },
                    { 3155603, 31, "Rio Pardo de Minas" },
                    { 3155702, 31, "Rio Piracicaba" },
                    { 3155801, 31, "Rio Pomba" },
                    { 3155900, 31, "Rio Preto" },
                    { 3156007, 31, "Rio Vermelho" },
                    { 3156106, 31, "Ritápolis" },
                    { 3156205, 31, "Rochedo de Minas" },
                    { 3156304, 31, "Rodeiro" },
                    { 3156403, 31, "Romaria" },
                    { 3156452, 31, "Rosário da Limeira" },
                    { 3156502, 31, "Rubelita" },
                    { 3156601, 31, "Rubim" },
                    { 3156700, 31, "Sabará" },
                    { 3156809, 31, "Sabinópolis" },
                    { 3156908, 31, "Sacramento" },
                    { 3157005, 31, "Salinas" },
                    { 3157104, 31, "Salto da Divisa" },
                    { 3157203, 31, "Santa Bárbara" },
                    { 3157252, 31, "Santa Bárbara do Leste" },
                    { 3157278, 31, "Santa Bárbara do Monte Verde" },
                    { 3157302, 31, "Santa Bárbara do Tugúrio" },
                    { 3157336, 31, "Santa Cruz de Minas" },
                    { 3157377, 31, "Santa Cruz de Salinas" },
                    { 3157401, 31, "Santa Cruz do Escalvado" },
                    { 3157500, 31, "Santa Efigênia de Minas" },
                    { 3157609, 31, "Santa Fé de Minas" },
                    { 3157658, 31, "Santa Helena de Minas" },
                    { 3157708, 31, "Santa Juliana" },
                    { 3157807, 31, "Santa Luzia" },
                    { 3157906, 31, "Santa Margarida" },
                    { 3158003, 31, "Santa Maria de Itabira" },
                    { 3158102, 31, "Santa Maria do Salto" },
                    { 3158201, 31, "Santa Maria do Suaçuí" },
                    { 3158300, 31, "Santana da Vargem" },
                    { 3158409, 31, "Santana de Cataguases" },
                    { 3158508, 31, "Santana de Pirapama" },
                    { 3158607, 31, "Santana do Deserto" },
                    { 3158706, 31, "Santana do Garambéu" },
                    { 3158805, 31, "Santana do Jacaré" },
                    { 3158904, 31, "Santana do Manhuaçu" },
                    { 3158953, 31, "Santana do Paraíso" },
                    { 3159001, 31, "Santana do Riacho" },
                    { 3159100, 31, "Santana dos Montes" },
                    { 3159209, 31, "Santa Rita de Caldas" },
                    { 3159308, 31, "Santa Rita de Jacutinga" },
                    { 3159357, 31, "Santa Rita de Minas" },
                    { 3159407, 31, "Santa Rita de Ibitipoca" },
                    { 3159506, 31, "Santa Rita do Itueto" },
                    { 3159605, 31, "Santa Rita do Sapucaí" },
                    { 3159704, 31, "Santa Rosa da Serra" },
                    { 3159803, 31, "Santa Vitória" },
                    { 3159902, 31, "Santo Antônio do Amparo" },
                    { 3160009, 31, "Santo Antônio do Aventureiro" },
                    { 3160108, 31, "Santo Antônio do Grama" },
                    { 3160207, 31, "Santo Antônio do Itambé" },
                    { 3160306, 31, "Santo Antônio do Jacinto" },
                    { 3160405, 31, "Santo Antônio do Monte" },
                    { 3160454, 31, "Santo Antônio do Retiro" },
                    { 3160504, 31, "Santo Antônio do Rio Abaixo" },
                    { 3160603, 31, "Santo Hipólito" },
                    { 3160702, 31, "Santos Dumont" },
                    { 3160801, 31, "São Bento Abade" },
                    { 3160900, 31, "São Brás do Suaçuí" },
                    { 3160959, 31, "São Domingos das Dores" },
                    { 3161007, 31, "São Domingos do Prata" },
                    { 3161056, 31, "São Félix de Minas" },
                    { 3161106, 31, "São Francisco" },
                    { 3161205, 31, "São Francisco de Paula" },
                    { 3161304, 31, "São Francisco de Sales" },
                    { 3161403, 31, "São Francisco do Glória" },
                    { 3161502, 31, "São Geraldo" },
                    { 3161601, 31, "São Geraldo da Piedade" },
                    { 3161650, 31, "São Geraldo do Baixio" },
                    { 3161700, 31, "São Gonçalo do Abaeté" },
                    { 3161809, 31, "São Gonçalo do Pará" },
                    { 3161908, 31, "São Gonçalo do Rio Abaixo" },
                    { 3162005, 31, "São Gonçalo do Sapucaí" },
                    { 3162104, 31, "São Gotardo" },
                    { 3162203, 31, "São João Batista do Glória" },
                    { 3162252, 31, "São João da Lagoa" },
                    { 3162302, 31, "São João da Mata" },
                    { 3162401, 31, "São João da Ponte" },
                    { 3162450, 31, "São João das Missões" },
                    { 3162500, 31, "São João del Rei" },
                    { 3162559, 31, "São João do Manhuaçu" },
                    { 3162575, 31, "São João do Manteninha" },
                    { 3162609, 31, "São João do Oriente" },
                    { 3162658, 31, "São João do Pacuí" },
                    { 3162708, 31, "São João do Paraíso" },
                    { 3162807, 31, "São João Evangelista" },
                    { 3162906, 31, "São João Nepomuceno" },
                    { 3162922, 31, "São Joaquim de Bicas" },
                    { 3162948, 31, "São José da Barra" },
                    { 3162955, 31, "São José da Lapa" },
                    { 3163003, 31, "São José da Safira" },
                    { 3163102, 31, "São José da Varginha" },
                    { 3163201, 31, "São José do Alegre" },
                    { 3163300, 31, "São José do Divino" },
                    { 3163409, 31, "São José do Goiabal" },
                    { 3163508, 31, "São José do Jacuri" },
                    { 3163607, 31, "São José do Mantimento" },
                    { 3163706, 31, "São Lourenço" },
                    { 3163805, 31, "São Miguel do Anta" },
                    { 3163904, 31, "São Pedro da União" },
                    { 3164001, 31, "São Pedro dos Ferros" },
                    { 3164100, 31, "São Pedro do Suaçuí" },
                    { 3164209, 31, "São Romão" },
                    { 3164308, 31, "São Roque de Minas" },
                    { 3164407, 31, "São Sebastião da Bela Vista" },
                    { 3164431, 31, "São Sebastião da Vargem Alegre" },
                    { 3164472, 31, "São Sebastião do Anta" },
                    { 3164506, 31, "São Sebastião do Maranhão" },
                    { 3164605, 31, "São Sebastião do Oeste" },
                    { 3164704, 31, "São Sebastião do Paraíso" },
                    { 3164803, 31, "São Sebastião do Rio Preto" },
                    { 3164902, 31, "São Sebastião do Rio Verde" },
                    { 3165008, 31, "São Tiago" },
                    { 3165107, 31, "São Tomás de Aquino" },
                    { 3165206, 31, "São Thomé das Letras" },
                    { 3165305, 31, "São Vicente de Minas" },
                    { 3165404, 31, "Sapucaí-Mirim" },
                    { 3165503, 31, "Sardoá" },
                    { 3165537, 31, "Sarzedo" },
                    { 3165552, 31, "Setubinha" },
                    { 3165560, 31, "Sem-Peixe" },
                    { 3165578, 31, "Senador Amaral" },
                    { 3165602, 31, "Senador Cortes" },
                    { 3165701, 31, "Senador Firmino" },
                    { 3165800, 31, "Senador José Bento" },
                    { 3165909, 31, "Senador Modestino Gonçalves" },
                    { 3166006, 31, "Senhora de Oliveira" },
                    { 3166105, 31, "Senhora do Porto" },
                    { 3166204, 31, "Senhora dos Remédios" },
                    { 3166303, 31, "Sericita" },
                    { 3166402, 31, "Seritinga" },
                    { 3166501, 31, "Serra Azul de Minas" },
                    { 3166600, 31, "Serra da Saudade" },
                    { 3166709, 31, "Serra dos Aimorés" },
                    { 3166808, 31, "Serra do Salitre" },
                    { 3166907, 31, "Serrania" },
                    { 3166956, 31, "Serranópolis de Minas" },
                    { 3167004, 31, "Serranos" },
                    { 3167103, 31, "Serro" },
                    { 3167202, 31, "Sete Lagoas" },
                    { 3167301, 31, "Silveirânia" },
                    { 3167400, 31, "Silvianópolis" },
                    { 3167509, 31, "Simão Pereira" },
                    { 3167608, 31, "Simonésia" },
                    { 3167707, 31, "Sobrália" },
                    { 3167806, 31, "Soledade de Minas" },
                    { 3167905, 31, "Tabuleiro" },
                    { 3168002, 31, "Taiobeiras" },
                    { 3168051, 31, "Taparuba" },
                    { 3168101, 31, "Tapira" },
                    { 3168200, 31, "Tapiraí" },
                    { 3168309, 31, "Taquaraçu de Minas" },
                    { 3168408, 31, "Tarumirim" },
                    { 3168507, 31, "Teixeiras" },
                    { 3168606, 31, "Teófilo Otoni" },
                    { 3168705, 31, "Timóteo" },
                    { 3168804, 31, "Tiradentes" },
                    { 3168903, 31, "Tiros" },
                    { 3169000, 31, "Tocantins" },
                    { 3169059, 31, "Tocos do Moji" },
                    { 3169109, 31, "Toledo" },
                    { 3169208, 31, "Tombos" },
                    { 3169307, 31, "Três Corações" },
                    { 3169356, 31, "Três Marias" },
                    { 3169406, 31, "Três Pontas" },
                    { 3169505, 31, "Tumiritinga" },
                    { 3169604, 31, "Tupaciguara" },
                    { 3169703, 31, "Turmalina" },
                    { 3169802, 31, "Turvolândia" },
                    { 3169901, 31, "Ubá" },
                    { 3170008, 31, "Ubaí" },
                    { 3170057, 31, "Ubaporanga" },
                    { 3170107, 31, "Uberaba" },
                    { 3170206, 31, "Uberlândia" },
                    { 3170305, 31, "Umburatiba" },
                    { 3170404, 31, "Unaí" },
                    { 3170438, 31, "União de Minas" },
                    { 3170479, 31, "Uruana de Minas" },
                    { 3170503, 31, "Urucânia" },
                    { 3170529, 31, "Urucuia" },
                    { 3170578, 31, "Vargem Alegre" },
                    { 3170602, 31, "Vargem Bonita" },
                    { 3170651, 31, "Vargem Grande do Rio Pardo" },
                    { 3170701, 31, "Varginha" },
                    { 3170750, 31, "Varjão de Minas" },
                    { 3170800, 31, "Várzea da Palma" },
                    { 3170909, 31, "Varzelândia" },
                    { 3171006, 31, "Vazante" },
                    { 3171030, 31, "Verdelândia" },
                    { 3171071, 31, "Veredinha" },
                    { 3171105, 31, "Veríssimo" },
                    { 3171154, 31, "Vermelho Novo" },
                    { 3171204, 31, "Vespasiano" },
                    { 3171303, 31, "Viçosa" },
                    { 3171402, 31, "Vieiras" },
                    { 3171501, 31, "Mathias Lobato" },
                    { 3171600, 31, "Virgem da Lapa" },
                    { 3171709, 31, "Virgínia" },
                    { 3171808, 31, "Virginópolis" },
                    { 3171907, 31, "Virgolândia" },
                    { 3172004, 31, "Visconde do Rio Branco" },
                    { 3172103, 31, "Volta Grande" },
                    { 3172202, 31, "Wenceslau Braz" },
                    { 3200102, 32, "Afonso Cláudio" },
                    { 3200136, 32, "Águia Branca" },
                    { 3200169, 32, "Água Doce do Norte" },
                    { 3200201, 32, "Alegre" },
                    { 3200300, 32, "Alfredo Chaves" },
                    { 3200359, 32, "Alto Rio Novo" },
                    { 3200409, 32, "Anchieta" },
                    { 3200508, 32, "Apiacá" },
                    { 3200607, 32, "Aracruz" },
                    { 3200706, 32, "Atilio Vivacqua" },
                    { 3200805, 32, "Baixo Guandu" },
                    { 3200904, 32, "Barra de São Francisco" },
                    { 3201001, 32, "Boa Esperança" },
                    { 3201100, 32, "Bom Jesus do Norte" },
                    { 3201159, 32, "Brejetuba" },
                    { 3201209, 32, "Cachoeiro de Itapemirim" },
                    { 3201308, 32, "Cariacica" },
                    { 3201407, 32, "Castelo" },
                    { 3201506, 32, "Colatina" },
                    { 3201605, 32, "Conceição da Barra" },
                    { 3201704, 32, "Conceição do Castelo" },
                    { 3201803, 32, "Divino de São Lourenço" },
                    { 3201902, 32, "Domingos Martins" },
                    { 3202009, 32, "Dores do Rio Preto" },
                    { 3202108, 32, "Ecoporanga" },
                    { 3202207, 32, "Fundão" },
                    { 3202256, 32, "Governador Lindenberg" },
                    { 3202306, 32, "Guaçuí" },
                    { 3202405, 32, "Guarapari" },
                    { 3202454, 32, "Ibatiba" },
                    { 3202504, 32, "Ibiraçu" },
                    { 3202553, 32, "Ibitirama" },
                    { 3202603, 32, "Iconha" },
                    { 3202652, 32, "Irupi" },
                    { 3202702, 32, "Itaguaçu" },
                    { 3202801, 32, "Itapemirim" },
                    { 3202900, 32, "Itarana" },
                    { 3203007, 32, "Iúna" },
                    { 3203056, 32, "Jaguaré" },
                    { 3203106, 32, "Jerônimo Monteiro" },
                    { 3203130, 32, "João Neiva" },
                    { 3203163, 32, "Laranja da Terra" },
                    { 3203205, 32, "Linhares" },
                    { 3203304, 32, "Mantenópolis" },
                    { 3203320, 32, "Marataízes" },
                    { 3203346, 32, "Marechal Floriano" },
                    { 3203353, 32, "Marilândia" },
                    { 3203403, 32, "Mimoso do Sul" },
                    { 3203502, 32, "Montanha" },
                    { 3203601, 32, "Mucurici" },
                    { 3203700, 32, "Muniz Freire" },
                    { 3203809, 32, "Muqui" },
                    { 3203908, 32, "Nova Venécia" },
                    { 3204005, 32, "Pancas" },
                    { 3204054, 32, "Pedro Canário" },
                    { 3204104, 32, "Pinheiros" },
                    { 3204203, 32, "Piúma" },
                    { 3204252, 32, "Ponto Belo" },
                    { 3204302, 32, "Presidente Kennedy" },
                    { 3204351, 32, "Rio Bananal" },
                    { 3204401, 32, "Rio Novo do Sul" },
                    { 3204500, 32, "Santa Leopoldina" },
                    { 3204559, 32, "Santa Maria de Jetibá" },
                    { 3204609, 32, "Santa Teresa" },
                    { 3204658, 32, "São Domingos do Norte" },
                    { 3204708, 32, "São Gabriel da Palha" },
                    { 3204807, 32, "São José do Calçado" },
                    { 3204906, 32, "São Mateus" },
                    { 3204955, 32, "São Roque do Canaã" },
                    { 3205002, 32, "Serra" },
                    { 3205010, 32, "Sooretama" },
                    { 3205036, 32, "Vargem Alta" },
                    { 3205069, 32, "Venda Nova do Imigrante" },
                    { 3205101, 32, "Viana" },
                    { 3205150, 32, "Vila Pavão" },
                    { 3205176, 32, "Vila Valério" },
                    { 3205200, 32, "Vila Velha" },
                    { 3205309, 32, "Vitória" },
                    { 3300100, 33, "Angra dos Reis" },
                    { 3300159, 33, "Aperibé" },
                    { 3300209, 33, "Araruama" },
                    { 3300225, 33, "Areal" },
                    { 3300233, 33, "Armação dos Búzios" },
                    { 3300258, 33, "Arraial do Cabo" },
                    { 3300308, 33, "Barra do Piraí" },
                    { 3300407, 33, "Barra Mansa" },
                    { 3300456, 33, "Belford Roxo" },
                    { 3300506, 33, "Bom Jardim" },
                    { 3300605, 33, "Bom Jesus do Itabapoana" },
                    { 3300704, 33, "Cabo Frio" },
                    { 3300803, 33, "Cachoeiras de Macacu" },
                    { 3300902, 33, "Cambuci" },
                    { 3300936, 33, "Carapebus" },
                    { 3300951, 33, "Comendador Levy Gasparian" },
                    { 3301009, 33, "Campos dos Goytacazes" },
                    { 3301108, 33, "Cantagalo" },
                    { 3301157, 33, "Cardoso Moreira" },
                    { 3301207, 33, "Carmo" },
                    { 3301306, 33, "Casimiro de Abreu" },
                    { 3301405, 33, "Conceição de Macabu" },
                    { 3301504, 33, "Cordeiro" },
                    { 3301603, 33, "Duas Barras" },
                    { 3301702, 33, "Duque de Caxias" },
                    { 3301801, 33, "Engenheiro Paulo de Frontin" },
                    { 3301850, 33, "Guapimirim" },
                    { 3301876, 33, "Iguaba Grande" },
                    { 3301900, 33, "Itaboraí" },
                    { 3302007, 33, "Itaguaí" },
                    { 3302056, 33, "Italva" },
                    { 3302106, 33, "Itaocara" },
                    { 3302205, 33, "Itaperuna" },
                    { 3302254, 33, "Itatiaia" },
                    { 3302270, 33, "Japeri" },
                    { 3302304, 33, "Laje do Muriaé" },
                    { 3302403, 33, "Macaé" },
                    { 3302452, 33, "Macuco" },
                    { 3302502, 33, "Magé" },
                    { 3302601, 33, "Mangaratiba" },
                    { 3302700, 33, "Maricá" },
                    { 3302809, 33, "Mendes" },
                    { 3302858, 33, "Mesquita" },
                    { 3302908, 33, "Miguel Pereira" },
                    { 3303005, 33, "Miracema" },
                    { 3303104, 33, "Natividade" },
                    { 3303203, 33, "Nilópolis" },
                    { 3303302, 33, "Niterói" },
                    { 3303401, 33, "Nova Friburgo" },
                    { 3303500, 33, "Nova Iguaçu" },
                    { 3303609, 33, "Paracambi" },
                    { 3303708, 33, "Paraíba do Sul" },
                    { 3303807, 33, "Parati" },
                    { 3303856, 33, "Paty do Alferes" },
                    { 3303906, 33, "Petrópolis" },
                    { 3303955, 33, "Pinheiral" },
                    { 3304003, 33, "Piraí" },
                    { 3304102, 33, "Porciúncula" },
                    { 3304110, 33, "Porto Real" },
                    { 3304128, 33, "Quatis" },
                    { 3304144, 33, "Queimados" },
                    { 3304151, 33, "Quissamã" },
                    { 3304201, 33, "Resende" },
                    { 3304300, 33, "Rio Bonito" },
                    { 3304409, 33, "Rio Claro" },
                    { 3304508, 33, "Rio das Flores" },
                    { 3304524, 33, "Rio das Ostras" },
                    { 3304557, 33, "Rio de Janeiro" },
                    { 3304607, 33, "Santa Maria Madalena" },
                    { 3304706, 33, "Santo Antônio de Pádua" },
                    { 3304755, 33, "São Francisco de Itabapoana" },
                    { 3304805, 33, "São Fidélis" },
                    { 3304904, 33, "São Gonçalo" },
                    { 3305000, 33, "São João da Barra" },
                    { 3305109, 33, "São João de Meriti" },
                    { 3305133, 33, "São José de Ubá" },
                    { 3305158, 33, "São José do Vale do Rio Preto" },
                    { 3305208, 33, "São Pedro da Aldeia" },
                    { 3305307, 33, "São Sebastião do Alto" },
                    { 3305406, 33, "Sapucaia" },
                    { 3305505, 33, "Saquarema" },
                    { 3305554, 33, "Seropédica" },
                    { 3305604, 33, "Silva Jardim" },
                    { 3305703, 33, "Sumidouro" },
                    { 3305752, 33, "Tanguá" },
                    { 3305802, 33, "Teresópolis" },
                    { 3305901, 33, "Trajano de Morais" },
                    { 3306008, 33, "Três Rios" },
                    { 3306107, 33, "Valença" },
                    { 3306156, 33, "Varre-Sai" },
                    { 3306206, 33, "Vassouras" },
                    { 3306305, 33, "Volta Redonda" },
                    { 3500105, 35, "Adamantina" },
                    { 3500204, 35, "Adolfo" },
                    { 3500303, 35, "Aguaí" },
                    { 3500402, 35, "Águas da Prata" },
                    { 3500501, 35, "Águas de Lindóia" },
                    { 3500550, 35, "Águas de Santa Bárbara" },
                    { 3500600, 35, "Águas de São Pedro" },
                    { 3500709, 35, "Agudos" },
                    { 3500758, 35, "Alambari" },
                    { 3500808, 35, "Alfredo Marcondes" },
                    { 3500907, 35, "Altair" },
                    { 3501004, 35, "Altinópolis" },
                    { 3501103, 35, "Alto Alegre" },
                    { 3501152, 35, "Alumínio" },
                    { 3501202, 35, "Álvares Florence" },
                    { 3501301, 35, "Álvares Machado" },
                    { 3501400, 35, "Álvaro de Carvalho" },
                    { 3501509, 35, "Alvinlândia" },
                    { 3501608, 35, "Americana" },
                    { 3501707, 35, "Américo Brasiliense" },
                    { 3501806, 35, "Américo de Campos" },
                    { 3501905, 35, "Amparo" },
                    { 3502002, 35, "Analândia" },
                    { 3502101, 35, "Andradina" },
                    { 3502200, 35, "Angatuba" },
                    { 3502309, 35, "Anhembi" },
                    { 3502408, 35, "Anhumas" },
                    { 3502507, 35, "Aparecida" },
                    { 3502606, 35, "Aparecida dOeste" },
                    { 3502705, 35, "Apiaí" },
                    { 3502754, 35, "Araçariguama" },
                    { 3502804, 35, "Araçatuba" },
                    { 3502903, 35, "Araçoiaba da Serra" },
                    { 3503000, 35, "Aramina" },
                    { 3503109, 35, "Arandu" },
                    { 3503158, 35, "Arapeí" },
                    { 3503208, 35, "Araraquara" },
                    { 3503307, 35, "Araras" },
                    { 3503356, 35, "Arco-Íris" },
                    { 3503406, 35, "Arealva" },
                    { 3503505, 35, "Areias" },
                    { 3503604, 35, "Areiópolis" },
                    { 3503703, 35, "Ariranha" },
                    { 3503802, 35, "Artur Nogueira" },
                    { 3503901, 35, "Arujá" },
                    { 3503950, 35, "Aspásia" },
                    { 3504008, 35, "Assis" },
                    { 3504107, 35, "Atibaia" },
                    { 3504206, 35, "Auriflama" },
                    { 3504305, 35, "Avaí" },
                    { 3504404, 35, "Avanhandava" },
                    { 3504503, 35, "Avaré" },
                    { 3504602, 35, "Bady Bassitt" },
                    { 3504701, 35, "Balbinos" },
                    { 3504800, 35, "Bálsamo" },
                    { 3504909, 35, "Bananal" },
                    { 3505005, 35, "Barão de Antonina" },
                    { 3505104, 35, "Barbosa" },
                    { 3505203, 35, "Bariri" },
                    { 3505302, 35, "Barra Bonita" },
                    { 3505351, 35, "Barra do Chapéu" },
                    { 3505401, 35, "Barra do Turvo" },
                    { 3505500, 35, "Barretos" },
                    { 3505609, 35, "Barrinha" },
                    { 3505708, 35, "Barueri" },
                    { 3505807, 35, "Bastos" },
                    { 3505906, 35, "Batatais" },
                    { 3506003, 35, "Bauru" },
                    { 3506102, 35, "Bebedouro" },
                    { 3506201, 35, "Bento de Abreu" },
                    { 3506300, 35, "Bernardino de Campos" },
                    { 3506359, 35, "Bertioga" },
                    { 3506409, 35, "Bilac" },
                    { 3506508, 35, "Birigui" },
                    { 3506607, 35, "Biritiba-Mirim" },
                    { 3506706, 35, "Boa Esperança do Sul" },
                    { 3506805, 35, "Bocaina" },
                    { 3506904, 35, "Bofete" },
                    { 3507001, 35, "Boituva" },
                    { 3507100, 35, "Bom Jesus dos Perdões" },
                    { 3507159, 35, "Bom Sucesso de Itararé" },
                    { 3507209, 35, "Borá" },
                    { 3507308, 35, "Boracéia" },
                    { 3507407, 35, "Borborema" },
                    { 3507456, 35, "Borebi" },
                    { 3507506, 35, "Botucatu" },
                    { 3507605, 35, "Bragança Paulista" },
                    { 3507704, 35, "Braúna" },
                    { 3507753, 35, "Brejo Alegre" },
                    { 3507803, 35, "Brodowski" },
                    { 3507902, 35, "Brotas" },
                    { 3508009, 35, "Buri" },
                    { 3508108, 35, "Buritama" },
                    { 3508207, 35, "Buritizal" },
                    { 3508306, 35, "Cabrália Paulista" },
                    { 3508405, 35, "Cabreúva" },
                    { 3508504, 35, "Caçapava" },
                    { 3508603, 35, "Cachoeira Paulista" },
                    { 3508702, 35, "Caconde" },
                    { 3508801, 35, "Cafelândia" },
                    { 3508900, 35, "Caiabu" },
                    { 3509007, 35, "Caieiras" },
                    { 3509106, 35, "Caiuá" },
                    { 3509205, 35, "Cajamar" },
                    { 3509254, 35, "Cajati" },
                    { 3509304, 35, "Cajobi" },
                    { 3509403, 35, "Cajuru" },
                    { 3509452, 35, "Campina do Monte Alegre" },
                    { 3509502, 35, "Campinas" },
                    { 3509601, 35, "Campo Limpo Paulista" },
                    { 3509700, 35, "Campos do Jordão" },
                    { 3509809, 35, "Campos Novos Paulista" },
                    { 3509908, 35, "Cananéia" },
                    { 3509957, 35, "Canas" },
                    { 3510005, 35, "Cândido Mota" },
                    { 3510104, 35, "Cândido Rodrigues" },
                    { 3510153, 35, "Canitar" },
                    { 3510203, 35, "Capão Bonito" },
                    { 3510302, 35, "Capela do Alto" },
                    { 3510401, 35, "Capivari" },
                    { 3510500, 35, "Caraguatatuba" },
                    { 3510609, 35, "Carapicuíba" },
                    { 3510708, 35, "Cardoso" },
                    { 3510807, 35, "Casa Branca" },
                    { 3510906, 35, "Cássia dos Coqueiros" },
                    { 3511003, 35, "Castilho" },
                    { 3511102, 35, "Catanduva" },
                    { 3511201, 35, "Catiguá" },
                    { 3511300, 35, "Cedral" },
                    { 3511409, 35, "Cerqueira César" },
                    { 3511508, 35, "Cerquilho" },
                    { 3511607, 35, "Cesário Lange" },
                    { 3511706, 35, "Charqueada" },
                    { 3511904, 35, "Clementina" },
                    { 3512001, 35, "Colina" },
                    { 3512100, 35, "Colômbia" },
                    { 3512209, 35, "Conchal" },
                    { 3512308, 35, "Conchas" },
                    { 3512407, 35, "Cordeirópolis" },
                    { 3512506, 35, "Coroados" },
                    { 3512605, 35, "Coronel Macedo" },
                    { 3512704, 35, "Corumbataí" },
                    { 3512803, 35, "Cosmópolis" },
                    { 3512902, 35, "Cosmorama" },
                    { 3513009, 35, "Cotia" },
                    { 3513108, 35, "Cravinhos" },
                    { 3513207, 35, "Cristais Paulista" },
                    { 3513306, 35, "Cruzália" },
                    { 3513405, 35, "Cruzeiro" },
                    { 3513504, 35, "Cubatão" },
                    { 3513603, 35, "Cunha" },
                    { 3513702, 35, "Descalvado" },
                    { 3513801, 35, "Diadema" },
                    { 3513850, 35, "Dirce Reis" },
                    { 3513900, 35, "Divinolândia" },
                    { 3514007, 35, "Dobrada" },
                    { 3514106, 35, "Dois Córregos" },
                    { 3514205, 35, "Dolcinópolis" },
                    { 3514304, 35, "Dourado" },
                    { 3514403, 35, "Dracena" },
                    { 3514502, 35, "Duartina" },
                    { 3514601, 35, "Dumont" },
                    { 3514700, 35, "Echaporã" },
                    { 3514809, 35, "Eldorado" },
                    { 3514908, 35, "Elias Fausto" },
                    { 3514924, 35, "Elisiário" },
                    { 3514957, 35, "Embaúba" },
                    { 3515004, 35, "Embu das Artes" },
                    { 3515103, 35, "Embu-Guaçu" },
                    { 3515129, 35, "Emilianópolis" },
                    { 3515152, 35, "Engenheiro Coelho" },
                    { 3515186, 35, "Espírito Santo do Pinhal" },
                    { 3515194, 35, "Espírito Santo do Turvo" },
                    { 3515202, 35, "Estrela dOeste" },
                    { 3515301, 35, "Estrela do Norte" },
                    { 3515350, 35, "Euclides da Cunha Paulista" },
                    { 3515400, 35, "Fartura" },
                    { 3515509, 35, "Fernandópolis" },
                    { 3515608, 35, "Fernando Prestes" },
                    { 3515657, 35, "Fernão" },
                    { 3515707, 35, "Ferraz de Vasconcelos" },
                    { 3515806, 35, "Flora Rica" },
                    { 3515905, 35, "Floreal" },
                    { 3516002, 35, "Flórida Paulista" },
                    { 3516101, 35, "Florínia" },
                    { 3516200, 35, "Franca" },
                    { 3516309, 35, "Francisco Morato" },
                    { 3516408, 35, "Franco da Rocha" },
                    { 3516507, 35, "Gabriel Monteiro" },
                    { 3516606, 35, "Gália" },
                    { 3516705, 35, "Garça" },
                    { 3516804, 35, "Gastão Vidigal" },
                    { 3516853, 35, "Gavião Peixoto" },
                    { 3516903, 35, "General Salgado" },
                    { 3517000, 35, "Getulina" },
                    { 3517109, 35, "Glicério" },
                    { 3517208, 35, "Guaiçara" },
                    { 3517307, 35, "Guaimbê" },
                    { 3517406, 35, "Guaíra" },
                    { 3517505, 35, "Guapiaçu" },
                    { 3517604, 35, "Guapiara" },
                    { 3517703, 35, "Guará" },
                    { 3517802, 35, "Guaraçaí" },
                    { 3517901, 35, "Guaraci" },
                    { 3518008, 35, "Guarani dOeste" },
                    { 3518107, 35, "Guarantã" },
                    { 3518206, 35, "Guararapes" },
                    { 3518305, 35, "Guararema" },
                    { 3518404, 35, "Guaratinguetá" },
                    { 3518503, 35, "Guareí" },
                    { 3518602, 35, "Guariba" },
                    { 3518701, 35, "Guarujá" },
                    { 3518800, 35, "Guarulhos" },
                    { 3518859, 35, "Guatapará" },
                    { 3518909, 35, "Guzolândia" },
                    { 3519006, 35, "Herculândia" },
                    { 3519055, 35, "Holambra" },
                    { 3519071, 35, "Hortolândia" },
                    { 3519105, 35, "Iacanga" },
                    { 3519204, 35, "Iacri" },
                    { 3519253, 35, "Iaras" },
                    { 3519303, 35, "Ibaté" },
                    { 3519402, 35, "Ibirá" },
                    { 3519501, 35, "Ibirarema" },
                    { 3519600, 35, "Ibitinga" },
                    { 3519709, 35, "Ibiúna" },
                    { 3519808, 35, "Icém" },
                    { 3519907, 35, "Iepê" },
                    { 3520004, 35, "Igaraçu do Tietê" },
                    { 3520103, 35, "Igarapava" },
                    { 3520202, 35, "Igaratá" },
                    { 3520301, 35, "Iguape" },
                    { 3520400, 35, "Ilhabela" },
                    { 3520426, 35, "Ilha Comprida" },
                    { 3520442, 35, "Ilha Solteira" },
                    { 3520509, 35, "Indaiatuba" },
                    { 3520608, 35, "Indiana" },
                    { 3520707, 35, "Indiaporã" },
                    { 3520806, 35, "Inúbia Paulista" },
                    { 3520905, 35, "Ipaussu" },
                    { 3521002, 35, "Iperó" },
                    { 3521101, 35, "Ipeúna" },
                    { 3521150, 35, "Ipiguá" },
                    { 3521200, 35, "Iporanga" },
                    { 3521309, 35, "Ipuã" },
                    { 3521408, 35, "Iracemápolis" },
                    { 3521507, 35, "Irapuã" },
                    { 3521606, 35, "Irapuru" },
                    { 3521705, 35, "Itaberá" },
                    { 3521804, 35, "Itaí" },
                    { 3521903, 35, "Itajobi" },
                    { 3522000, 35, "Itaju" },
                    { 3522109, 35, "Itanhaém" },
                    { 3522158, 35, "Itaóca" },
                    { 3522208, 35, "Itapecerica da Serra" },
                    { 3522307, 35, "Itapetininga" },
                    { 3522406, 35, "Itapeva" },
                    { 3522505, 35, "Itapevi" },
                    { 3522604, 35, "Itapira" },
                    { 3522653, 35, "Itapirapuã Paulista" },
                    { 3522703, 35, "Itápolis" },
                    { 3522802, 35, "Itaporanga" },
                    { 3522901, 35, "Itapuí" },
                    { 3523008, 35, "Itapura" },
                    { 3523107, 35, "Itaquaquecetuba" },
                    { 3523206, 35, "Itararé" },
                    { 3523305, 35, "Itariri" },
                    { 3523404, 35, "Itatiba" },
                    { 3523503, 35, "Itatinga" },
                    { 3523602, 35, "Itirapina" },
                    { 3523701, 35, "Itirapuã" },
                    { 3523800, 35, "Itobi" },
                    { 3523909, 35, "Itu" },
                    { 3524006, 35, "Itupeva" },
                    { 3524105, 35, "Ituverava" },
                    { 3524204, 35, "Jaborandi" },
                    { 3524303, 35, "Jaboticabal" },
                    { 3524402, 35, "Jacareí" },
                    { 3524501, 35, "Jaci" },
                    { 3524600, 35, "Jacupiranga" },
                    { 3524709, 35, "Jaguariúna" },
                    { 3524808, 35, "Jales" },
                    { 3524907, 35, "Jambeiro" },
                    { 3525003, 35, "Jandira" },
                    { 3525102, 35, "Jardinópolis" },
                    { 3525201, 35, "Jarinu" },
                    { 3525300, 35, "Jaú" },
                    { 3525409, 35, "Jeriquara" },
                    { 3525508, 35, "Joanópolis" },
                    { 3525607, 35, "João Ramalho" },
                    { 3525706, 35, "José Bonifácio" },
                    { 3525805, 35, "Júlio Mesquita" },
                    { 3525854, 35, "Jumirim" },
                    { 3525904, 35, "Jundiaí" },
                    { 3526001, 35, "Junqueirópolis" },
                    { 3526100, 35, "Juquiá" },
                    { 3526209, 35, "Juquitiba" },
                    { 3526308, 35, "Lagoinha" },
                    { 3526407, 35, "Laranjal Paulista" },
                    { 3526506, 35, "Lavínia" },
                    { 3526605, 35, "Lavrinhas" },
                    { 3526704, 35, "Leme" },
                    { 3526803, 35, "Lençóis Paulista" },
                    { 3526902, 35, "Limeira" },
                    { 3527009, 35, "Lindóia" },
                    { 3527108, 35, "Lins" },
                    { 3527207, 35, "Lorena" },
                    { 3527256, 35, "Lourdes" },
                    { 3527306, 35, "Louveira" },
                    { 3527405, 35, "Lucélia" },
                    { 3527504, 35, "Lucianópolis" },
                    { 3527603, 35, "Luís Antônio" },
                    { 3527702, 35, "Luiziânia" },
                    { 3527801, 35, "Lupércio" },
                    { 3527900, 35, "Lutécia" },
                    { 3528007, 35, "Macatuba" },
                    { 3528106, 35, "Macaubal" },
                    { 3528205, 35, "Macedônia" },
                    { 3528304, 35, "Magda" },
                    { 3528403, 35, "Mairinque" },
                    { 3528502, 35, "Mairiporã" },
                    { 3528601, 35, "Manduri" },
                    { 3528700, 35, "Marabá Paulista" },
                    { 3528809, 35, "Maracaí" },
                    { 3528858, 35, "Marapoama" },
                    { 3528908, 35, "Mariápolis" },
                    { 3529005, 35, "Marília" },
                    { 3529104, 35, "Marinópolis" },
                    { 3529203, 35, "Martinópolis" },
                    { 3529302, 35, "Matão" },
                    { 3529401, 35, "Mauá" },
                    { 3529500, 35, "Mendonça" },
                    { 3529609, 35, "Meridiano" },
                    { 3529658, 35, "Mesópolis" },
                    { 3529708, 35, "Miguelópolis" },
                    { 3529807, 35, "Mineiros do Tietê" },
                    { 3529906, 35, "Miracatu" },
                    { 3530003, 35, "Mira Estrela" },
                    { 3530102, 35, "Mirandópolis" },
                    { 3530201, 35, "Mirante do Paranapanema" },
                    { 3530300, 35, "Mirassol" },
                    { 3530409, 35, "Mirassolândia" },
                    { 3530508, 35, "Mococa" },
                    { 3530607, 35, "Mogi das Cruzes" },
                    { 3530706, 35, "Mogi Guaçu" },
                    { 3530805, 35, "Moji Mirim" },
                    { 3530904, 35, "Mombuca" },
                    { 3531001, 35, "Monções" },
                    { 3531100, 35, "Mongaguá" },
                    { 3531209, 35, "Monte Alegre do Sul" },
                    { 3531308, 35, "Monte Alto" },
                    { 3531407, 35, "Monte Aprazível" },
                    { 3531506, 35, "Monte Azul Paulista" },
                    { 3531605, 35, "Monte Castelo" },
                    { 3531704, 35, "Monteiro Lobato" },
                    { 3531803, 35, "Monte Mor" },
                    { 3531902, 35, "Morro Agudo" },
                    { 3532009, 35, "Morungaba" },
                    { 3532058, 35, "Motuca" },
                    { 3532108, 35, "Murutinga do Sul" },
                    { 3532157, 35, "Nantes" },
                    { 3532207, 35, "Narandiba" },
                    { 3532306, 35, "Natividade da Serra" },
                    { 3532405, 35, "Nazaré Paulista" },
                    { 3532504, 35, "Neves Paulista" },
                    { 3532603, 35, "Nhandeara" },
                    { 3532702, 35, "Nipoã" },
                    { 3532801, 35, "Nova Aliança" },
                    { 3532827, 35, "Nova Campina" },
                    { 3532843, 35, "Nova Canaã Paulista" },
                    { 3532868, 35, "Nova Castilho" },
                    { 3532900, 35, "Nova Europa" },
                    { 3533007, 35, "Nova Granada" },
                    { 3533106, 35, "Nova Guataporanga" },
                    { 3533205, 35, "Nova Independência" },
                    { 3533254, 35, "Novais" },
                    { 3533304, 35, "Nova Luzitânia" },
                    { 3533403, 35, "Nova Odessa" },
                    { 3533502, 35, "Novo Horizonte" },
                    { 3533601, 35, "Nuporanga" },
                    { 3533700, 35, "Ocauçu" },
                    { 3533809, 35, "Óleo" },
                    { 3533908, 35, "Olímpia" },
                    { 3534005, 35, "Onda Verde" },
                    { 3534104, 35, "Oriente" },
                    { 3534203, 35, "Orindiúva" },
                    { 3534302, 35, "Orlândia" },
                    { 3534401, 35, "Osasco" },
                    { 3534500, 35, "Oscar Bressane" },
                    { 3534609, 35, "Osvaldo Cruz" },
                    { 3534708, 35, "Ourinhos" },
                    { 3534757, 35, "Ouroeste" },
                    { 3534807, 35, "Ouro Verde" },
                    { 3534906, 35, "Pacaembu" },
                    { 3535002, 35, "Palestina" },
                    { 3535101, 35, "Palmares Paulista" },
                    { 3535200, 35, "Palmeira dOeste" },
                    { 3535309, 35, "Palmital" },
                    { 3535408, 35, "Panorama" },
                    { 3535507, 35, "Paraguaçu Paulista" },
                    { 3535606, 35, "Paraibuna" },
                    { 3535705, 35, "Paraíso" },
                    { 3535804, 35, "Paranapanema" },
                    { 3535903, 35, "Paranapuã" },
                    { 3536000, 35, "Parapuã" },
                    { 3536109, 35, "Pardinho" },
                    { 3536208, 35, "Pariquera-Açu" },
                    { 3536257, 35, "Parisi" },
                    { 3536307, 35, "Patrocínio Paulista" },
                    { 3536406, 35, "Paulicéia" },
                    { 3536505, 35, "Paulínia" },
                    { 3536570, 35, "Paulistânia" },
                    { 3536604, 35, "Paulo de Faria" },
                    { 3536703, 35, "Pederneiras" },
                    { 3536802, 35, "Pedra Bela" },
                    { 3536901, 35, "Pedranópolis" },
                    { 3537008, 35, "Pedregulho" },
                    { 3537107, 35, "Pedreira" },
                    { 3537156, 35, "Pedrinhas Paulista" },
                    { 3537206, 35, "Pedro de Toledo" },
                    { 3537305, 35, "Penápolis" },
                    { 3537404, 35, "Pereira Barreto" },
                    { 3537503, 35, "Pereiras" },
                    { 3537602, 35, "Peruíbe" },
                    { 3537701, 35, "Piacatu" },
                    { 3537800, 35, "Piedade" },
                    { 3537909, 35, "Pilar do Sul" },
                    { 3538006, 35, "Pindamonhangaba" },
                    { 3538105, 35, "Pindorama" },
                    { 3538204, 35, "Pinhalzinho" },
                    { 3538303, 35, "Piquerobi" },
                    { 3538501, 35, "Piquete" },
                    { 3538600, 35, "Piracaia" },
                    { 3538709, 35, "Piracicaba" },
                    { 3538808, 35, "Piraju" },
                    { 3538907, 35, "Pirajuí" },
                    { 3539004, 35, "Pirangi" },
                    { 3539103, 35, "Pirapora do Bom Jesus" },
                    { 3539202, 35, "Pirapozinho" },
                    { 3539301, 35, "Pirassununga" },
                    { 3539400, 35, "Piratininga" },
                    { 3539509, 35, "Pitangueiras" },
                    { 3539608, 35, "Planalto" },
                    { 3539707, 35, "Platina" },
                    { 3539806, 35, "Poá" },
                    { 3539905, 35, "Poloni" },
                    { 3540002, 35, "Pompéia" },
                    { 3540101, 35, "Pongaí" },
                    { 3540200, 35, "Pontal" },
                    { 3540259, 35, "Pontalinda" },
                    { 3540309, 35, "Pontes Gestal" },
                    { 3540408, 35, "Populina" },
                    { 3540507, 35, "Porangaba" },
                    { 3540606, 35, "Porto Feliz" },
                    { 3540705, 35, "Porto Ferreira" },
                    { 3540754, 35, "Potim" },
                    { 3540804, 35, "Potirendaba" },
                    { 3540853, 35, "Pracinha" },
                    { 3540903, 35, "Pradópolis" },
                    { 3541000, 35, "Praia Grande" },
                    { 3541059, 35, "Pratânia" },
                    { 3541109, 35, "Presidente Alves" },
                    { 3541208, 35, "Presidente Bernardes" },
                    { 3541307, 35, "Presidente Epitácio" },
                    { 3541406, 35, "Presidente Prudente" },
                    { 3541505, 35, "Presidente Venceslau" },
                    { 3541604, 35, "Promissão" },
                    { 3541653, 35, "Quadra" },
                    { 3541703, 35, "Quatá" },
                    { 3541802, 35, "Queiroz" },
                    { 3541901, 35, "Queluz" },
                    { 3542008, 35, "Quintana" },
                    { 3542107, 35, "Rafard" },
                    { 3542206, 35, "Rancharia" },
                    { 3542305, 35, "Redenção da Serra" },
                    { 3542404, 35, "Regente Feijó" },
                    { 3542503, 35, "Reginópolis" },
                    { 3542602, 35, "Registro" },
                    { 3542701, 35, "Restinga" },
                    { 3542800, 35, "Ribeira" },
                    { 3542909, 35, "Ribeirão Bonito" },
                    { 3543006, 35, "Ribeirão Branco" },
                    { 3543105, 35, "Ribeirão Corrente" },
                    { 3543204, 35, "Ribeirão do Sul" },
                    { 3543238, 35, "Ribeirão dos Índios" },
                    { 3543253, 35, "Ribeirão Grande" },
                    { 3543303, 35, "Ribeirão Pires" },
                    { 3543402, 35, "Ribeirão Preto" },
                    { 3543501, 35, "Riversul" },
                    { 3543600, 35, "Rifaina" },
                    { 3543709, 35, "Rincão" },
                    { 3543808, 35, "Rinópolis" },
                    { 3543907, 35, "Rio Claro" },
                    { 3544004, 35, "Rio das Pedras" },
                    { 3544103, 35, "Rio Grande da Serra" },
                    { 3544202, 35, "Riolândia" },
                    { 3544251, 35, "Rosana" },
                    { 3544301, 35, "Roseira" },
                    { 3544400, 35, "Rubiácea" },
                    { 3544509, 35, "Rubinéia" },
                    { 3544608, 35, "Sabino" },
                    { 3544707, 35, "Sagres" },
                    { 3544806, 35, "Sales" },
                    { 3544905, 35, "Sales Oliveira" },
                    { 3545001, 35, "Salesópolis" },
                    { 3545100, 35, "Salmourão" },
                    { 3545159, 35, "Saltinho" },
                    { 3545209, 35, "Salto" },
                    { 3545308, 35, "Salto de Pirapora" },
                    { 3545407, 35, "Salto Grande" },
                    { 3545506, 35, "Sandovalina" },
                    { 3545605, 35, "Santa Adélia" },
                    { 3545704, 35, "Santa Albertina" },
                    { 3545803, 35, "Santa Bárbara dOeste" },
                    { 3546009, 35, "Santa Branca" },
                    { 3546108, 35, "Santa Clara dOeste" },
                    { 3546207, 35, "Santa Cruz da Conceição" },
                    { 3546256, 35, "Santa Cruz da Esperança" },
                    { 3546306, 35, "Santa Cruz das Palmeiras" },
                    { 3546405, 35, "Santa Cruz do Rio Pardo" },
                    { 3546504, 35, "Santa Ernestina" },
                    { 3546603, 35, "Santa Fé do Sul" },
                    { 3546702, 35, "Santa Gertrudes" },
                    { 3546801, 35, "Santa Isabel" },
                    { 3546900, 35, "Santa Lúcia" },
                    { 3547007, 35, "Santa Maria da Serra" },
                    { 3547106, 35, "Santa Mercedes" },
                    { 3547205, 35, "Santana da Ponte Pensa" },
                    { 3547304, 35, "Santana de Parnaíba" },
                    { 3547403, 35, "Santa Rita dOeste" },
                    { 3547502, 35, "Santa Rita do Passa Quatro" },
                    { 3547601, 35, "Santa Rosa de Viterbo" },
                    { 3547650, 35, "Santa Salete" },
                    { 3547700, 35, "Santo Anastácio" },
                    { 3547809, 35, "Santo André" },
                    { 3547908, 35, "Santo Antônio da Alegria" },
                    { 3548005, 35, "Santo Antônio de Posse" },
                    { 3548054, 35, "Santo Antônio do Aracanguá" },
                    { 3548104, 35, "Santo Antônio do Jardim" },
                    { 3548203, 35, "Santo Antônio do Pinhal" },
                    { 3548302, 35, "Santo Expedito" },
                    { 3548401, 35, "Santópolis do Aguapeí" },
                    { 3548500, 35, "Santos" },
                    { 3548609, 35, "São Bento do Sapucaí" },
                    { 3548708, 35, "São Bernardo do Campo" },
                    { 3548807, 35, "São Caetano do Sul" },
                    { 3548906, 35, "São Carlos" },
                    { 3549003, 35, "São Francisco" },
                    { 3549102, 35, "São João da Boa Vista" },
                    { 3549201, 35, "São João das Duas Pontes" },
                    { 3549250, 35, "São João de Iracema" },
                    { 3549300, 35, "São João do Pau dAlho" },
                    { 3549409, 35, "São Joaquim da Barra" },
                    { 3549508, 35, "São José da Bela Vista" },
                    { 3549607, 35, "São José do Barreiro" },
                    { 3549706, 35, "São José do Rio Pardo" },
                    { 3549805, 35, "São José do Rio Preto" },
                    { 3549904, 35, "São José dos Campos" },
                    { 3549953, 35, "São Lourenço da Serra" },
                    { 3550001, 35, "São Luís do Paraitinga" },
                    { 3550100, 35, "São Manuel" },
                    { 3550209, 35, "São Miguel Arcanjo" },
                    { 3550308, 35, "São Paulo" },
                    { 3550407, 35, "São Pedro" },
                    { 3550506, 35, "São Pedro do Turvo" },
                    { 3550605, 35, "São Roque" },
                    { 3550704, 35, "São Sebastião" },
                    { 3550803, 35, "São Sebastião da Grama" },
                    { 3550902, 35, "São Simão" },
                    { 3551009, 35, "São Vicente" },
                    { 3551108, 35, "Sarapuí" },
                    { 3551207, 35, "Sarutaiá" },
                    { 3551306, 35, "Sebastianópolis do Sul" },
                    { 3551405, 35, "Serra Azul" },
                    { 3551504, 35, "Serrana" },
                    { 3551603, 35, "Serra Negra" },
                    { 3551702, 35, "Sertãozinho" },
                    { 3551801, 35, "Sete Barras" },
                    { 3551900, 35, "Severínia" },
                    { 3552007, 35, "Silveiras" },
                    { 3552106, 35, "Socorro" },
                    { 3552205, 35, "Sorocaba" },
                    { 3552304, 35, "Sud Mennucci" },
                    { 3552403, 35, "Sumaré" },
                    { 3552502, 35, "Suzano" },
                    { 3552551, 35, "Suzanápolis" },
                    { 3552601, 35, "Tabapuã" },
                    { 3552700, 35, "Tabatinga" },
                    { 3552809, 35, "Taboão da Serra" },
                    { 3552908, 35, "Taciba" },
                    { 3553005, 35, "Taguaí" },
                    { 3553104, 35, "Taiaçu" },
                    { 3553203, 35, "Taiúva" },
                    { 3553302, 35, "Tambaú" },
                    { 3553401, 35, "Tanabi" },
                    { 3553500, 35, "Tapiraí" },
                    { 3553609, 35, "Tapiratiba" },
                    { 3553658, 35, "Taquaral" },
                    { 3553708, 35, "Taquaritinga" },
                    { 3553807, 35, "Taquarituba" },
                    { 3553856, 35, "Taquarivaí" },
                    { 3553906, 35, "Tarabai" },
                    { 3553955, 35, "Tarumã" },
                    { 3554003, 35, "Tatuí" },
                    { 3554102, 35, "Taubaté" },
                    { 3554201, 35, "Tejupá" },
                    { 3554300, 35, "Teodoro Sampaio" },
                    { 3554409, 35, "Terra Roxa" },
                    { 3554508, 35, "Tietê" },
                    { 3554607, 35, "Timburi" },
                    { 3554656, 35, "Torre de Pedra" },
                    { 3554706, 35, "Torrinha" },
                    { 3554755, 35, "Trabiju" },
                    { 3554805, 35, "Tremembé" },
                    { 3554904, 35, "Três Fronteiras" },
                    { 3554953, 35, "Tuiuti" },
                    { 3555000, 35, "Tupã" },
                    { 3555109, 35, "Tupi Paulista" },
                    { 3555208, 35, "Turiúba" },
                    { 3555307, 35, "Turmalina" },
                    { 3555356, 35, "Ubarana" },
                    { 3555406, 35, "Ubatuba" },
                    { 3555505, 35, "Ubirajara" },
                    { 3555604, 35, "Uchoa" },
                    { 3555703, 35, "União Paulista" },
                    { 3555802, 35, "Urânia" },
                    { 3555901, 35, "Uru" },
                    { 3556008, 35, "Urupês" },
                    { 3556107, 35, "Valentim Gentil" },
                    { 3556206, 35, "Valinhos" },
                    { 3556305, 35, "Valparaíso" },
                    { 3556354, 35, "Vargem" },
                    { 3556404, 35, "Vargem Grande do Sul" },
                    { 3556453, 35, "Vargem Grande Paulista" },
                    { 3556503, 35, "Várzea Paulista" },
                    { 3556602, 35, "Vera Cruz" },
                    { 3556701, 35, "Vinhedo" },
                    { 3556800, 35, "Viradouro" },
                    { 3556909, 35, "Vista Alegre do Alto" },
                    { 3556958, 35, "Vitória Brasil" },
                    { 3557006, 35, "Votorantim" },
                    { 3557105, 35, "Votuporanga" },
                    { 3557154, 35, "Zacarias" },
                    { 3557204, 35, "Chavantes" },
                    { 3557303, 35, "Estiva Gerbi" },
                    { 4100103, 41, "Abatiá" },
                    { 4100202, 41, "Adrianópolis" },
                    { 4100301, 41, "Agudos do Sul" },
                    { 4100400, 41, "Almirante Tamandaré" },
                    { 4100459, 41, "Altamira do Paraná" },
                    { 4100509, 41, "Altônia" },
                    { 4100608, 41, "Alto Paraná" },
                    { 4100707, 41, "Alto Piquiri" },
                    { 4100806, 41, "Alvorada do Sul" },
                    { 4100905, 41, "Amaporã" },
                    { 4101002, 41, "Ampére" },
                    { 4101051, 41, "Anahy" },
                    { 4101101, 41, "Andirá" },
                    { 4101150, 41, "Ângulo" },
                    { 4101200, 41, "Antonina" },
                    { 4101309, 41, "Antônio Olinto" },
                    { 4101408, 41, "Apucarana" },
                    { 4101507, 41, "Arapongas" },
                    { 4101606, 41, "Arapoti" },
                    { 4101655, 41, "Arapuã" },
                    { 4101705, 41, "Araruna" },
                    { 4101804, 41, "Araucária" },
                    { 4101853, 41, "Ariranha do Ivaí" },
                    { 4101903, 41, "Assaí" },
                    { 4102000, 41, "Assis Chateaubriand" },
                    { 4102109, 41, "Astorga" },
                    { 4102208, 41, "Atalaia" },
                    { 4102307, 41, "Balsa Nova" },
                    { 4102406, 41, "Bandeirantes" },
                    { 4102505, 41, "Barbosa Ferraz" },
                    { 4102604, 41, "Barracão" },
                    { 4102703, 41, "Barra do Jacaré" },
                    { 4102752, 41, "Bela Vista da Caroba" },
                    { 4102802, 41, "Bela Vista do Paraíso" },
                    { 4102901, 41, "Bituruna" },
                    { 4103008, 41, "Boa Esperança" },
                    { 4103024, 41, "Boa Esperança do Iguaçu" },
                    { 4103040, 41, "Boa Ventura de São Roque" },
                    { 4103057, 41, "Boa Vista da Aparecida" },
                    { 4103107, 41, "Bocaiúva do Sul" },
                    { 4103156, 41, "Bom Jesus do Sul" },
                    { 4103206, 41, "Bom Sucesso" },
                    { 4103222, 41, "Bom Sucesso do Sul" },
                    { 4103305, 41, "Borrazópolis" },
                    { 4103354, 41, "Braganey" },
                    { 4103370, 41, "Brasilândia do Sul" },
                    { 4103404, 41, "Cafeara" },
                    { 4103453, 41, "Cafelândia" },
                    { 4103479, 41, "Cafezal do Sul" },
                    { 4103503, 41, "Califórnia" },
                    { 4103602, 41, "Cambará" },
                    { 4103701, 41, "Cambé" },
                    { 4103800, 41, "Cambira" },
                    { 4103909, 41, "Campina da Lagoa" },
                    { 4103958, 41, "Campina do Simão" },
                    { 4104006, 41, "Campina Grande do Sul" },
                    { 4104055, 41, "Campo Bonito" },
                    { 4104105, 41, "Campo do Tenente" },
                    { 4104204, 41, "Campo Largo" },
                    { 4104253, 41, "Campo Magro" },
                    { 4104303, 41, "Campo Mourão" },
                    { 4104402, 41, "Cândido de Abreu" },
                    { 4104428, 41, "Candói" },
                    { 4104451, 41, "Cantagalo" },
                    { 4104501, 41, "Capanema" },
                    { 4104600, 41, "Capitão Leônidas Marques" },
                    { 4104659, 41, "Carambeí" },
                    { 4104709, 41, "Carlópolis" },
                    { 4104808, 41, "Cascavel" },
                    { 4104907, 41, "Castro" },
                    { 4105003, 41, "Catanduvas" },
                    { 4105102, 41, "Centenário do Sul" },
                    { 4105201, 41, "Cerro Azul" },
                    { 4105300, 41, "Céu Azul" },
                    { 4105409, 41, "Chopinzinho" },
                    { 4105508, 41, "Cianorte" },
                    { 4105607, 41, "Cidade Gaúcha" },
                    { 4105706, 41, "Clevelândia" },
                    { 4105805, 41, "Colombo" },
                    { 4105904, 41, "Colorado" },
                    { 4106001, 41, "Congonhinhas" },
                    { 4106100, 41, "Conselheiro Mairinck" },
                    { 4106209, 41, "Contenda" },
                    { 4106308, 41, "Corbélia" },
                    { 4106407, 41, "Cornélio Procópio" },
                    { 4106456, 41, "Coronel Domingos Soares" },
                    { 4106506, 41, "Coronel Vivida" },
                    { 4106555, 41, "Corumbataí do Sul" },
                    { 4106571, 41, "Cruzeiro do Iguaçu" },
                    { 4106605, 41, "Cruzeiro do Oeste" },
                    { 4106704, 41, "Cruzeiro do Sul" },
                    { 4106803, 41, "Cruz Machado" },
                    { 4106852, 41, "Cruzmaltina" },
                    { 4106902, 41, "Curitiba" },
                    { 4107009, 41, "Curiúva" },
                    { 4107108, 41, "Diamante do Norte" },
                    { 4107124, 41, "Diamante do Sul" },
                    { 4107157, 41, "Diamante DOeste" },
                    { 4107207, 41, "Dois Vizinhos" },
                    { 4107256, 41, "Douradina" },
                    { 4107306, 41, "Doutor Camargo" },
                    { 4107405, 41, "Enéas Marques" },
                    { 4107504, 41, "Engenheiro Beltrão" },
                    { 4107520, 41, "Esperança Nova" },
                    { 4107538, 41, "Entre Rios do Oeste" },
                    { 4107546, 41, "Espigão Alto do Iguaçu" },
                    { 4107553, 41, "Farol" },
                    { 4107603, 41, "Faxinal" },
                    { 4107652, 41, "Fazenda Rio Grande" },
                    { 4107702, 41, "Fênix" },
                    { 4107736, 41, "Fernandes Pinheiro" },
                    { 4107751, 41, "Figueira" },
                    { 4107801, 41, "Floraí" },
                    { 4107850, 41, "Flor da Serra do Sul" },
                    { 4107900, 41, "Floresta" },
                    { 4108007, 41, "Florestópolis" },
                    { 4108106, 41, "Flórida" },
                    { 4108205, 41, "Formosa do Oeste" },
                    { 4108304, 41, "Foz do Iguaçu" },
                    { 4108320, 41, "Francisco Alves" },
                    { 4108403, 41, "Francisco Beltrão" },
                    { 4108452, 41, "Foz do Jordão" },
                    { 4108502, 41, "General Carneiro" },
                    { 4108551, 41, "Godoy Moreira" },
                    { 4108601, 41, "Goioerê" },
                    { 4108650, 41, "Goioxim" },
                    { 4108700, 41, "Grandes Rios" },
                    { 4108809, 41, "Guaíra" },
                    { 4108908, 41, "Guairaçá" },
                    { 4108957, 41, "Guamiranga" },
                    { 4109005, 41, "Guapirama" },
                    { 4109104, 41, "Guaporema" },
                    { 4109203, 41, "Guaraci" },
                    { 4109302, 41, "Guaraniaçu" },
                    { 4109401, 41, "Guarapuava" },
                    { 4109500, 41, "Guaraqueçaba" },
                    { 4109609, 41, "Guaratuba" },
                    { 4109658, 41, "Honório Serpa" },
                    { 4109708, 41, "Ibaiti" },
                    { 4109757, 41, "Ibema" },
                    { 4109807, 41, "Ibiporã" },
                    { 4109906, 41, "Icaraíma" },
                    { 4110003, 41, "Iguaraçu" },
                    { 4110052, 41, "Iguatu" },
                    { 4110078, 41, "Imbaú" },
                    { 4110102, 41, "Imbituva" },
                    { 4110201, 41, "Inácio Martins" },
                    { 4110300, 41, "Inajá" },
                    { 4110409, 41, "Indianópolis" },
                    { 4110508, 41, "Ipiranga" },
                    { 4110607, 41, "Iporã" },
                    { 4110656, 41, "Iracema do Oeste" },
                    { 4110706, 41, "Irati" },
                    { 4110805, 41, "Iretama" },
                    { 4110904, 41, "Itaguajé" },
                    { 4110953, 41, "Itaipulândia" },
                    { 4111001, 41, "Itambaracá" },
                    { 4111100, 41, "Itambé" },
                    { 4111209, 41, "Itapejara dOeste" },
                    { 4111258, 41, "Itaperuçu" },
                    { 4111308, 41, "Itaúna do Sul" },
                    { 4111407, 41, "Ivaí" },
                    { 4111506, 41, "Ivaiporã" },
                    { 4111555, 41, "Ivaté" },
                    { 4111605, 41, "Ivatuba" },
                    { 4111704, 41, "Jaboti" },
                    { 4111803, 41, "Jacarezinho" },
                    { 4111902, 41, "Jaguapitã" },
                    { 4112009, 41, "Jaguariaíva" },
                    { 4112108, 41, "Jandaia do Sul" },
                    { 4112207, 41, "Janiópolis" },
                    { 4112306, 41, "Japira" },
                    { 4112405, 41, "Japurá" },
                    { 4112504, 41, "Jardim Alegre" },
                    { 4112603, 41, "Jardim Olinda" },
                    { 4112702, 41, "Jataizinho" },
                    { 4112751, 41, "Jesuítas" },
                    { 4112801, 41, "Joaquim Távora" },
                    { 4112900, 41, "Jundiaí do Sul" },
                    { 4112959, 41, "Juranda" },
                    { 4113007, 41, "Jussara" },
                    { 4113106, 41, "Kaloré" },
                    { 4113205, 41, "Lapa" },
                    { 4113254, 41, "Laranjal" },
                    { 4113304, 41, "Laranjeiras do Sul" },
                    { 4113403, 41, "Leópolis" },
                    { 4113429, 41, "Lidianópolis" },
                    { 4113452, 41, "Lindoeste" },
                    { 4113502, 41, "Loanda" },
                    { 4113601, 41, "Lobato" },
                    { 4113700, 41, "Londrina" },
                    { 4113734, 41, "Luiziana" },
                    { 4113759, 41, "Lunardelli" },
                    { 4113809, 41, "Lupionópolis" },
                    { 4113908, 41, "Mallet" },
                    { 4114005, 41, "Mamborê" },
                    { 4114104, 41, "Mandaguaçu" },
                    { 4114203, 41, "Mandaguari" },
                    { 4114302, 41, "Mandirituba" },
                    { 4114351, 41, "Manfrinópolis" },
                    { 4114401, 41, "Mangueirinha" },
                    { 4114500, 41, "Manoel Ribas" },
                    { 4114609, 41, "Marechal Cândido Rondon" },
                    { 4114708, 41, "Maria Helena" },
                    { 4114807, 41, "Marialva" },
                    { 4114906, 41, "Marilândia do Sul" },
                    { 4115002, 41, "Marilena" },
                    { 4115101, 41, "Mariluz" },
                    { 4115200, 41, "Maringá" },
                    { 4115309, 41, "Mariópolis" },
                    { 4115358, 41, "Maripá" },
                    { 4115408, 41, "Marmeleiro" },
                    { 4115457, 41, "Marquinho" },
                    { 4115507, 41, "Marumbi" },
                    { 4115606, 41, "Matelândia" },
                    { 4115705, 41, "Matinhos" },
                    { 4115739, 41, "Mato Rico" },
                    { 4115754, 41, "Mauá da Serra" },
                    { 4115804, 41, "Medianeira" },
                    { 4115853, 41, "Mercedes" },
                    { 4115903, 41, "Mirador" },
                    { 4116000, 41, "Miraselva" },
                    { 4116059, 41, "Missal" },
                    { 4116109, 41, "Moreira Sales" },
                    { 4116208, 41, "Morretes" },
                    { 4116307, 41, "Munhoz de Melo" },
                    { 4116406, 41, "Nossa Senhora das Graças" },
                    { 4116505, 41, "Nova Aliança do Ivaí" },
                    { 4116604, 41, "Nova América da Colina" },
                    { 4116703, 41, "Nova Aurora" },
                    { 4116802, 41, "Nova Cantu" },
                    { 4116901, 41, "Nova Esperança" },
                    { 4116950, 41, "Nova Esperança do Sudoeste" },
                    { 4117008, 41, "Nova Fátima" },
                    { 4117057, 41, "Nova Laranjeiras" },
                    { 4117107, 41, "Nova Londrina" },
                    { 4117206, 41, "Nova Olímpia" },
                    { 4117214, 41, "Nova Santa Bárbara" },
                    { 4117222, 41, "Nova Santa Rosa" },
                    { 4117255, 41, "Nova Prata do Iguaçu" },
                    { 4117271, 41, "Nova Tebas" },
                    { 4117297, 41, "Novo Itacolomi" },
                    { 4117305, 41, "Ortigueira" },
                    { 4117404, 41, "Ourizona" },
                    { 4117453, 41, "Ouro Verde do Oeste" },
                    { 4117503, 41, "Paiçandu" },
                    { 4117602, 41, "Palmas" },
                    { 4117701, 41, "Palmeira" },
                    { 4117800, 41, "Palmital" },
                    { 4117909, 41, "Palotina" },
                    { 4118006, 41, "Paraíso do Norte" },
                    { 4118105, 41, "Paranacity" },
                    { 4118204, 41, "Paranaguá" },
                    { 4118303, 41, "Paranapoema" },
                    { 4118402, 41, "Paranavaí" },
                    { 4118451, 41, "Pato Bragado" },
                    { 4118501, 41, "Pato Branco" },
                    { 4118600, 41, "Paula Freitas" },
                    { 4118709, 41, "Paulo Frontin" },
                    { 4118808, 41, "Peabiru" },
                    { 4118857, 41, "Perobal" },
                    { 4118907, 41, "Pérola" },
                    { 4119004, 41, "Pérola dOeste" },
                    { 4119103, 41, "Piên" },
                    { 4119152, 41, "Pinhais" },
                    { 4119202, 41, "Pinhalão" },
                    { 4119251, 41, "Pinhal de São Bento" },
                    { 4119301, 41, "Pinhão" },
                    { 4119400, 41, "Piraí do Sul" },
                    { 4119509, 41, "Piraquara" },
                    { 4119608, 41, "Pitanga" },
                    { 4119657, 41, "Pitangueiras" },
                    { 4119707, 41, "Planaltina do Paraná" },
                    { 4119806, 41, "Planalto" },
                    { 4119905, 41, "Ponta Grossa" },
                    { 4119954, 41, "Pontal do Paraná" },
                    { 4120002, 41, "Porecatu" },
                    { 4120101, 41, "Porto Amazonas" },
                    { 4120150, 41, "Porto Barreiro" },
                    { 4120200, 41, "Porto Rico" },
                    { 4120309, 41, "Porto Vitória" },
                    { 4120333, 41, "Prado Ferreira" },
                    { 4120358, 41, "Pranchita" },
                    { 4120408, 41, "Presidente Castelo Branco" },
                    { 4120507, 41, "Primeiro de Maio" },
                    { 4120606, 41, "Prudentópolis" },
                    { 4120655, 41, "Quarto Centenário" },
                    { 4120705, 41, "Quatiguá" },
                    { 4120804, 41, "Quatro Barras" },
                    { 4120853, 41, "Quatro Pontes" },
                    { 4120903, 41, "Quedas do Iguaçu" },
                    { 4121000, 41, "Querência do Norte" },
                    { 4121109, 41, "Quinta do Sol" },
                    { 4121208, 41, "Quitandinha" },
                    { 4121257, 41, "Ramilândia" },
                    { 4121307, 41, "Rancho Alegre" },
                    { 4121356, 41, "Rancho Alegre DOeste" },
                    { 4121406, 41, "Realeza" },
                    { 4121505, 41, "Rebouças" },
                    { 4121604, 41, "Renascença" },
                    { 4121703, 41, "Reserva" },
                    { 4121752, 41, "Reserva do Iguaçu" },
                    { 4121802, 41, "Ribeirão Claro" },
                    { 4121901, 41, "Ribeirão do Pinhal" },
                    { 4122008, 41, "Rio Azul" },
                    { 4122107, 41, "Rio Bom" },
                    { 4122156, 41, "Rio Bonito do Iguaçu" },
                    { 4122172, 41, "Rio Branco do Ivaí" },
                    { 4122206, 41, "Rio Branco do Sul" },
                    { 4122305, 41, "Rio Negro" },
                    { 4122404, 41, "Rolândia" },
                    { 4122503, 41, "Roncador" },
                    { 4122602, 41, "Rondon" },
                    { 4122651, 41, "Rosário do Ivaí" },
                    { 4122701, 41, "Sabáudia" },
                    { 4122800, 41, "Salgado Filho" },
                    { 4122909, 41, "Salto do Itararé" },
                    { 4123006, 41, "Salto do Lontra" },
                    { 4123105, 41, "Santa Amélia" },
                    { 4123204, 41, "Santa Cecília do Pavão" },
                    { 4123303, 41, "Santa Cruz de Monte Castelo" },
                    { 4123402, 41, "Santa Fé" },
                    { 4123501, 41, "Santa Helena" },
                    { 4123600, 41, "Santa Inês" },
                    { 4123709, 41, "Santa Isabel do Ivaí" },
                    { 4123808, 41, "Santa Izabel do Oeste" },
                    { 4123824, 41, "Santa Lúcia" },
                    { 4123857, 41, "Santa Maria do Oeste" },
                    { 4123907, 41, "Santa Mariana" },
                    { 4123956, 41, "Santa Mônica" },
                    { 4124004, 41, "Santana do Itararé" },
                    { 4124020, 41, "Santa Tereza do Oeste" },
                    { 4124053, 41, "Santa Terezinha de Itaipu" },
                    { 4124103, 41, "Santo Antônio da Platina" },
                    { 4124202, 41, "Santo Antônio do Caiuá" },
                    { 4124301, 41, "Santo Antônio do Paraíso" },
                    { 4124400, 41, "Santo Antônio do Sudoeste" },
                    { 4124509, 41, "Santo Inácio" },
                    { 4124608, 41, "São Carlos do Ivaí" },
                    { 4124707, 41, "São Jerônimo da Serra" },
                    { 4124806, 41, "São João" },
                    { 4124905, 41, "São João do Caiuá" },
                    { 4125001, 41, "São João do Ivaí" },
                    { 4125100, 41, "São João do Triunfo" },
                    { 4125209, 41, "São Jorge dOeste" },
                    { 4125308, 41, "São Jorge do Ivaí" },
                    { 4125357, 41, "São Jorge do Patrocínio" },
                    { 4125407, 41, "São José da Boa Vista" },
                    { 4125456, 41, "São José das Palmeiras" },
                    { 4125506, 41, "São José dos Pinhais" },
                    { 4125555, 41, "São Manoel do Paraná" },
                    { 4125605, 41, "São Mateus do Sul" },
                    { 4125704, 41, "São Miguel do Iguaçu" },
                    { 4125753, 41, "São Pedro do Iguaçu" },
                    { 4125803, 41, "São Pedro do Ivaí" },
                    { 4125902, 41, "São Pedro do Paraná" },
                    { 4126009, 41, "São Sebastião da Amoreira" },
                    { 4126108, 41, "São Tomé" },
                    { 4126207, 41, "Sapopema" },
                    { 4126256, 41, "Sarandi" },
                    { 4126272, 41, "Saudade do Iguaçu" },
                    { 4126306, 41, "Sengés" },
                    { 4126355, 41, "Serranópolis do Iguaçu" },
                    { 4126405, 41, "Sertaneja" },
                    { 4126504, 41, "Sertanópolis" },
                    { 4126603, 41, "Siqueira Campos" },
                    { 4126652, 41, "Sulina" },
                    { 4126678, 41, "Tamarana" },
                    { 4126702, 41, "Tamboara" },
                    { 4126801, 41, "Tapejara" },
                    { 4126900, 41, "Tapira" },
                    { 4127007, 41, "Teixeira Soares" },
                    { 4127106, 41, "Telêmaco Borba" },
                    { 4127205, 41, "Terra Boa" },
                    { 4127304, 41, "Terra Rica" },
                    { 4127403, 41, "Terra Roxa" },
                    { 4127502, 41, "Tibagi" },
                    { 4127601, 41, "Tijucas do Sul" },
                    { 4127700, 41, "Toledo" },
                    { 4127809, 41, "Tomazina" },
                    { 4127858, 41, "Três Barras do Paraná" },
                    { 4127882, 41, "Tunas do Paraná" },
                    { 4127908, 41, "Tuneiras do Oeste" },
                    { 4127957, 41, "Tupãssi" },
                    { 4127965, 41, "Turvo" },
                    { 4128005, 41, "Ubiratã" },
                    { 4128104, 41, "Umuarama" },
                    { 4128203, 41, "União da Vitória" },
                    { 4128302, 41, "Uniflor" },
                    { 4128401, 41, "Uraí" },
                    { 4128500, 41, "Wenceslau Braz" },
                    { 4128534, 41, "Ventania" },
                    { 4128559, 41, "Vera Cruz do Oeste" },
                    { 4128609, 41, "Verê" },
                    { 4128625, 41, "Alto Paraíso" },
                    { 4128633, 41, "Doutor Ulysses" },
                    { 4128658, 41, "Virmond" },
                    { 4128708, 41, "Vitorino" },
                    { 4128807, 41, "Xambrê" },
                    { 4200051, 42, "Abdon Batista" },
                    { 4200101, 42, "Abelardo Luz" },
                    { 4200200, 42, "Agrolândia" },
                    { 4200309, 42, "Agronômica" },
                    { 4200408, 42, "Água Doce" },
                    { 4200507, 42, "Águas de Chapecó" },
                    { 4200556, 42, "Águas Frias" },
                    { 4200606, 42, "Águas Mornas" },
                    { 4200705, 42, "Alfredo Wagner" },
                    { 4200754, 42, "Alto Bela Vista" },
                    { 4200804, 42, "Anchieta" },
                    { 4200903, 42, "Angelina" },
                    { 4201000, 42, "Anita Garibaldi" },
                    { 4201109, 42, "Anitápolis" },
                    { 4201208, 42, "Antônio Carlos" },
                    { 4201257, 42, "Apiúna" },
                    { 4201273, 42, "Arabutã" },
                    { 4201307, 42, "Araquari" },
                    { 4201406, 42, "Araranguá" },
                    { 4201505, 42, "Armazém" },
                    { 4201604, 42, "Arroio Trinta" },
                    { 4201653, 42, "Arvoredo" },
                    { 4201703, 42, "Ascurra" },
                    { 4201802, 42, "Atalanta" },
                    { 4201901, 42, "Aurora" },
                    { 4201950, 42, "Balneário Arroio do Silva" },
                    { 4202008, 42, "Balneário Camboriú" },
                    { 4202057, 42, "Balneário Barra do Sul" },
                    { 4202073, 42, "Balneário Gaivota" },
                    { 4202081, 42, "Bandeirante" },
                    { 4202099, 42, "Barra Bonita" },
                    { 4202107, 42, "Barra Velha" },
                    { 4202131, 42, "Bela Vista do Toldo" },
                    { 4202156, 42, "Belmonte" },
                    { 4202206, 42, "Benedito Novo" },
                    { 4202305, 42, "Biguaçu" },
                    { 4202404, 42, "Blumenau" },
                    { 4202438, 42, "Bocaina do Sul" },
                    { 4202453, 42, "Bombinhas" },
                    { 4202503, 42, "Bom Jardim da Serra" },
                    { 4202537, 42, "Bom Jesus" },
                    { 4202578, 42, "Bom Jesus do Oeste" },
                    { 4202602, 42, "Bom Retiro" },
                    { 4202701, 42, "Botuverá" },
                    { 4202800, 42, "Braço do Norte" },
                    { 4202859, 42, "Braço do Trombudo" },
                    { 4202875, 42, "Brunópolis" },
                    { 4202909, 42, "Brusque" },
                    { 4203006, 42, "Caçador" },
                    { 4203105, 42, "Caibi" },
                    { 4203154, 42, "Calmon" },
                    { 4203204, 42, "Camboriú" },
                    { 4203253, 42, "Capão Alto" },
                    { 4203303, 42, "Campo Alegre" },
                    { 4203402, 42, "Campo Belo do Sul" },
                    { 4203501, 42, "Campo Erê" },
                    { 4203600, 42, "Campos Novos" },
                    { 4203709, 42, "Canelinha" },
                    { 4203808, 42, "Canoinhas" },
                    { 4203907, 42, "Capinzal" },
                    { 4203956, 42, "Capivari de Baixo" },
                    { 4204004, 42, "Catanduvas" },
                    { 4204103, 42, "Caxambu do Sul" },
                    { 4204152, 42, "Celso Ramos" },
                    { 4204178, 42, "Cerro Negro" },
                    { 4204194, 42, "Chapadão do Lageado" },
                    { 4204202, 42, "Chapecó" },
                    { 4204251, 42, "Cocal do Sul" },
                    { 4204301, 42, "Concórdia" },
                    { 4204350, 42, "Cordilheira Alta" },
                    { 4204400, 42, "Coronel Freitas" },
                    { 4204459, 42, "Coronel Martins" },
                    { 4204509, 42, "Corupá" },
                    { 4204558, 42, "Correia Pinto" },
                    { 4204608, 42, "Criciúma" },
                    { 4204707, 42, "Cunha Porã" },
                    { 4204756, 42, "Cunhataí" },
                    { 4204806, 42, "Curitibanos" },
                    { 4204905, 42, "Descanso" },
                    { 4205001, 42, "Dionísio Cerqueira" },
                    { 4205100, 42, "Dona Emma" },
                    { 4205159, 42, "Doutor Pedrinho" },
                    { 4205175, 42, "Entre Rios" },
                    { 4205191, 42, "Ermo" },
                    { 4205209, 42, "Erval Velho" },
                    { 4205308, 42, "Faxinal dos Guedes" },
                    { 4205357, 42, "Flor do Sertão" },
                    { 4205407, 42, "Florianópolis" },
                    { 4205431, 42, "Formosa do Sul" },
                    { 4205456, 42, "Forquilhinha" },
                    { 4205506, 42, "Fraiburgo" },
                    { 4205555, 42, "Frei Rogério" },
                    { 4205605, 42, "Galvão" },
                    { 4205704, 42, "Garopaba" },
                    { 4205803, 42, "Garuva" },
                    { 4205902, 42, "Gaspar" },
                    { 4206009, 42, "Governador Celso Ramos" },
                    { 4206108, 42, "Grão Pará" },
                    { 4206207, 42, "Gravatal" },
                    { 4206306, 42, "Guabiruba" },
                    { 4206405, 42, "Guaraciaba" },
                    { 4206504, 42, "Guaramirim" },
                    { 4206603, 42, "Guarujá do Sul" },
                    { 4206652, 42, "Guatambú" },
                    { 4206702, 42, "Herval dOeste" },
                    { 4206751, 42, "Ibiam" },
                    { 4206801, 42, "Ibicaré" },
                    { 4206900, 42, "Ibirama" },
                    { 4207007, 42, "Içara" },
                    { 4207106, 42, "Ilhota" },
                    { 4207205, 42, "Imaruí" },
                    { 4207304, 42, "Imbituba" },
                    { 4207403, 42, "Imbuia" },
                    { 4207502, 42, "Indaial" },
                    { 4207577, 42, "Iomerê" },
                    { 4207601, 42, "Ipira" },
                    { 4207650, 42, "Iporã do Oeste" },
                    { 4207684, 42, "Ipuaçu" },
                    { 4207700, 42, "Ipumirim" },
                    { 4207759, 42, "Iraceminha" },
                    { 4207809, 42, "Irani" },
                    { 4207858, 42, "Irati" },
                    { 4207908, 42, "Irineópolis" },
                    { 4208005, 42, "Itá" },
                    { 4208104, 42, "Itaiópolis" },
                    { 4208203, 42, "Itajaí" },
                    { 4208302, 42, "Itapema" },
                    { 4208401, 42, "Itapiranga" },
                    { 4208450, 42, "Itapoá" },
                    { 4208500, 42, "Ituporanga" },
                    { 4208609, 42, "Jaborá" },
                    { 4208708, 42, "Jacinto Machado" },
                    { 4208807, 42, "Jaguaruna" },
                    { 4208906, 42, "Jaraguá do Sul" },
                    { 4208955, 42, "Jardinópolis" },
                    { 4209003, 42, "Joaçaba" },
                    { 4209102, 42, "Joinville" },
                    { 4209151, 42, "José Boiteux" },
                    { 4209177, 42, "Jupiá" },
                    { 4209201, 42, "Lacerdópolis" },
                    { 4209300, 42, "Lages" },
                    { 4209409, 42, "Laguna" },
                    { 4209458, 42, "Lajeado Grande" },
                    { 4209508, 42, "Laurentino" },
                    { 4209607, 42, "Lauro Muller" },
                    { 4209706, 42, "Lebon Régis" },
                    { 4209805, 42, "Leoberto Leal" },
                    { 4209854, 42, "Lindóia do Sul" },
                    { 4209904, 42, "Lontras" },
                    { 4210001, 42, "Luiz Alves" },
                    { 4210035, 42, "Luzerna" },
                    { 4210050, 42, "Macieira" },
                    { 4210100, 42, "Mafra" },
                    { 4210209, 42, "Major Gercino" },
                    { 4210308, 42, "Major Vieira" },
                    { 4210407, 42, "Maracajá" },
                    { 4210506, 42, "Maravilha" },
                    { 4210555, 42, "Marema" },
                    { 4210605, 42, "Massaranduba" },
                    { 4210704, 42, "Matos Costa" },
                    { 4210803, 42, "Meleiro" },
                    { 4210852, 42, "Mirim Doce" },
                    { 4210902, 42, "Modelo" },
                    { 4211009, 42, "Mondaí" },
                    { 4211058, 42, "Monte Carlo" },
                    { 4211108, 42, "Monte Castelo" },
                    { 4211207, 42, "Morro da Fumaça" },
                    { 4211256, 42, "Morro Grande" },
                    { 4211306, 42, "Navegantes" },
                    { 4211405, 42, "Nova Erechim" },
                    { 4211454, 42, "Nova Itaberaba" },
                    { 4211504, 42, "Nova Trento" },
                    { 4211603, 42, "Nova Veneza" },
                    { 4211652, 42, "Novo Horizonte" },
                    { 4211702, 42, "Orleans" },
                    { 4211751, 42, "Otacílio Costa" },
                    { 4211801, 42, "Ouro" },
                    { 4211850, 42, "Ouro Verde" },
                    { 4211876, 42, "Paial" },
                    { 4211892, 42, "Painel" },
                    { 4211900, 42, "Palhoça" },
                    { 4212007, 42, "Palma Sola" },
                    { 4212056, 42, "Palmeira" },
                    { 4212106, 42, "Palmitos" },
                    { 4212205, 42, "Papanduva" },
                    { 4212239, 42, "Paraíso" },
                    { 4212254, 42, "Passo de Torres" },
                    { 4212270, 42, "Passos Maia" },
                    { 4212304, 42, "Paulo Lopes" },
                    { 4212403, 42, "Pedras Grandes" },
                    { 4212502, 42, "Penha" },
                    { 4212601, 42, "Peritiba" },
                    { 4212650, 42, "Pescaria Brava" },
                    { 4212700, 42, "Petrolândia" },
                    { 4212809, 42, "Balneário Piçarras" },
                    { 4212908, 42, "Pinhalzinho" },
                    { 4213005, 42, "Pinheiro Preto" },
                    { 4213104, 42, "Piratuba" },
                    { 4213153, 42, "Planalto Alegre" },
                    { 4213203, 42, "Pomerode" },
                    { 4213302, 42, "Ponte Alta" },
                    { 4213351, 42, "Ponte Alta do Norte" },
                    { 4213401, 42, "Ponte Serrada" },
                    { 4213500, 42, "Porto Belo" },
                    { 4213609, 42, "Porto União" },
                    { 4213708, 42, "Pouso Redondo" },
                    { 4213807, 42, "Praia Grande" },
                    { 4213906, 42, "Presidente Castello Branco" },
                    { 4214003, 42, "Presidente Getúlio" },
                    { 4214102, 42, "Presidente Nereu" },
                    { 4214151, 42, "Princesa" },
                    { 4214201, 42, "Quilombo" },
                    { 4214300, 42, "Rancho Queimado" },
                    { 4214409, 42, "Rio das Antas" },
                    { 4214508, 42, "Rio do Campo" },
                    { 4214607, 42, "Rio do Oeste" },
                    { 4214706, 42, "Rio dos Cedros" },
                    { 4214805, 42, "Rio do Sul" },
                    { 4214904, 42, "Rio Fortuna" },
                    { 4215000, 42, "Rio Negrinho" },
                    { 4215059, 42, "Rio Rufino" },
                    { 4215075, 42, "Riqueza" },
                    { 4215109, 42, "Rodeio" },
                    { 4215208, 42, "Romelândia" },
                    { 4215307, 42, "Salete" },
                    { 4215356, 42, "Saltinho" },
                    { 4215406, 42, "Salto Veloso" },
                    { 4215455, 42, "Sangão" },
                    { 4215505, 42, "Santa Cecília" },
                    { 4215554, 42, "Santa Helena" },
                    { 4215604, 42, "Santa Rosa de Lima" },
                    { 4215653, 42, "Santa Rosa do Sul" },
                    { 4215679, 42, "Santa Terezinha" },
                    { 4215687, 42, "Santa Terezinha do Progresso" },
                    { 4215695, 42, "Santiago do Sul" },
                    { 4215703, 42, "Santo Amaro da Imperatriz" },
                    { 4215752, 42, "São Bernardino" },
                    { 4215802, 42, "São Bento do Sul" },
                    { 4215901, 42, "São Bonifácio" },
                    { 4216008, 42, "São Carlos" },
                    { 4216057, 42, "São Cristovão do Sul" },
                    { 4216107, 42, "São Domingos" },
                    { 4216206, 42, "São Francisco do Sul" },
                    { 4216255, 42, "São João do Oeste" },
                    { 4216305, 42, "São João Batista" },
                    { 4216354, 42, "São João do Itaperiú" },
                    { 4216404, 42, "São João do Sul" },
                    { 4216503, 42, "São Joaquim" },
                    { 4216602, 42, "São José" },
                    { 4216701, 42, "São José do Cedro" },
                    { 4216800, 42, "São José do Cerrito" },
                    { 4216909, 42, "São Lourenço do Oeste" },
                    { 4217006, 42, "São Ludgero" },
                    { 4217105, 42, "São Martinho" },
                    { 4217154, 42, "São Miguel da Boa Vista" },
                    { 4217204, 42, "São Miguel do Oeste" },
                    { 4217253, 42, "São Pedro de Alcântara" },
                    { 4217303, 42, "Saudades" },
                    { 4217402, 42, "Schroeder" },
                    { 4217501, 42, "Seara" },
                    { 4217550, 42, "Serra Alta" },
                    { 4217600, 42, "Siderópolis" },
                    { 4217709, 42, "Sombrio" },
                    { 4217758, 42, "Sul Brasil" },
                    { 4217808, 42, "Taió" },
                    { 4217907, 42, "Tangará" },
                    { 4217956, 42, "Tigrinhos" },
                    { 4218004, 42, "Tijucas" },
                    { 4218103, 42, "Timbé do Sul" },
                    { 4218202, 42, "Timbó" },
                    { 4218251, 42, "Timbó Grande" },
                    { 4218301, 42, "Três Barras" },
                    { 4218350, 42, "Treviso" },
                    { 4218400, 42, "Treze de Maio" },
                    { 4218509, 42, "Treze Tílias" },
                    { 4218608, 42, "Trombudo Central" },
                    { 4218707, 42, "Tubarão" },
                    { 4218756, 42, "Tunápolis" },
                    { 4218806, 42, "Turvo" },
                    { 4218855, 42, "União do Oeste" },
                    { 4218905, 42, "Urubici" },
                    { 4218954, 42, "Urupema" },
                    { 4219002, 42, "Urussanga" },
                    { 4219101, 42, "Vargeão" },
                    { 4219150, 42, "Vargem" },
                    { 4219176, 42, "Vargem Bonita" },
                    { 4219200, 42, "Vidal Ramos" },
                    { 4219309, 42, "Videira" },
                    { 4219358, 42, "Vitor Meireles" },
                    { 4219408, 42, "Witmarsum" },
                    { 4219507, 42, "Xanxerê" },
                    { 4219606, 42, "Xavantina" },
                    { 4219705, 42, "Xaxim" },
                    { 4219853, 42, "Zortéa" },
                    { 4220000, 42, "Balneário Rincão" },
                    { 4300034, 43, "Aceguá" },
                    { 4300059, 43, "Água Santa" },
                    { 4300109, 43, "Agudo" },
                    { 4300208, 43, "Ajuricaba" },
                    { 4300307, 43, "Alecrim" },
                    { 4300406, 43, "Alegrete" },
                    { 4300455, 43, "Alegria" },
                    { 4300471, 43, "Almirante Tamandaré do Sul" },
                    { 4300505, 43, "Alpestre" },
                    { 4300554, 43, "Alto Alegre" },
                    { 4300570, 43, "Alto Feliz" },
                    { 4300604, 43, "Alvorada" },
                    { 4300638, 43, "Amaral Ferrador" },
                    { 4300646, 43, "Ametista do Sul" },
                    { 4300661, 43, "André da Rocha" },
                    { 4300703, 43, "Anta Gorda" },
                    { 4300802, 43, "Antônio Prado" },
                    { 4300851, 43, "Arambaré" },
                    { 4300877, 43, "Araricá" },
                    { 4300901, 43, "Aratiba" },
                    { 4301008, 43, "Arroio do Meio" },
                    { 4301057, 43, "Arroio do Sal" },
                    { 4301073, 43, "Arroio do Padre" },
                    { 4301107, 43, "Arroio dos Ratos" },
                    { 4301206, 43, "Arroio do Tigre" },
                    { 4301305, 43, "Arroio Grande" },
                    { 4301404, 43, "Arvorezinha" },
                    { 4301503, 43, "Augusto Pestana" },
                    { 4301552, 43, "Áurea" },
                    { 4301602, 43, "Bagé" },
                    { 4301636, 43, "Balneário Pinhal" },
                    { 4301651, 43, "Barão" },
                    { 4301701, 43, "Barão de Cotegipe" },
                    { 4301750, 43, "Barão do Triunfo" },
                    { 4301800, 43, "Barracão" },
                    { 4301859, 43, "Barra do Guarita" },
                    { 4301875, 43, "Barra do Quaraí" },
                    { 4301909, 43, "Barra do Ribeiro" },
                    { 4301925, 43, "Barra do Rio Azul" },
                    { 4301958, 43, "Barra Funda" },
                    { 4302006, 43, "Barros Cassal" },
                    { 4302055, 43, "Benjamin Constant do Sul" },
                    { 4302105, 43, "Bento Gonçalves" },
                    { 4302154, 43, "Boa Vista das Missões" },
                    { 4302204, 43, "Boa Vista do Buricá" },
                    { 4302220, 43, "Boa Vista do Cadeado" },
                    { 4302238, 43, "Boa Vista do Incra" },
                    { 4302253, 43, "Boa Vista do Sul" },
                    { 4302303, 43, "Bom Jesus" },
                    { 4302352, 43, "Bom Princípio" },
                    { 4302378, 43, "Bom Progresso" },
                    { 4302402, 43, "Bom Retiro do Sul" },
                    { 4302451, 43, "Boqueirão do Leão" },
                    { 4302501, 43, "Bossoroca" },
                    { 4302584, 43, "Bozano" },
                    { 4302600, 43, "Braga" },
                    { 4302659, 43, "Brochier" },
                    { 4302709, 43, "Butiá" },
                    { 4302808, 43, "Caçapava do Sul" },
                    { 4302907, 43, "Cacequi" },
                    { 4303004, 43, "Cachoeira do Sul" },
                    { 4303103, 43, "Cachoeirinha" },
                    { 4303202, 43, "Cacique Doble" },
                    { 4303301, 43, "Caibaté" },
                    { 4303400, 43, "Caiçara" },
                    { 4303509, 43, "Camaquã" },
                    { 4303558, 43, "Camargo" },
                    { 4303608, 43, "Cambará do Sul" },
                    { 4303673, 43, "Campestre da Serra" },
                    { 4303707, 43, "Campina das Missões" },
                    { 4303806, 43, "Campinas do Sul" },
                    { 4303905, 43, "Campo Bom" },
                    { 4304002, 43, "Campo Novo" },
                    { 4304101, 43, "Campos Borges" },
                    { 4304200, 43, "Candelária" },
                    { 4304309, 43, "Cândido Godói" },
                    { 4304358, 43, "Candiota" },
                    { 4304408, 43, "Canela" },
                    { 4304507, 43, "Canguçu" },
                    { 4304606, 43, "Canoas" },
                    { 4304614, 43, "Canudos do Vale" },
                    { 4304622, 43, "Capão Bonito do Sul" },
                    { 4304630, 43, "Capão da Canoa" },
                    { 4304655, 43, "Capão do Cipó" },
                    { 4304663, 43, "Capão do Leão" },
                    { 4304671, 43, "Capivari do Sul" },
                    { 4304689, 43, "Capela de Santana" },
                    { 4304697, 43, "Capitão" },
                    { 4304705, 43, "Carazinho" },
                    { 4304713, 43, "Caraá" },
                    { 4304804, 43, "Carlos Barbosa" },
                    { 4304853, 43, "Carlos Gomes" },
                    { 4304903, 43, "Casca" },
                    { 4304952, 43, "Caseiros" },
                    { 4305009, 43, "Catuípe" },
                    { 4305108, 43, "Caxias do Sul" },
                    { 4305116, 43, "Centenário" },
                    { 4305124, 43, "Cerrito" },
                    { 4305132, 43, "Cerro Branco" },
                    { 4305157, 43, "Cerro Grande" },
                    { 4305173, 43, "Cerro Grande do Sul" },
                    { 4305207, 43, "Cerro Largo" },
                    { 4305306, 43, "Chapada" },
                    { 4305355, 43, "Charqueadas" },
                    { 4305371, 43, "Charrua" },
                    { 4305405, 43, "Chiapetta" },
                    { 4305439, 43, "Chuí" },
                    { 4305447, 43, "Chuvisca" },
                    { 4305454, 43, "Cidreira" },
                    { 4305504, 43, "Ciríaco" },
                    { 4305587, 43, "Colinas" },
                    { 4305603, 43, "Colorado" },
                    { 4305702, 43, "Condor" },
                    { 4305801, 43, "Constantina" },
                    { 4305835, 43, "Coqueiro Baixo" },
                    { 4305850, 43, "Coqueiros do Sul" },
                    { 4305871, 43, "Coronel Barros" },
                    { 4305900, 43, "Coronel Bicaco" },
                    { 4305934, 43, "Coronel Pilar" },
                    { 4305959, 43, "Cotiporã" },
                    { 4305975, 43, "Coxilha" },
                    { 4306007, 43, "Crissiumal" },
                    { 4306056, 43, "Cristal" },
                    { 4306072, 43, "Cristal do Sul" },
                    { 4306106, 43, "Cruz Alta" },
                    { 4306130, 43, "Cruzaltense" },
                    { 4306205, 43, "Cruzeiro do Sul" },
                    { 4306304, 43, "David Canabarro" },
                    { 4306320, 43, "Derrubadas" },
                    { 4306353, 43, "Dezesseis de Novembro" },
                    { 4306379, 43, "Dilermando de Aguiar" },
                    { 4306403, 43, "Dois Irmãos" },
                    { 4306429, 43, "Dois Irmãos das Missões" },
                    { 4306452, 43, "Dois Lajeados" },
                    { 4306502, 43, "Dom Feliciano" },
                    { 4306551, 43, "Dom Pedro de Alcântara" },
                    { 4306601, 43, "Dom Pedrito" },
                    { 4306700, 43, "Dona Francisca" },
                    { 4306734, 43, "Doutor Maurício Cardoso" },
                    { 4306759, 43, "Doutor Ricardo" },
                    { 4306767, 43, "Eldorado do Sul" },
                    { 4306809, 43, "Encantado" },
                    { 4306908, 43, "Encruzilhada do Sul" },
                    { 4306924, 43, "Engenho Velho" },
                    { 4306932, 43, "Entre-Ijuís" },
                    { 4306957, 43, "Entre Rios do Sul" },
                    { 4306973, 43, "Erebango" },
                    { 4307005, 43, "Erechim" },
                    { 4307054, 43, "Ernestina" },
                    { 4307104, 43, "Herval" },
                    { 4307203, 43, "Erval Grande" },
                    { 4307302, 43, "Erval Seco" },
                    { 4307401, 43, "Esmeralda" },
                    { 4307450, 43, "Esperança do Sul" },
                    { 4307500, 43, "Espumoso" },
                    { 4307559, 43, "Estação" },
                    { 4307609, 43, "Estância Velha" },
                    { 4307708, 43, "Esteio" },
                    { 4307807, 43, "Estrela" },
                    { 4307815, 43, "Estrela Velha" },
                    { 4307831, 43, "Eugênio de Castro" },
                    { 4307864, 43, "Fagundes Varela" },
                    { 4307906, 43, "Farroupilha" },
                    { 4308003, 43, "Faxinal do Soturno" },
                    { 4308052, 43, "Faxinalzinho" },
                    { 4308078, 43, "Fazenda Vilanova" },
                    { 4308102, 43, "Feliz" },
                    { 4308201, 43, "Flores da Cunha" },
                    { 4308250, 43, "Floriano Peixoto" },
                    { 4308300, 43, "Fontoura Xavier" },
                    { 4308409, 43, "Formigueiro" },
                    { 4308433, 43, "Forquetinha" },
                    { 4308458, 43, "Fortaleza dos Valos" },
                    { 4308508, 43, "Frederico Westphalen" },
                    { 4308607, 43, "Garibaldi" },
                    { 4308656, 43, "Garruchos" },
                    { 4308706, 43, "Gaurama" },
                    { 4308805, 43, "General Câmara" },
                    { 4308854, 43, "Gentil" },
                    { 4308904, 43, "Getúlio Vargas" },
                    { 4309001, 43, "Giruá" },
                    { 4309050, 43, "Glorinha" },
                    { 4309100, 43, "Gramado" },
                    { 4309126, 43, "Gramado dos Loureiros" },
                    { 4309159, 43, "Gramado Xavier" },
                    { 4309209, 43, "Gravataí" },
                    { 4309258, 43, "Guabiju" },
                    { 4309308, 43, "Guaíba" },
                    { 4309407, 43, "Guaporé" },
                    { 4309506, 43, "Guarani das Missões" },
                    { 4309555, 43, "Harmonia" },
                    { 4309571, 43, "Herveiras" },
                    { 4309605, 43, "Horizontina" },
                    { 4309654, 43, "Hulha Negra" },
                    { 4309704, 43, "Humaitá" },
                    { 4309753, 43, "Ibarama" },
                    { 4309803, 43, "Ibiaçá" },
                    { 4309902, 43, "Ibiraiaras" },
                    { 4309951, 43, "Ibirapuitã" },
                    { 4310009, 43, "Ibirubá" },
                    { 4310108, 43, "Igrejinha" },
                    { 4310207, 43, "Ijuí" },
                    { 4310306, 43, "Ilópolis" },
                    { 4310330, 43, "Imbé" },
                    { 4310363, 43, "Imigrante" },
                    { 4310405, 43, "Independência" },
                    { 4310413, 43, "Inhacorá" },
                    { 4310439, 43, "Ipê" },
                    { 4310462, 43, "Ipiranga do Sul" },
                    { 4310504, 43, "Iraí" },
                    { 4310538, 43, "Itaara" },
                    { 4310553, 43, "Itacurubi" },
                    { 4310579, 43, "Itapuca" },
                    { 4310603, 43, "Itaqui" },
                    { 4310652, 43, "Itati" },
                    { 4310702, 43, "Itatiba do Sul" },
                    { 4310751, 43, "Ivorá" },
                    { 4310801, 43, "Ivoti" },
                    { 4310850, 43, "Jaboticaba" },
                    { 4310876, 43, "Jacuizinho" },
                    { 4310900, 43, "Jacutinga" },
                    { 4311007, 43, "Jaguarão" },
                    { 4311106, 43, "Jaguari" },
                    { 4311122, 43, "Jaquirana" },
                    { 4311130, 43, "Jari" },
                    { 4311155, 43, "Jóia" },
                    { 4311205, 43, "Júlio de Castilhos" },
                    { 4311239, 43, "Lagoa Bonita do Sul" },
                    { 4311254, 43, "Lagoão" },
                    { 4311270, 43, "Lagoa dos Três Cantos" },
                    { 4311304, 43, "Lagoa Vermelha" },
                    { 4311403, 43, "Lajeado" },
                    { 4311429, 43, "Lajeado do Bugre" },
                    { 4311502, 43, "Lavras do Sul" },
                    { 4311601, 43, "Liberato Salzano" },
                    { 4311627, 43, "Lindolfo Collor" },
                    { 4311643, 43, "Linha Nova" },
                    { 4311700, 43, "Machadinho" },
                    { 4311718, 43, "Maçambara" },
                    { 4311734, 43, "Mampituba" },
                    { 4311759, 43, "Manoel Viana" },
                    { 4311775, 43, "Maquiné" },
                    { 4311791, 43, "Maratá" },
                    { 4311809, 43, "Marau" },
                    { 4311908, 43, "Marcelino Ramos" },
                    { 4311981, 43, "Mariana Pimentel" },
                    { 4312005, 43, "Mariano Moro" },
                    { 4312054, 43, "Marques de Souza" },
                    { 4312104, 43, "Mata" },
                    { 4312138, 43, "Mato Castelhano" },
                    { 4312153, 43, "Mato Leitão" },
                    { 4312179, 43, "Mato Queimado" },
                    { 4312203, 43, "Maximiliano de Almeida" },
                    { 4312252, 43, "Minas do Leão" },
                    { 4312302, 43, "Miraguaí" },
                    { 4312351, 43, "Montauri" },
                    { 4312377, 43, "Monte Alegre dos Campos" },
                    { 4312385, 43, "Monte Belo do Sul" },
                    { 4312401, 43, "Montenegro" },
                    { 4312427, 43, "Mormaço" },
                    { 4312443, 43, "Morrinhos do Sul" },
                    { 4312450, 43, "Morro Redondo" },
                    { 4312476, 43, "Morro Reuter" },
                    { 4312500, 43, "Mostardas" },
                    { 4312609, 43, "Muçum" },
                    { 4312617, 43, "Muitos Capões" },
                    { 4312625, 43, "Muliterno" },
                    { 4312658, 43, "Não-Me-Toque" },
                    { 4312674, 43, "Nicolau Vergueiro" },
                    { 4312708, 43, "Nonoai" },
                    { 4312757, 43, "Nova Alvorada" },
                    { 4312807, 43, "Nova Araçá" },
                    { 4312906, 43, "Nova Bassano" },
                    { 4312955, 43, "Nova Boa Vista" },
                    { 4313003, 43, "Nova Bréscia" },
                    { 4313011, 43, "Nova Candelária" },
                    { 4313037, 43, "Nova Esperança do Sul" },
                    { 4313060, 43, "Nova Hartz" },
                    { 4313086, 43, "Nova Pádua" },
                    { 4313102, 43, "Nova Palma" },
                    { 4313201, 43, "Nova Petrópolis" },
                    { 4313300, 43, "Nova Prata" },
                    { 4313334, 43, "Nova Ramada" },
                    { 4313359, 43, "Nova Roma do Sul" },
                    { 4313375, 43, "Nova Santa Rita" },
                    { 4313391, 43, "Novo Cabrais" },
                    { 4313409, 43, "Novo Hamburgo" },
                    { 4313425, 43, "Novo Machado" },
                    { 4313441, 43, "Novo Tiradentes" },
                    { 4313466, 43, "Novo Xingu" },
                    { 4313490, 43, "Novo Barreiro" },
                    { 4313508, 43, "Osório" },
                    { 4313607, 43, "Paim Filho" },
                    { 4313656, 43, "Palmares do Sul" },
                    { 4313706, 43, "Palmeira das Missões" },
                    { 4313805, 43, "Palmitinho" },
                    { 4313904, 43, "Panambi" },
                    { 4313953, 43, "Pantano Grande" },
                    { 4314001, 43, "Paraí" },
                    { 4314027, 43, "Paraíso do Sul" },
                    { 4314035, 43, "Pareci Novo" },
                    { 4314050, 43, "Parobé" },
                    { 4314068, 43, "Passa Sete" },
                    { 4314076, 43, "Passo do Sobrado" },
                    { 4314100, 43, "Passo Fundo" },
                    { 4314134, 43, "Paulo Bento" },
                    { 4314159, 43, "Paverama" },
                    { 4314175, 43, "Pedras Altas" },
                    { 4314209, 43, "Pedro Osório" },
                    { 4314308, 43, "Pejuçara" },
                    { 4314407, 43, "Pelotas" },
                    { 4314423, 43, "Picada Café" },
                    { 4314456, 43, "Pinhal" },
                    { 4314464, 43, "Pinhal da Serra" },
                    { 4314472, 43, "Pinhal Grande" },
                    { 4314498, 43, "Pinheirinho do Vale" },
                    { 4314506, 43, "Pinheiro Machado" },
                    { 4314548, 43, "Pinto Bandeira" },
                    { 4314555, 43, "Pirapó" },
                    { 4314605, 43, "Piratini" },
                    { 4314704, 43, "Planalto" },
                    { 4314753, 43, "Poço das Antas" },
                    { 4314779, 43, "Pontão" },
                    { 4314787, 43, "Ponte Preta" },
                    { 4314803, 43, "Portão" },
                    { 4314902, 43, "Porto Alegre" },
                    { 4315008, 43, "Porto Lucena" },
                    { 4315057, 43, "Porto Mauá" },
                    { 4315073, 43, "Porto Vera Cruz" },
                    { 4315107, 43, "Porto Xavier" },
                    { 4315131, 43, "Pouso Novo" },
                    { 4315149, 43, "Presidente Lucena" },
                    { 4315156, 43, "Progresso" },
                    { 4315172, 43, "Protásio Alves" },
                    { 4315206, 43, "Putinga" },
                    { 4315305, 43, "Quaraí" },
                    { 4315313, 43, "Quatro Irmãos" },
                    { 4315321, 43, "Quevedos" },
                    { 4315354, 43, "Quinze de Novembro" },
                    { 4315404, 43, "Redentora" },
                    { 4315453, 43, "Relvado" },
                    { 4315503, 43, "Restinga Seca" },
                    { 4315552, 43, "Rio dos Índios" },
                    { 4315602, 43, "Rio Grande" },
                    { 4315701, 43, "Rio Pardo" },
                    { 4315750, 43, "Riozinho" },
                    { 4315800, 43, "Roca Sales" },
                    { 4315909, 43, "Rodeio Bonito" },
                    { 4315958, 43, "Rolador" },
                    { 4316006, 43, "Rolante" },
                    { 4316105, 43, "Ronda Alta" },
                    { 4316204, 43, "Rondinha" },
                    { 4316303, 43, "Roque Gonzales" },
                    { 4316402, 43, "Rosário do Sul" },
                    { 4316428, 43, "Sagrada Família" },
                    { 4316436, 43, "Saldanha Marinho" },
                    { 4316451, 43, "Salto do Jacuí" },
                    { 4316477, 43, "Salvador das Missões" },
                    { 4316501, 43, "Salvador do Sul" },
                    { 4316600, 43, "Sananduva" },
                    { 4316709, 43, "Santa Bárbara do Sul" },
                    { 4316733, 43, "Santa Cecília do Sul" },
                    { 4316758, 43, "Santa Clara do Sul" },
                    { 4316808, 43, "Santa Cruz do Sul" },
                    { 4316907, 43, "Santa Maria" },
                    { 4316956, 43, "Santa Maria do Herval" },
                    { 4316972, 43, "Santa Margarida do Sul" },
                    { 4317004, 43, "Santana da Boa Vista" },
                    { 4317103, 43, "Santana do Livramento" },
                    { 4317202, 43, "Santa Rosa" },
                    { 4317251, 43, "Santa Tereza" },
                    { 4317301, 43, "Santa Vitória do Palmar" },
                    { 4317400, 43, "Santiago" },
                    { 4317509, 43, "Santo Ângelo" },
                    { 4317558, 43, "Santo Antônio do Palma" },
                    { 4317608, 43, "Santo Antônio da Patrulha" },
                    { 4317707, 43, "Santo Antônio das Missões" },
                    { 4317756, 43, "Santo Antônio do Planalto" },
                    { 4317806, 43, "Santo Augusto" },
                    { 4317905, 43, "Santo Cristo" },
                    { 4317954, 43, "Santo Expedito do Sul" },
                    { 4318002, 43, "São Borja" },
                    { 4318051, 43, "São Domingos do Sul" },
                    { 4318101, 43, "São Francisco de Assis" },
                    { 4318200, 43, "São Francisco de Paula" },
                    { 4318309, 43, "São Gabriel" },
                    { 4318408, 43, "São Jerônimo" },
                    { 4318424, 43, "São João da Urtiga" },
                    { 4318432, 43, "São João do Polêsine" },
                    { 4318440, 43, "São Jorge" },
                    { 4318457, 43, "São José das Missões" },
                    { 4318465, 43, "São José do Herval" },
                    { 4318481, 43, "São José do Hortêncio" },
                    { 4318499, 43, "São José do Inhacorá" },
                    { 4318507, 43, "São José do Norte" },
                    { 4318606, 43, "São José do Ouro" },
                    { 4318614, 43, "São José do Sul" },
                    { 4318622, 43, "São José dos Ausentes" },
                    { 4318705, 43, "São Leopoldo" },
                    { 4318804, 43, "São Lourenço do Sul" },
                    { 4318903, 43, "São Luiz Gonzaga" },
                    { 4319000, 43, "São Marcos" },
                    { 4319109, 43, "São Martinho" },
                    { 4319125, 43, "São Martinho da Serra" },
                    { 4319158, 43, "São Miguel das Missões" },
                    { 4319208, 43, "São Nicolau" },
                    { 4319307, 43, "São Paulo das Missões" },
                    { 4319356, 43, "São Pedro da Serra" },
                    { 4319364, 43, "São Pedro das Missões" },
                    { 4319372, 43, "São Pedro do Butiá" },
                    { 4319406, 43, "São Pedro do Sul" },
                    { 4319505, 43, "São Sebastião do Caí" },
                    { 4319604, 43, "São Sepé" },
                    { 4319703, 43, "São Valentim" },
                    { 4319711, 43, "São Valentim do Sul" },
                    { 4319737, 43, "São Valério do Sul" },
                    { 4319752, 43, "São Vendelino" },
                    { 4319802, 43, "São Vicente do Sul" },
                    { 4319901, 43, "Sapiranga" },
                    { 4320008, 43, "Sapucaia do Sul" },
                    { 4320107, 43, "Sarandi" },
                    { 4320206, 43, "Seberi" },
                    { 4320230, 43, "Sede Nova" },
                    { 4320263, 43, "Segredo" },
                    { 4320305, 43, "Selbach" },
                    { 4320321, 43, "Senador Salgado Filho" },
                    { 4320354, 43, "Sentinela do Sul" },
                    { 4320404, 43, "Serafina Corrêa" },
                    { 4320453, 43, "Sério" },
                    { 4320503, 43, "Sertão" },
                    { 4320552, 43, "Sertão Santana" },
                    { 4320578, 43, "Sete de Setembro" },
                    { 4320602, 43, "Severiano de Almeida" },
                    { 4320651, 43, "Silveira Martins" },
                    { 4320677, 43, "Sinimbu" },
                    { 4320701, 43, "Sobradinho" },
                    { 4320800, 43, "Soledade" },
                    { 4320859, 43, "Tabaí" },
                    { 4320909, 43, "Tapejara" },
                    { 4321006, 43, "Tapera" },
                    { 4321105, 43, "Tapes" },
                    { 4321204, 43, "Taquara" },
                    { 4321303, 43, "Taquari" },
                    { 4321329, 43, "Taquaruçu do Sul" },
                    { 4321352, 43, "Tavares" },
                    { 4321402, 43, "Tenente Portela" },
                    { 4321436, 43, "Terra de Areia" },
                    { 4321451, 43, "Teutônia" },
                    { 4321469, 43, "Tio Hugo" },
                    { 4321477, 43, "Tiradentes do Sul" },
                    { 4321493, 43, "Toropi" },
                    { 4321501, 43, "Torres" },
                    { 4321600, 43, "Tramandaí" },
                    { 4321626, 43, "Travesseiro" },
                    { 4321634, 43, "Três Arroios" },
                    { 4321667, 43, "Três Cachoeiras" },
                    { 4321709, 43, "Três Coroas" },
                    { 4321808, 43, "Três de Maio" },
                    { 4321832, 43, "Três Forquilhas" },
                    { 4321857, 43, "Três Palmeiras" },
                    { 4321907, 43, "Três Passos" },
                    { 4321956, 43, "Trindade do Sul" },
                    { 4322004, 43, "Triunfo" },
                    { 4322103, 43, "Tucunduva" },
                    { 4322152, 43, "Tunas" },
                    { 4322186, 43, "Tupanci do Sul" },
                    { 4322202, 43, "Tupanciretã" },
                    { 4322251, 43, "Tupandi" },
                    { 4322301, 43, "Tuparendi" },
                    { 4322327, 43, "Turuçu" },
                    { 4322343, 43, "Ubiretama" },
                    { 4322350, 43, "União da Serra" },
                    { 4322376, 43, "Unistalda" },
                    { 4322400, 43, "Uruguaiana" },
                    { 4322509, 43, "Vacaria" },
                    { 4322525, 43, "Vale Verde" },
                    { 4322533, 43, "Vale do Sol" },
                    { 4322541, 43, "Vale Real" },
                    { 4322558, 43, "Vanini" },
                    { 4322608, 43, "Venâncio Aires" },
                    { 4322707, 43, "Vera Cruz" },
                    { 4322806, 43, "Veranópolis" },
                    { 4322855, 43, "Vespasiano Correa" },
                    { 4322905, 43, "Viadutos" },
                    { 4323002, 43, "Viamão" },
                    { 4323101, 43, "Vicente Dutra" },
                    { 4323200, 43, "Victor Graeff" },
                    { 4323309, 43, "Vila Flores" },
                    { 4323358, 43, "Vila Lângaro" },
                    { 4323408, 43, "Vila Maria" },
                    { 4323457, 43, "Vila Nova do Sul" },
                    { 4323507, 43, "Vista Alegre" },
                    { 4323606, 43, "Vista Alegre do Prata" },
                    { 4323705, 43, "Vista Gaúcha" },
                    { 4323754, 43, "Vitória das Missões" },
                    { 4323770, 43, "Westfalia" },
                    { 4323804, 43, "Xangri-lá" },
                    { 5000203, 50, "Água Clara" },
                    { 5000252, 50, "Alcinópolis" },
                    { 5000609, 50, "Amambaí" },
                    { 5000708, 50, "Anastácio" },
                    { 5000807, 50, "Anaurilândia" },
                    { 5000856, 50, "Angélica" },
                    { 5000906, 50, "Antônio João" },
                    { 5001003, 50, "Aparecida do Taboado" },
                    { 5001102, 50, "Aquidauana" },
                    { 5001243, 50, "Aral Moreira" },
                    { 5001508, 50, "Bandeirantes" },
                    { 5001904, 50, "Bataguassu" },
                    { 5002001, 50, "Batayporã" },
                    { 5002100, 50, "Bela Vista" },
                    { 5002159, 50, "Bodoquena" },
                    { 5002209, 50, "Bonito" },
                    { 5002308, 50, "Brasilândia" },
                    { 5002407, 50, "Caarapó" },
                    { 5002605, 50, "Camapuã" },
                    { 5002704, 50, "Campo Grande" },
                    { 5002803, 50, "Caracol" },
                    { 5002902, 50, "Cassilândia" },
                    { 5002951, 50, "Chapadão do Sul" },
                    { 5003108, 50, "Corguinho" },
                    { 5003157, 50, "Coronel Sapucaia" },
                    { 5003207, 50, "Corumbá" },
                    { 5003256, 50, "Costa Rica" },
                    { 5003306, 50, "Coxim" },
                    { 5003454, 50, "Deodápolis" },
                    { 5003488, 50, "Dois Irmãos do Buriti" },
                    { 5003504, 50, "Douradina" },
                    { 5003702, 50, "Dourados" },
                    { 5003751, 50, "Eldorado" },
                    { 5003801, 50, "Fátima do Sul" },
                    { 5003900, 50, "Figueirão" },
                    { 5004007, 50, "Glória de Dourados" },
                    { 5004106, 50, "Guia Lopes da Laguna" },
                    { 5004304, 50, "Iguatemi" },
                    { 5004403, 50, "Inocência" },
                    { 5004502, 50, "Itaporã" },
                    { 5004601, 50, "Itaquiraí" },
                    { 5004700, 50, "Ivinhema" },
                    { 5004809, 50, "Japorã" },
                    { 5004908, 50, "Jaraguari" },
                    { 5005004, 50, "Jardim" },
                    { 5005103, 50, "Jateí" },
                    { 5005152, 50, "Juti" },
                    { 5005202, 50, "Ladário" },
                    { 5005251, 50, "Laguna Carapã" },
                    { 5005400, 50, "Maracaju" },
                    { 5005608, 50, "Miranda" },
                    { 5005681, 50, "Mundo Novo" },
                    { 5005707, 50, "Naviraí" },
                    { 5005806, 50, "Nioaque" },
                    { 5006002, 50, "Nova Alvorada do Sul" },
                    { 5006200, 50, "Nova Andradina" },
                    { 5006259, 50, "Novo Horizonte do Sul" },
                    { 5006275, 50, "Paraíso das Águas" },
                    { 5006309, 50, "Paranaíba" },
                    { 5006358, 50, "Paranhos" },
                    { 5006408, 50, "Pedro Gomes" },
                    { 5006606, 50, "Ponta Porã" },
                    { 5006903, 50, "Porto Murtinho" },
                    { 5007109, 50, "Ribas do Rio Pardo" },
                    { 5007208, 50, "Rio Brilhante" },
                    { 5007307, 50, "Rio Negro" },
                    { 5007406, 50, "Rio Verde de Mato Grosso" },
                    { 5007505, 50, "Rochedo" },
                    { 5007554, 50, "Santa Rita do Pardo" },
                    { 5007695, 50, "São Gabriel do Oeste" },
                    { 5007703, 50, "Sete Quedas" },
                    { 5007802, 50, "Selvíria" },
                    { 5007901, 50, "Sidrolândia" },
                    { 5007935, 50, "Sonora" },
                    { 5007950, 50, "Tacuru" },
                    { 5007976, 50, "Taquarussu" },
                    { 5008008, 50, "Terenos" },
                    { 5008305, 50, "Três Lagoas" },
                    { 5008404, 50, "Vicentina" },
                    { 5100102, 51, "Acorizal" },
                    { 5100201, 51, "Água Boa" },
                    { 5100250, 51, "Alta Floresta" },
                    { 5100300, 51, "Alto Araguaia" },
                    { 5100359, 51, "Alto Boa Vista" },
                    { 5100409, 51, "Alto Garças" },
                    { 5100508, 51, "Alto Paraguai" },
                    { 5100607, 51, "Alto Taquari" },
                    { 5100805, 51, "Apiacás" },
                    { 5101001, 51, "Araguaiana" },
                    { 5101209, 51, "Araguainha" },
                    { 5101258, 51, "Araputanga" },
                    { 5101308, 51, "Arenápolis" },
                    { 5101407, 51, "Aripuanã" },
                    { 5101605, 51, "Barão de Melgaço" },
                    { 5101704, 51, "Barra do Bugres" },
                    { 5101803, 51, "Barra do Garças" },
                    { 5101852, 51, "Bom Jesus do Araguaia" },
                    { 5101902, 51, "Brasnorte" },
                    { 5102504, 51, "Cáceres" },
                    { 5102603, 51, "Campinápolis" },
                    { 5102637, 51, "Campo Novo do Parecis" },
                    { 5102678, 51, "Campo Verde" },
                    { 5102686, 51, "Campos de Júlio" },
                    { 5102694, 51, "Canabrava do Norte" },
                    { 5102702, 51, "Canarana" },
                    { 5102793, 51, "Carlinda" },
                    { 5102850, 51, "Castanheira" },
                    { 5103007, 51, "Chapada dos Guimarães" },
                    { 5103056, 51, "Cláudia" },
                    { 5103106, 51, "Cocalinho" },
                    { 5103205, 51, "Colíder" },
                    { 5103254, 51, "Colniza" },
                    { 5103304, 51, "Comodoro" },
                    { 5103353, 51, "Confresa" },
                    { 5103361, 51, "Conquista DOeste" },
                    { 5103379, 51, "Cotriguaçu" },
                    { 5103403, 51, "Cuiabá" },
                    { 5103437, 51, "Curvelândia" },
                    { 5103452, 51, "Denise" },
                    { 5103502, 51, "Diamantino" },
                    { 5103601, 51, "Dom Aquino" },
                    { 5103700, 51, "Feliz Natal" },
                    { 5103809, 51, "Figueirópolis DOeste" },
                    { 5103858, 51, "Gaúcha do Norte" },
                    { 5103908, 51, "General Carneiro" },
                    { 5103957, 51, "Glória DOeste" },
                    { 5104104, 51, "Guarantã do Norte" },
                    { 5104203, 51, "Guiratinga" },
                    { 5104500, 51, "Indiavaí" },
                    { 5104526, 51, "Ipiranga do Norte" },
                    { 5104542, 51, "Itanhangá" },
                    { 5104559, 51, "Itaúba" },
                    { 5104609, 51, "Itiquira" },
                    { 5104807, 51, "Jaciara" },
                    { 5104906, 51, "Jangada" },
                    { 5105002, 51, "Jauru" },
                    { 5105101, 51, "Juara" },
                    { 5105150, 51, "Juína" },
                    { 5105176, 51, "Juruena" },
                    { 5105200, 51, "Juscimeira" },
                    { 5105234, 51, "Lambari DOeste" },
                    { 5105259, 51, "Lucas do Rio Verde" },
                    { 5105309, 51, "Luciára" },
                    { 5105507, 51, "Vila Bela da Santíssima Trindade" },
                    { 5105580, 51, "Marcelândia" },
                    { 5105606, 51, "Matupá" },
                    { 5105622, 51, "Mirassol dOeste" },
                    { 5105903, 51, "Nobres" },
                    { 5106000, 51, "Nortelândia" },
                    { 5106109, 51, "Nossa Senhora do Livramento" },
                    { 5106158, 51, "Nova Bandeirantes" },
                    { 5106174, 51, "Nova Nazaré" },
                    { 5106182, 51, "Nova Lacerda" },
                    { 5106190, 51, "Nova Santa Helena" },
                    { 5106208, 51, "Nova Brasilândia" },
                    { 5106216, 51, "Nova Canaã do Norte" },
                    { 5106224, 51, "Nova Mutum" },
                    { 5106232, 51, "Nova Olímpia" },
                    { 5106240, 51, "Nova Ubiratã" },
                    { 5106257, 51, "Nova Xavantina" },
                    { 5106265, 51, "Novo Mundo" },
                    { 5106273, 51, "Novo Horizonte do Norte" },
                    { 5106281, 51, "Novo São Joaquim" },
                    { 5106299, 51, "Paranaíta" },
                    { 5106307, 51, "Paranatinga" },
                    { 5106315, 51, "Novo Santo Antônio" },
                    { 5106372, 51, "Pedra Preta" },
                    { 5106422, 51, "Peixoto de Azevedo" },
                    { 5106455, 51, "Planalto da Serra" },
                    { 5106505, 51, "Poconé" },
                    { 5106653, 51, "Pontal do Araguaia" },
                    { 5106703, 51, "Ponte Branca" },
                    { 5106752, 51, "Pontes e Lacerda" },
                    { 5106778, 51, "Porto Alegre do Norte" },
                    { 5106802, 51, "Porto dos Gaúchos" },
                    { 5106828, 51, "Porto Esperidião" },
                    { 5106851, 51, "Porto Estrela" },
                    { 5107008, 51, "Poxoréo" },
                    { 5107040, 51, "Primavera do Leste" },
                    { 5107065, 51, "Querência" },
                    { 5107107, 51, "São José dos Quatro Marcos" },
                    { 5107156, 51, "Reserva do Cabaçal" },
                    { 5107180, 51, "Ribeirão Cascalheira" },
                    { 5107198, 51, "Ribeirãozinho" },
                    { 5107206, 51, "Rio Branco" },
                    { 5107248, 51, "Santa Carmem" },
                    { 5107263, 51, "Santo Afonso" },
                    { 5107297, 51, "São José do Povo" },
                    { 5107305, 51, "São José do Rio Claro" },
                    { 5107354, 51, "São José do Xingu" },
                    { 5107404, 51, "São Pedro da Cipa" },
                    { 5107578, 51, "Rondolândia" },
                    { 5107602, 51, "Rondonópolis" },
                    { 5107701, 51, "Rosário Oeste" },
                    { 5107743, 51, "Santa Cruz do Xingu" },
                    { 5107750, 51, "Salto do Céu" },
                    { 5107768, 51, "Santa Rita do Trivelato" },
                    { 5107776, 51, "Santa Terezinha" },
                    { 5107792, 51, "Santo Antônio do Leste" },
                    { 5107800, 51, "Santo Antônio do Leverger" },
                    { 5107859, 51, "São Félix do Araguaia" },
                    { 5107875, 51, "Sapezal" },
                    { 5107883, 51, "Serra Nova Dourada" },
                    { 5107909, 51, "Sinop" },
                    { 5107925, 51, "Sorriso" },
                    { 5107941, 51, "Tabaporã" },
                    { 5107958, 51, "Tangará da Serra" },
                    { 5108006, 51, "Tapurah" },
                    { 5108055, 51, "Terra Nova do Norte" },
                    { 5108105, 51, "Tesouro" },
                    { 5108204, 51, "Torixoréu" },
                    { 5108303, 51, "União do Sul" },
                    { 5108352, 51, "Vale de São Domingos" },
                    { 5108402, 51, "Várzea Grande" },
                    { 5108501, 51, "Vera" },
                    { 5108600, 51, "Vila Rica" },
                    { 5108808, 51, "Nova Guarita" },
                    { 5108857, 51, "Nova Marilândia" },
                    { 5108907, 51, "Nova Maringá" },
                    { 5108956, 51, "Nova Monte Verde" },
                    { 5200050, 52, "Abadia de Goiás" },
                    { 5200100, 52, "Abadiânia" },
                    { 5200134, 52, "Acreúna" },
                    { 5200159, 52, "Adelândia" },
                    { 5200175, 52, "Água Fria de Goiás" },
                    { 5200209, 52, "Água Limpa" },
                    { 5200258, 52, "Águas Lindas de Goiás" },
                    { 5200308, 52, "Alexânia" },
                    { 5200506, 52, "Aloândia" },
                    { 5200555, 52, "Alto Horizonte" },
                    { 5200605, 52, "Alto Paraíso de Goiás" },
                    { 5200803, 52, "Alvorada do Norte" },
                    { 5200829, 52, "Amaralina" },
                    { 5200852, 52, "Americano do Brasil" },
                    { 5200902, 52, "Amorinópolis" },
                    { 5201108, 52, "Anápolis" },
                    { 5201207, 52, "Anhanguera" },
                    { 5201306, 52, "Anicuns" },
                    { 5201405, 52, "Aparecida de Goiânia" },
                    { 5201454, 52, "Aparecida do Rio Doce" },
                    { 5201504, 52, "Aporé" },
                    { 5201603, 52, "Araçu" },
                    { 5201702, 52, "Aragarças" },
                    { 5201801, 52, "Aragoiânia" },
                    { 5202155, 52, "Araguapaz" },
                    { 5202353, 52, "Arenópolis" },
                    { 5202502, 52, "Aruanã" },
                    { 5202601, 52, "Aurilândia" },
                    { 5202809, 52, "Avelinópolis" },
                    { 5203104, 52, "Baliza" },
                    { 5203203, 52, "Barro Alto" },
                    { 5203302, 52, "Bela Vista de Goiás" },
                    { 5203401, 52, "Bom Jardim de Goiás" },
                    { 5203500, 52, "Bom Jesus de Goiás" },
                    { 5203559, 52, "Bonfinópolis" },
                    { 5203575, 52, "Bonópolis" },
                    { 5203609, 52, "Brazabrantes" },
                    { 5203807, 52, "Britânia" },
                    { 5203906, 52, "Buriti Alegre" },
                    { 5203939, 52, "Buriti de Goiás" },
                    { 5203962, 52, "Buritinópolis" },
                    { 5204003, 52, "Cabeceiras" },
                    { 5204102, 52, "Cachoeira Alta" },
                    { 5204201, 52, "Cachoeira de Goiás" },
                    { 5204250, 52, "Cachoeira Dourada" },
                    { 5204300, 52, "Caçu" },
                    { 5204409, 52, "Caiapônia" },
                    { 5204508, 52, "Caldas Novas" },
                    { 5204557, 52, "Caldazinha" },
                    { 5204607, 52, "Campestre de Goiás" },
                    { 5204656, 52, "Campinaçu" },
                    { 5204706, 52, "Campinorte" },
                    { 5204805, 52, "Campo Alegre de Goiás" },
                    { 5204854, 52, "Campo Limpo de Goiás" },
                    { 5204904, 52, "Campos Belos" },
                    { 5204953, 52, "Campos Verdes" },
                    { 5205000, 52, "Carmo do Rio Verde" },
                    { 5205059, 52, "Castelândia" },
                    { 5205109, 52, "Catalão" },
                    { 5205208, 52, "Caturaí" },
                    { 5205307, 52, "Cavalcante" },
                    { 5205406, 52, "Ceres" },
                    { 5205455, 52, "Cezarina" },
                    { 5205471, 52, "Chapadão do Céu" },
                    { 5205497, 52, "Cidade Ocidental" },
                    { 5205513, 52, "Cocalzinho de Goiás" },
                    { 5205521, 52, "Colinas do Sul" },
                    { 5205703, 52, "Córrego do Ouro" },
                    { 5205802, 52, "Corumbá de Goiás" },
                    { 5205901, 52, "Corumbaíba" },
                    { 5206206, 52, "Cristalina" },
                    { 5206305, 52, "Cristianópolis" },
                    { 5206404, 52, "Crixás" },
                    { 5206503, 52, "Cromínia" },
                    { 5206602, 52, "Cumari" },
                    { 5206701, 52, "Damianópolis" },
                    { 5206800, 52, "Damolândia" },
                    { 5206909, 52, "Davinópolis" },
                    { 5207105, 52, "Diorama" },
                    { 5207253, 52, "Doverlândia" },
                    { 5207352, 52, "Edealina" },
                    { 5207402, 52, "Edéia" },
                    { 5207501, 52, "Estrela do Norte" },
                    { 5207535, 52, "Faina" },
                    { 5207600, 52, "Fazenda Nova" },
                    { 5207808, 52, "Firminópolis" },
                    { 5207907, 52, "Flores de Goiás" },
                    { 5208004, 52, "Formosa" },
                    { 5208103, 52, "Formoso" },
                    { 5208152, 52, "Gameleira de Goiás" },
                    { 5208301, 52, "Divinópolis de Goiás" },
                    { 5208400, 52, "Goianápolis" },
                    { 5208509, 52, "Goiandira" },
                    { 5208608, 52, "Goianésia" },
                    { 5208707, 52, "Goiânia" },
                    { 5208806, 52, "Goianira" },
                    { 5208905, 52, "Goiás" },
                    { 5209101, 52, "Goiatuba" },
                    { 5209150, 52, "Gouvelândia" },
                    { 5209200, 52, "Guapó" },
                    { 5209291, 52, "Guaraíta" },
                    { 5209408, 52, "Guarani de Goiás" },
                    { 5209457, 52, "Guarinos" },
                    { 5209606, 52, "Heitoraí" },
                    { 5209705, 52, "Hidrolândia" },
                    { 5209804, 52, "Hidrolina" },
                    { 5209903, 52, "Iaciara" },
                    { 5209937, 52, "Inaciolândia" },
                    { 5209952, 52, "Indiara" },
                    { 5210000, 52, "Inhumas" },
                    { 5210109, 52, "Ipameri" },
                    { 5210158, 52, "Ipiranga de Goiás" },
                    { 5210208, 52, "Iporá" },
                    { 5210307, 52, "Israelândia" },
                    { 5210406, 52, "Itaberaí" },
                    { 5210562, 52, "Itaguari" },
                    { 5210604, 52, "Itaguaru" },
                    { 5210802, 52, "Itajá" },
                    { 5210901, 52, "Itapaci" },
                    { 5211008, 52, "Itapirapuã" },
                    { 5211206, 52, "Itapuranga" },
                    { 5211305, 52, "Itarumã" },
                    { 5211404, 52, "Itauçu" },
                    { 5211503, 52, "Itumbiara" },
                    { 5211602, 52, "Ivolândia" },
                    { 5211701, 52, "Jandaia" },
                    { 5211800, 52, "Jaraguá" },
                    { 5211909, 52, "Jataí" },
                    { 5212006, 52, "Jaupaci" },
                    { 5212055, 52, "Jesúpolis" },
                    { 5212105, 52, "Joviânia" },
                    { 5212204, 52, "Jussara" },
                    { 5212253, 52, "Lagoa Santa" },
                    { 5212303, 52, "Leopoldo de Bulhões" },
                    { 5212501, 52, "Luziânia" },
                    { 5212600, 52, "Mairipotaba" },
                    { 5212709, 52, "Mambaí" },
                    { 5212808, 52, "Mara Rosa" },
                    { 5212907, 52, "Marzagão" },
                    { 5212956, 52, "Matrinchã" },
                    { 5213004, 52, "Maurilândia" },
                    { 5213053, 52, "Mimoso de Goiás" },
                    { 5213087, 52, "Minaçu" },
                    { 5213103, 52, "Mineiros" },
                    { 5213400, 52, "Moiporá" },
                    { 5213509, 52, "Monte Alegre de Goiás" },
                    { 5213707, 52, "Montes Claros de Goiás" },
                    { 5213756, 52, "Montividiu" },
                    { 5213772, 52, "Montividiu do Norte" },
                    { 5213806, 52, "Morrinhos" },
                    { 5213855, 52, "Morro Agudo de Goiás" },
                    { 5213905, 52, "Mossâmedes" },
                    { 5214002, 52, "Mozarlândia" },
                    { 5214051, 52, "Mundo Novo" },
                    { 5214101, 52, "Mutunópolis" },
                    { 5214408, 52, "Nazário" },
                    { 5214507, 52, "Nerópolis" },
                    { 5214606, 52, "Niquelândia" },
                    { 5214705, 52, "Nova América" },
                    { 5214804, 52, "Nova Aurora" },
                    { 5214838, 52, "Nova Crixás" },
                    { 5214861, 52, "Nova Glória" },
                    { 5214879, 52, "Nova Iguaçu de Goiás" },
                    { 5214903, 52, "Nova Roma" },
                    { 5215009, 52, "Nova Veneza" },
                    { 5215207, 52, "Novo Brasil" },
                    { 5215231, 52, "Novo Gama" },
                    { 5215256, 52, "Novo Planalto" },
                    { 5215306, 52, "Orizona" },
                    { 5215405, 52, "Ouro Verde de Goiás" },
                    { 5215504, 52, "Ouvidor" },
                    { 5215603, 52, "Padre Bernardo" },
                    { 5215652, 52, "Palestina de Goiás" },
                    { 5215702, 52, "Palmeiras de Goiás" },
                    { 5215801, 52, "Palmelo" },
                    { 5215900, 52, "Palminópolis" },
                    { 5216007, 52, "Panamá" },
                    { 5216304, 52, "Paranaiguara" },
                    { 5216403, 52, "Paraúna" },
                    { 5216452, 52, "Perolândia" },
                    { 5216809, 52, "Petrolina de Goiás" },
                    { 5216908, 52, "Pilar de Goiás" },
                    { 5217104, 52, "Piracanjuba" },
                    { 5217203, 52, "Piranhas" },
                    { 5217302, 52, "Pirenópolis" },
                    { 5217401, 52, "Pires do Rio" },
                    { 5217609, 52, "Planaltina" },
                    { 5217708, 52, "Pontalina" },
                    { 5218003, 52, "Porangatu" },
                    { 5218052, 52, "Porteirão" },
                    { 5218102, 52, "Portelândia" },
                    { 5218300, 52, "Posse" },
                    { 5218391, 52, "Professor Jamil" },
                    { 5218508, 52, "Quirinópolis" },
                    { 5218607, 52, "Rialma" },
                    { 5218706, 52, "Rianápolis" },
                    { 5218789, 52, "Rio Quente" },
                    { 5218805, 52, "Rio Verde" },
                    { 5218904, 52, "Rubiataba" },
                    { 5219001, 52, "Sanclerlândia" },
                    { 5219100, 52, "Santa Bárbara de Goiás" },
                    { 5219209, 52, "Santa Cruz de Goiás" },
                    { 5219258, 52, "Santa Fé de Goiás" },
                    { 5219308, 52, "Santa Helena de Goiás" },
                    { 5219357, 52, "Santa Isabel" },
                    { 5219407, 52, "Santa Rita do Araguaia" },
                    { 5219456, 52, "Santa Rita do Novo Destino" },
                    { 5219506, 52, "Santa Rosa de Goiás" },
                    { 5219605, 52, "Santa Tereza de Goiás" },
                    { 5219704, 52, "Santa Terezinha de Goiás" },
                    { 5219712, 52, "Santo Antônio da Barra" },
                    { 5219738, 52, "Santo Antônio de Goiás" },
                    { 5219753, 52, "Santo Antônio do Descoberto" },
                    { 5219803, 52, "São Domingos" },
                    { 5219902, 52, "São Francisco de Goiás" },
                    { 5220009, 52, "São João dAliança" },
                    { 5220058, 52, "São João da Paraúna" },
                    { 5220108, 52, "São Luís de Montes Belos" },
                    { 5220157, 52, "São Luíz do Norte" },
                    { 5220207, 52, "São Miguel do Araguaia" },
                    { 5220264, 52, "São Miguel do Passa Quatro" },
                    { 5220280, 52, "São Patrício" },
                    { 5220405, 52, "São Simão" },
                    { 5220454, 52, "Senador Canedo" },
                    { 5220504, 52, "Serranópolis" },
                    { 5220603, 52, "Silvânia" },
                    { 5220686, 52, "Simolândia" },
                    { 5220702, 52, "Sítio dAbadia" },
                    { 5221007, 52, "Taquaral de Goiás" },
                    { 5221080, 52, "Teresina de Goiás" },
                    { 5221197, 52, "Terezópolis de Goiás" },
                    { 5221304, 52, "Três Ranchos" },
                    { 5221403, 52, "Trindade" },
                    { 5221452, 52, "Trombas" },
                    { 5221502, 52, "Turvânia" },
                    { 5221551, 52, "Turvelândia" },
                    { 5221577, 52, "Uirapuru" },
                    { 5221601, 52, "Uruaçu" },
                    { 5221700, 52, "Uruana" },
                    { 5221809, 52, "Urutaí" },
                    { 5221858, 52, "Valparaíso de Goiás" },
                    { 5221908, 52, "Varjão" },
                    { 5222005, 52, "Vianópolis" },
                    { 5222054, 52, "Vicentinópolis" },
                    { 5222203, 52, "Vila Boa" },
                    { 5222302, 52, "Vila Propício" },
                    { 5300108, 53, "Brasília" }
                });

            migrationBuilder.CreateIndex(
                name: "IX_almoxarifado_EmpreendimentoId",
                schema: "almoxarifado",
                table: "almoxarifado",
                column: "EmpreendimentoId");

            migrationBuilder.CreateIndex(
                name: "IX_almoxarifadoitem_AlmoxarifadoId",
                schema: "almoxarifado",
                table: "almoxarifadoitem",
                column: "AlmoxarifadoId");

            migrationBuilder.CreateIndex(
                name: "IX_almoxarifadoitem_ProdutoId",
                schema: "almoxarifado",
                table: "almoxarifadoitem",
                column: "ProdutoId");

            migrationBuilder.CreateIndex(
                name: "IX_antecipacaoamortizacao_ParcelaId",
                schema: "financeiro",
                table: "antecipacaoamortizacao",
                column: "ParcelaId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_antecipacaoamortizacao_TipoAntecipacaoId",
                schema: "financeiro",
                table: "antecipacaoamortizacao",
                column: "TipoAntecipacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_antecipacaoamortizacaoitem_AntecipacaoAmortizacaoId",
                schema: "financeiro",
                table: "antecipacaoamortizacaoitem",
                column: "AntecipacaoAmortizacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_antecipacaoamortizacaoitem_ParcelaId",
                schema: "financeiro",
                table: "antecipacaoamortizacaoitem",
                column: "ParcelaId");

            migrationBuilder.CreateIndex(
                name: "IX_antecipacaocomprovante_ReceitaParcelaId",
                schema: "financeiro",
                table: "antecipacaocomprovante",
                column: "ReceitaParcelaId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_antecipacaocomprovante_UsuarioId",
                schema: "financeiro",
                table: "antecipacaocomprovante",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_arquivoremessadocumento_RemessaId",
                schema: "financeiro",
                table: "arquivoremessadocumento",
                column: "RemessaId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_arquivoremessadocumento_UsuarioId",
                schema: "financeiro",
                table: "arquivoremessadocumento",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_atendimento_CorretorId",
                schema: "geral",
                table: "atendimento",
                column: "CorretorId");

            migrationBuilder.CreateIndex(
                name: "IX_atendimento_LeadId",
                schema: "geral",
                table: "atendimento",
                column: "LeadId");

            migrationBuilder.CreateIndex(
                name: "IX_atendimento_TipoAtendimentoId",
                schema: "geral",
                table: "atendimento",
                column: "TipoAtendimentoId");

            migrationBuilder.CreateIndex(
                name: "IX_banco_EmpresaId",
                schema: "financeiro",
                table: "banco",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_cartorio_EmpresaId",
                schema: "geral",
                table: "cartorio",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_cartorio_EstadoId",
                schema: "geral",
                table: "cartorio",
                column: "EstadoId");

            migrationBuilder.CreateIndex(
                name: "IX_cartorio_MunicipioId",
                schema: "geral",
                table: "cartorio",
                column: "MunicipioId");

            migrationBuilder.CreateIndex(
                name: "IX_centrodecusto_CentroCustoPaiId",
                schema: "financeiro",
                table: "centrodecusto",
                column: "CentroCustoPaiId");

            migrationBuilder.CreateIndex(
                name: "IX_centrodecusto_EmpresaId",
                schema: "financeiro",
                table: "centrodecusto",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_colunafunil_ColunaFunilPaiId",
                schema: "geral",
                table: "colunafunil",
                column: "ColunaFunilPaiId");

            migrationBuilder.CreateIndex(
                name: "IX_composicao_ClasseId",
                schema: "orcamentoobras",
                table: "composicao",
                column: "ClasseId");

            migrationBuilder.CreateIndex(
                name: "IX_composicao_OrigemId",
                schema: "orcamentoobras",
                table: "composicao",
                column: "OrigemId");

            migrationBuilder.CreateIndex(
                name: "IX_composicao_TipoId",
                schema: "orcamentoobras",
                table: "composicao",
                column: "TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_composicao_UnidadeId",
                schema: "orcamentoobras",
                table: "composicao",
                column: "UnidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_composicaoitem_ComposicaoAuxiliarId",
                schema: "orcamentoobras",
                table: "composicaoitem",
                column: "ComposicaoAuxiliarId");

            migrationBuilder.CreateIndex(
                name: "IX_composicaoitem_ComposicaoId",
                schema: "orcamentoobras",
                table: "composicaoitem",
                column: "ComposicaoId");

            migrationBuilder.CreateIndex(
                name: "IX_composicaoitem_InsumoId",
                schema: "orcamentoobras",
                table: "composicaoitem",
                column: "InsumoId");

            migrationBuilder.CreateIndex(
                name: "IX_condicaopagamento_EmpresaId",
                schema: "financeiro",
                table: "condicaopagamento",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_confrontanteadicional_UnidadeId",
                schema: "empreendimento",
                table: "confrontanteadicional",
                column: "UnidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_contacorrente_BancoId",
                schema: "financeiro",
                table: "contacorrente",
                column: "BancoId");

            migrationBuilder.CreateIndex(
                name: "IX_contacorrente_EmpresaId",
                schema: "financeiro",
                table: "contacorrente",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_contacorrentegateway_ContaCorrenteId",
                schema: "financeiro",
                table: "contacorrentegateway",
                column: "ContaCorrenteId");

            migrationBuilder.CreateIndex(
                name: "IX_contacorrentegateway_TipoGatewayId",
                schema: "financeiro",
                table: "contacorrentegateway",
                column: "TipoGatewayId");

            migrationBuilder.CreateIndex(
                name: "IX_contagerencial_ContaGerencialPaiId",
                schema: "financeiro",
                table: "contagerencial",
                column: "ContaGerencialPaiId");

            migrationBuilder.CreateIndex(
                name: "IX_contagerencial_EmpresaId",
                schema: "financeiro",
                table: "contagerencial",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_contrato_ContaCorrenteId",
                schema: "clientes",
                table: "contrato",
                column: "ContaCorrenteId");

            migrationBuilder.CreateIndex(
                name: "IX_contrato_ContratoAnteriorAditadoId",
                schema: "clientes",
                table: "contrato",
                column: "ContratoAnteriorAditadoId");

            migrationBuilder.CreateIndex(
                name: "IX_contrato_EmpreendimentoId",
                schema: "clientes",
                table: "contrato",
                column: "EmpreendimentoId");

            migrationBuilder.CreateIndex(
                name: "IX_contrato_EmpresaId",
                schema: "clientes",
                table: "contrato",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_contrato_IntervaloReajusteId",
                schema: "clientes",
                table: "contrato",
                column: "IntervaloReajusteId");

            migrationBuilder.CreateIndex(
                name: "IX_contrato_SituacaoId",
                schema: "clientes",
                table: "contrato",
                column: "SituacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_contrato_TipoAditamentoId",
                schema: "clientes",
                table: "contrato",
                column: "TipoAditamentoId");

            migrationBuilder.CreateIndex(
                name: "IX_contrato_TipoAmortizacaoId",
                schema: "clientes",
                table: "contrato",
                column: "TipoAmortizacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_contrato_TipoGatewayId",
                schema: "clientes",
                table: "contrato",
                column: "TipoGatewayId");

            migrationBuilder.CreateIndex(
                name: "IX_contrato_TipoId",
                schema: "clientes",
                table: "contrato",
                column: "TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_contrato_TipoIndiceId",
                schema: "clientes",
                table: "contrato",
                column: "TipoIndiceId");

            migrationBuilder.CreateIndex(
                name: "IX_contrato_TipoOperacaoId",
                schema: "clientes",
                table: "contrato",
                column: "TipoOperacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_contrato_TipoProcessoJudicialId",
                schema: "clientes",
                table: "contrato",
                column: "TipoProcessoJudicialId");

            migrationBuilder.CreateIndex(
                name: "IX_contrato_TipoProdutoId",
                schema: "clientes",
                table: "contrato",
                column: "TipoProdutoId");

            migrationBuilder.CreateIndex(
                name: "IX_contrato_UnidadePrincipalId",
                schema: "clientes",
                table: "contrato",
                column: "UnidadePrincipalId");

            migrationBuilder.CreateIndex(
                name: "IX_contratocliente_ClienteId",
                schema: "clientes",
                table: "contratocliente",
                column: "ClienteId");

            migrationBuilder.CreateIndex(
                name: "IX_contratocliente_ContratoId",
                schema: "clientes",
                table: "contratocliente",
                column: "ContratoId");

            migrationBuilder.CreateIndex(
                name: "IX_contratocorretor_ContratoId",
                schema: "clientes",
                table: "contratocorretor",
                column: "ContratoId");

            migrationBuilder.CreateIndex(
                name: "IX_contratocorretor_CorretorId",
                schema: "clientes",
                table: "contratocorretor",
                column: "CorretorId");

            migrationBuilder.CreateIndex(
                name: "IX_contratodigital_ContratoId",
                schema: "clientes",
                table: "contratodigital",
                column: "ContratoId");

            migrationBuilder.CreateIndex(
                name: "IX_contratodigital_SituacaoId",
                schema: "clientes",
                table: "contratodigital",
                column: "SituacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_contratodigital_TipoId",
                schema: "clientes",
                table: "contratodigital",
                column: "TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_contratodigitaldocumento_ContratoDigitalId",
                schema: "clientes",
                table: "contratodigitaldocumento",
                column: "ContratoDigitalId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_contratodigitaldocumento_UsuarioId",
                schema: "clientes",
                table: "contratodigitaldocumento",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_contratodocumento_ContratoId",
                schema: "clientes",
                table: "contratodocumento",
                column: "ContratoId");

            migrationBuilder.CreateIndex(
                name: "IX_contratodocumento_UsuarioId",
                schema: "clientes",
                table: "contratodocumento",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_ContratoFornecedor_EmpreendimentoId",
                schema: "projeto",
                table: "ContratoFornecedor",
                column: "EmpreendimentoId");

            migrationBuilder.CreateIndex(
                name: "IX_ContratoFornecedor_EmpresaId",
                schema: "projeto",
                table: "ContratoFornecedor",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_ContratoFornecedor_FornecedorId",
                schema: "projeto",
                table: "ContratoFornecedor",
                column: "FornecedorId");

            migrationBuilder.CreateIndex(
                name: "IX_ContratoFornecedor_TipoId",
                schema: "projeto",
                table: "ContratoFornecedor",
                column: "TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_ContratoFornecedorDocumento_ContratoFornecedorId",
                schema: "projeto",
                table: "ContratoFornecedorDocumento",
                column: "ContratoFornecedorId");

            migrationBuilder.CreateIndex(
                name: "IX_ContratoFornecedorDocumento_UsuarioId",
                schema: "projeto",
                table: "ContratoFornecedorDocumento",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_ContratoFornecedorItem_ContratoFornecedorId",
                schema: "projeto",
                table: "ContratoFornecedorItem",
                column: "ContratoFornecedorId");

            migrationBuilder.CreateIndex(
                name: "IX_ContratoFornecedorItem_EtapaId",
                schema: "projeto",
                table: "ContratoFornecedorItem",
                column: "EtapaId");

            migrationBuilder.CreateIndex(
                name: "IX_ContratoFornecedorObservacao_ContratoFornecedorId",
                schema: "projeto",
                table: "ContratoFornecedorObservacao",
                column: "ContratoFornecedorId");

            migrationBuilder.CreateIndex(
                name: "IX_ContratoFornecedorObservacao_UsuarioId",
                schema: "projeto",
                table: "ContratoFornecedorObservacao",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_contratoobservacao_ContratoId",
                schema: "clientes",
                table: "contratoobservacao",
                column: "ContratoId");

            migrationBuilder.CreateIndex(
                name: "IX_contratoobservacao_UsuarioId",
                schema: "clientes",
                table: "contratoobservacao",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_contratounidadeadicional_ContratoId",
                schema: "clientes",
                table: "contratounidadeadicional",
                column: "ContratoId");

            migrationBuilder.CreateIndex(
                name: "IX_contratounidadeadicional_UnidadeId",
                schema: "clientes",
                table: "contratounidadeadicional",
                column: "UnidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_contratovistoria_ContratoId",
                schema: "clientes",
                table: "contratovistoria",
                column: "ContratoId");

            migrationBuilder.CreateIndex(
                name: "IX_contratovistoriafoto_ContratoVistoriaId",
                schema: "clientes",
                table: "contratovistoriafoto",
                column: "ContratoVistoriaId");

            migrationBuilder.CreateIndex(
                name: "IX_contratovistoriafoto_UsuarioId",
                schema: "clientes",
                table: "contratovistoriafoto",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_despesa_ContratoId",
                schema: "financeiro",
                table: "despesa",
                column: "ContratoId");

            migrationBuilder.CreateIndex(
                name: "IX_despesa_EmpreendimentoId",
                schema: "financeiro",
                table: "despesa",
                column: "EmpreendimentoId");

            migrationBuilder.CreateIndex(
                name: "IX_despesa_EmpresaId",
                schema: "financeiro",
                table: "despesa",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_despesa_FornecedorId",
                schema: "financeiro",
                table: "despesa",
                column: "FornecedorId");

            migrationBuilder.CreateIndex(
                name: "IX_despesa_OrigemId",
                schema: "financeiro",
                table: "despesa",
                column: "OrigemId");

            migrationBuilder.CreateIndex(
                name: "IX_despesa_TipoDocumentoId",
                schema: "financeiro",
                table: "despesa",
                column: "TipoDocumentoId");

            migrationBuilder.CreateIndex(
                name: "IX_despesa_TipoId",
                schema: "financeiro",
                table: "despesa",
                column: "TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_despesabaixa_ContaCorrenteId",
                schema: "financeiro",
                table: "despesabaixa",
                column: "ContaCorrenteId");

            migrationBuilder.CreateIndex(
                name: "IX_despesabaixa_FormaPagamentoId",
                schema: "financeiro",
                table: "despesabaixa",
                column: "FormaPagamentoId");

            migrationBuilder.CreateIndex(
                name: "IX_despesabaixa_ParcelaId",
                schema: "financeiro",
                table: "despesabaixa",
                column: "ParcelaId");

            migrationBuilder.CreateIndex(
                name: "IX_despesabaixa_UsuarioId",
                schema: "financeiro",
                table: "despesabaixa",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_despesabaixacomprovante_DespesaBaixaId",
                schema: "financeiro",
                table: "despesabaixacomprovante",
                column: "DespesaBaixaId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_despesabaixacomprovante_UsuarioId",
                schema: "financeiro",
                table: "despesabaixacomprovante",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_despesaclassificacao_CentroCustoId",
                schema: "financeiro",
                table: "despesaclassificacao",
                column: "CentroCustoId");

            migrationBuilder.CreateIndex(
                name: "IX_despesaclassificacao_ContaGerencialId",
                schema: "financeiro",
                table: "despesaclassificacao",
                column: "ContaGerencialId");

            migrationBuilder.CreateIndex(
                name: "IX_despesaclassificacao_DespesaId",
                schema: "financeiro",
                table: "despesaclassificacao",
                column: "DespesaId");

            migrationBuilder.CreateIndex(
                name: "IX_despesadocumento_DespesaId",
                schema: "financeiro",
                table: "despesadocumento",
                column: "DespesaId");

            migrationBuilder.CreateIndex(
                name: "IX_despesadocumento_UsuarioId",
                schema: "financeiro",
                table: "despesadocumento",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_despesaparcela_DespesaId",
                schema: "financeiro",
                table: "despesaparcela",
                column: "DespesaId");

            migrationBuilder.CreateIndex(
                name: "IX_despesaparcela_SituacaoId",
                schema: "financeiro",
                table: "despesaparcela",
                column: "SituacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_empreendimento_EmpresaAdministradoraId",
                schema: "empreendimento",
                table: "empreendimento",
                column: "EmpresaAdministradoraId");

            migrationBuilder.CreateIndex(
                name: "IX_empreendimento_EmpresaId",
                schema: "empreendimento",
                table: "empreendimento",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_empreendimento_Endereco_EstadoId",
                schema: "empreendimento",
                table: "empreendimento",
                column: "Endereco_EstadoId");

            migrationBuilder.CreateIndex(
                name: "IX_empreendimento_Endereco_MunicipioId",
                schema: "empreendimento",
                table: "empreendimento",
                column: "Endereco_MunicipioId");

            migrationBuilder.CreateIndex(
                name: "IX_empreendimento_Legalizacao_CartorioId",
                schema: "empreendimento",
                table: "empreendimento",
                column: "Legalizacao_CartorioId");

            migrationBuilder.CreateIndex(
                name: "IX_empreendimento_PlanoPagamentoModeloId",
                schema: "empreendimento",
                table: "empreendimento",
                column: "PlanoPagamentoModeloId");

            migrationBuilder.CreateIndex(
                name: "IX_empreendimento_TipoId",
                schema: "empreendimento",
                table: "empreendimento",
                column: "TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_empreendimento_proprietario_EmpreendimentoId",
                schema: "geral",
                table: "empreendimento_proprietario",
                column: "EmpreendimentoId");

            migrationBuilder.CreateIndex(
                name: "IX_empreendimento_proprietario_ProprietarioId",
                schema: "geral",
                table: "empreendimento_proprietario",
                column: "ProprietarioId");

            migrationBuilder.CreateIndex(
                name: "IX_empreendimentodocumento_EmpreendimentoId",
                schema: "empreendimento",
                table: "empreendimentodocumento",
                column: "EmpreendimentoId");

            migrationBuilder.CreateIndex(
                name: "IX_empreendimentodocumento_UsuarioId",
                schema: "empreendimento",
                table: "empreendimentodocumento",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_empreendimentofoto_EmpreendimentoId",
                schema: "empreendimento",
                table: "empreendimentofoto",
                column: "EmpreendimentoId");

            migrationBuilder.CreateIndex(
                name: "IX_empreendimentofoto_UsuarioId",
                schema: "empreendimento",
                table: "empreendimentofoto",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_empresa_CpfCnpj",
                schema: "geral",
                table: "empresa",
                column: "CpfCnpj",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_empresa_Documento_ComprovanteAtividade_UsuarioId",
                schema: "geral",
                table: "empresa",
                column: "Documento_ComprovanteAtividade_UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_empresa_Documento_ComprovanteResidencial_UsuarioId",
                schema: "geral",
                table: "empresa",
                column: "Documento_ComprovanteResidencial_UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_empresa_Documento_Identificacao_UsuarioId",
                schema: "geral",
                table: "empresa",
                column: "Documento_Identificacao_UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_empresa_Documento_IdentificacaoCnpj_UsuarioId",
                schema: "geral",
                table: "empresa",
                column: "Documento_IdentificacaoCnpj_UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_empresa_Endereco_EstadoId",
                schema: "geral",
                table: "empresa",
                column: "Endereco_EstadoId");

            migrationBuilder.CreateIndex(
                name: "IX_empresa_Endereco_MunicipioId",
                schema: "geral",
                table: "empresa",
                column: "Endereco_MunicipioId");

            migrationBuilder.CreateIndex(
                name: "IX_empresa_Responsavel_Endereco_EstadoId",
                schema: "geral",
                table: "empresa",
                column: "Responsavel_Endereco_EstadoId");

            migrationBuilder.CreateIndex(
                name: "IX_empresa_Responsavel_Endereco_MunicipioId",
                schema: "geral",
                table: "empresa",
                column: "Responsavel_Endereco_MunicipioId");

            migrationBuilder.CreateIndex(
                name: "IX_empresa_TipoEmpresaId",
                schema: "geral",
                table: "empresa",
                column: "TipoEmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_empresaarquivo_EmpresaId",
                schema: "geral",
                table: "empresaarquivo",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_empresaarquivo_UsuarioId",
                schema: "geral",
                table: "empresaarquivo",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_empresagateway_EmpresaId",
                schema: "geral",
                table: "empresagateway",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_empresagateway_TipoGatewayId",
                schema: "geral",
                table: "empresagateway",
                column: "TipoGatewayId");

            migrationBuilder.CreateIndex(
                name: "IX_etapa_EmpresaId",
                schema: "projeto",
                table: "etapa",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_etapa_EtapaPaiId",
                schema: "projeto",
                table: "etapa",
                column: "EtapaPaiId");

            migrationBuilder.CreateIndex(
                name: "IX_etapa_TipoEmpreendimentoId",
                schema: "projeto",
                table: "etapa",
                column: "TipoEmpreendimentoId");

            migrationBuilder.CreateIndex(
                name: "IX_Execucao_ContratoItemId",
                schema: "projeto",
                table: "Execucao",
                column: "ContratoItemId");

            migrationBuilder.CreateIndex(
                name: "IX_Execucao_MedicaoId",
                schema: "projeto",
                table: "Execucao",
                column: "MedicaoId");

            migrationBuilder.CreateIndex(
                name: "IX_Execucao_ResponsavelId",
                schema: "projeto",
                table: "Execucao",
                column: "ResponsavelId");

            migrationBuilder.CreateIndex(
                name: "IX_ExecucaoDocumento_ExecucaoId",
                schema: "projeto",
                table: "ExecucaoDocumento",
                column: "ExecucaoId");

            migrationBuilder.CreateIndex(
                name: "IX_ExecucaoDocumento_UsuarioId",
                schema: "projeto",
                table: "ExecucaoDocumento",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_ExecucaoUnidade_ExecucaoId",
                schema: "projeto",
                table: "ExecucaoUnidade",
                column: "ExecucaoId");

            migrationBuilder.CreateIndex(
                name: "IX_ExecucaoUnidade_UnidadeId",
                schema: "projeto",
                table: "ExecucaoUnidade",
                column: "UnidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_formapagamento_EmpresaId",
                schema: "financeiro",
                table: "formapagamento",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_grupo_EmpreendimentoId",
                schema: "empreendimento",
                table: "grupo",
                column: "EmpreendimentoId");

            migrationBuilder.CreateIndex(
                name: "IX_grupoproduto_EmpresaId",
                schema: "almoxarifado",
                table: "grupoproduto",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_hidrometro_ContratoId",
                schema: "controleagua",
                table: "hidrometro",
                column: "ContratoId");

            migrationBuilder.CreateIndex(
                name: "IX_hidrometro_PessoaId",
                schema: "controleagua",
                table: "hidrometro",
                column: "PessoaId");

            migrationBuilder.CreateIndex(
                name: "IX_hidrometro_ReceitaId",
                schema: "controleagua",
                table: "hidrometro",
                column: "ReceitaId");

            migrationBuilder.CreateIndex(
                name: "IX_hidrometrounidade_HidrometroId",
                schema: "controleagua",
                table: "hidrometrounidade",
                column: "HidrometroId");

            migrationBuilder.CreateIndex(
                name: "IX_hidrometrounidade_UnidadeId",
                schema: "controleagua",
                table: "hidrometrounidade",
                column: "UnidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_historicolead_ColunaFunilId",
                schema: "geral",
                table: "historicolead",
                column: "ColunaFunilId");

            migrationBuilder.CreateIndex(
                name: "IX_historicolead_LeadId",
                schema: "geral",
                table: "historicolead",
                column: "LeadId");

            migrationBuilder.CreateIndex(
                name: "IX_historicolead_UsuarioId",
                schema: "geral",
                table: "historicolead",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_historicosituacaocontrato_ContratoId",
                schema: "clientes",
                table: "historicosituacaocontrato",
                column: "ContratoId");

            migrationBuilder.CreateIndex(
                name: "IX_historicosituacaocontrato_SituacaoId",
                schema: "clientes",
                table: "historicosituacaocontrato",
                column: "SituacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_historicosituacaocontrato_UsuarioId",
                schema: "clientes",
                table: "historicosituacaocontrato",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_imovel_SeguradoraId",
                schema: "empreendimento",
                table: "imovel",
                column: "SeguradoraId");

            migrationBuilder.CreateIndex(
                name: "IX_imovel_TipoImovelId",
                schema: "empreendimento",
                table: "imovel",
                column: "TipoImovelId");

            migrationBuilder.CreateIndex(
                name: "IX_imovel_UnidadeId",
                schema: "empreendimento",
                table: "imovel",
                column: "UnidadeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_indice_TipoIndiceId",
                schema: "financeiro",
                table: "indice",
                column: "TipoIndiceId");

            migrationBuilder.CreateIndex(
                name: "IX_insumo_OrigemId",
                schema: "orcamentoobras",
                table: "insumo",
                column: "OrigemId");

            migrationBuilder.CreateIndex(
                name: "IX_insumo_TipoId",
                schema: "orcamentoobras",
                table: "insumo",
                column: "TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_insumo_UnidadeId",
                schema: "orcamentoobras",
                table: "insumo",
                column: "UnidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_inventario_AlmoxarifadoId",
                schema: "almoxarifado",
                table: "inventario",
                column: "AlmoxarifadoId");

            migrationBuilder.CreateIndex(
                name: "IX_inventarioitem_InventarioId",
                schema: "almoxarifado",
                table: "inventarioitem",
                column: "InventarioId");

            migrationBuilder.CreateIndex(
                name: "IX_inventarioitem_ProdutoId",
                schema: "almoxarifado",
                table: "inventarioitem",
                column: "ProdutoId");

            migrationBuilder.CreateIndex(
                name: "IX_Jazigo_UnidadeId",
                table: "Jazigo",
                column: "UnidadeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ladoadicional_EmpreendimentoId",
                schema: "empreendimento",
                table: "ladoadicional",
                column: "EmpreendimentoId");

            migrationBuilder.CreateIndex(
                name: "IX_ladoadicional_LoteId",
                schema: "empreendimento",
                table: "ladoadicional",
                column: "LoteId");

            migrationBuilder.CreateIndex(
                name: "IX_lead_ColunaFunilId",
                schema: "geral",
                table: "lead",
                column: "ColunaFunilId");

            migrationBuilder.CreateIndex(
                name: "IX_lead_ComoLeadContactouId",
                schema: "geral",
                table: "lead",
                column: "ComoLeadContactouId");

            migrationBuilder.CreateIndex(
                name: "IX_lead_ComoLeadNosEncontrouId",
                schema: "geral",
                table: "lead",
                column: "ComoLeadNosEncontrouId");

            migrationBuilder.CreateIndex(
                name: "IX_lead_CorretorResponsavelId",
                schema: "geral",
                table: "lead",
                column: "CorretorResponsavelId");

            migrationBuilder.CreateIndex(
                name: "IX_lead_GrauInteresseId",
                schema: "geral",
                table: "lead",
                column: "GrauInteresseId");

            migrationBuilder.CreateIndex(
                name: "IX_lead_OrigemId",
                schema: "geral",
                table: "lead",
                column: "OrigemId");

            migrationBuilder.CreateIndex(
                name: "IX_log_EmpresaId",
                schema: "geral",
                table: "log",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_lote_Legalizacao_CartorioId",
                schema: "empreendimento",
                table: "lote",
                column: "Legalizacao_CartorioId");

            migrationBuilder.CreateIndex(
                name: "IX_lote_UnidadeId",
                schema: "empreendimento",
                table: "lote",
                column: "UnidadeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_marcacaoagua_HidrometroId",
                schema: "controleagua",
                table: "marcacaoagua",
                column: "HidrometroId");

            migrationBuilder.CreateIndex(
                name: "IX_marcacaoagua_ParcelaId",
                schema: "controleagua",
                table: "marcacaoagua",
                column: "ParcelaId");

            migrationBuilder.CreateIndex(
                name: "IX_marcacaoagua_ResponsavelId",
                schema: "controleagua",
                table: "marcacaoagua",
                column: "ResponsavelId");

            migrationBuilder.CreateIndex(
                name: "IX_Medicao_ContratoFornecedorId",
                schema: "projeto",
                table: "Medicao",
                column: "ContratoFornecedorId");

            migrationBuilder.CreateIndex(
                name: "IX_Medicao_DespesaId",
                schema: "projeto",
                table: "Medicao",
                column: "DespesaId");

            migrationBuilder.CreateIndex(
                name: "IX_modelocontratodigital_TipoId",
                schema: "clientes",
                table: "modelocontratodigital",
                column: "TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_modelocontratodigitalempreendimento_EmpreendimentoId",
                schema: "clientes",
                table: "modelocontratodigitalempreendimento",
                column: "EmpreendimentoId");

            migrationBuilder.CreateIndex(
                name: "IX_modelocontratodigitalempreendimento_ModeloContratoDigitalId",
                schema: "clientes",
                table: "modelocontratodigitalempreendimento",
                column: "ModeloContratoDigitalId");

            migrationBuilder.CreateIndex(
                name: "IX_modeloorcamentoetapa_ModeloEtapaPaiId",
                schema: "orcamentoobras",
                table: "modeloorcamentoetapa",
                column: "ModeloEtapaPaiId");

            migrationBuilder.CreateIndex(
                name: "IX_modeloorcamentoetapaitem_Composicao_ClasseId",
                schema: "orcamentoobras",
                table: "modeloorcamentoetapaitem",
                column: "Composicao_ClasseId");

            migrationBuilder.CreateIndex(
                name: "IX_modeloorcamentoetapaitem_Composicao_OrigemId",
                schema: "orcamentoobras",
                table: "modeloorcamentoetapaitem",
                column: "Composicao_OrigemId");

            migrationBuilder.CreateIndex(
                name: "IX_modeloorcamentoetapaitem_Composicao_UnidadeMedidaId",
                schema: "orcamentoobras",
                table: "modeloorcamentoetapaitem",
                column: "Composicao_UnidadeMedidaId");

            migrationBuilder.CreateIndex(
                name: "IX_modeloorcamentoetapaitem_ModeloEtapaId",
                schema: "orcamentoobras",
                table: "modeloorcamentoetapaitem",
                column: "ModeloEtapaId");

            migrationBuilder.CreateIndex(
                name: "IX_movimentacao_AlmoxarifadoItemId",
                schema: "almoxarifado",
                table: "movimentacao",
                column: "AlmoxarifadoItemId");

            migrationBuilder.CreateIndex(
                name: "IX_movimentacao_EmpreendimentoConsumidorId",
                schema: "almoxarifado",
                table: "movimentacao",
                column: "EmpreendimentoConsumidorId");

            migrationBuilder.CreateIndex(
                name: "IX_movimentacao_EtapaId",
                schema: "almoxarifado",
                table: "movimentacao",
                column: "EtapaId");

            migrationBuilder.CreateIndex(
                name: "IX_movimentacao_PedidoId",
                schema: "almoxarifado",
                table: "movimentacao",
                column: "PedidoId");

            migrationBuilder.CreateIndex(
                name: "IX_movimentacao_TipoId",
                schema: "almoxarifado",
                table: "movimentacao",
                column: "TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_movimentacao_TipoOrigemId",
                schema: "almoxarifado",
                table: "movimentacao",
                column: "TipoOrigemId");

            migrationBuilder.CreateIndex(
                name: "IX_municipio_EstadoId",
                schema: "geral",
                table: "municipio",
                column: "EstadoId");

            migrationBuilder.CreateIndex(
                name: "IX_orcado_EmpreendimentoId",
                schema: "projeto",
                table: "orcado",
                column: "EmpreendimentoId");

            migrationBuilder.CreateIndex(
                name: "IX_orcado_EmpresaId",
                schema: "projeto",
                table: "orcado",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_orcadoitem_EtapaId",
                schema: "projeto",
                table: "orcadoitem",
                column: "EtapaId");

            migrationBuilder.CreateIndex(
                name: "IX_orcadoitem_OrcadoId",
                schema: "projeto",
                table: "orcadoitem",
                column: "OrcadoId");

            migrationBuilder.CreateIndex(
                name: "IX_orcadoitem_ProdutoId",
                schema: "projeto",
                table: "orcadoitem",
                column: "ProdutoId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamento_ClassificacaoId",
                schema: "compras",
                table: "orcamento",
                column: "ClassificacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamento_EmpresaId",
                schema: "compras",
                table: "orcamento",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamento_SituacaoId",
                schema: "compras",
                table: "orcamento",
                column: "SituacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentodocumento_OrcamentoId",
                schema: "compras",
                table: "orcamentodocumento",
                column: "OrcamentoId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentodocumento_UsuarioId",
                schema: "compras",
                table: "orcamentodocumento",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentoetapa_EtapaPaiId",
                schema: "orcamentoobras",
                table: "orcamentoetapa",
                column: "EtapaPaiId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentoetapa_OrcamentoId",
                schema: "orcamentoobras",
                table: "orcamentoetapa",
                column: "OrcamentoId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentoetapaitem_ComposicaoId",
                schema: "orcamentoobras",
                table: "orcamentoetapaitem",
                column: "ComposicaoId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentoetapaitem_EtapaId",
                schema: "orcamentoobras",
                table: "orcamentoetapaitem",
                column: "EtapaId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentofornecedor_FormaPagamentoId",
                schema: "compras",
                table: "orcamentofornecedor",
                column: "FormaPagamentoId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentofornecedor_FornecedorId",
                schema: "compras",
                table: "orcamentofornecedor",
                column: "FornecedorId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentofornecedor_OrcamentoId",
                schema: "compras",
                table: "orcamentofornecedor",
                column: "OrcamentoId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentoitem_OrcamentoId",
                schema: "compras",
                table: "orcamentoitem",
                column: "OrcamentoId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentoitem_ProdutoId",
                schema: "compras",
                table: "orcamentoitem",
                column: "ProdutoId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentoitem_fornecedor_FornecedorId",
                schema: "compras",
                table: "orcamentoitem_fornecedor",
                column: "FornecedorId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentoitem_fornecedor_OrcamentoItemId",
                schema: "compras",
                table: "orcamentoitem_fornecedor",
                column: "OrcamentoItemId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentoobras_EmpreendimentoId",
                schema: "orcamentoobras",
                table: "orcamentoobras",
                column: "EmpreendimentoId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentoobras_EmpresaId",
                schema: "orcamentoobras",
                table: "orcamentoobras",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentoobras_EstadoId",
                schema: "orcamentoobras",
                table: "orcamentoobras",
                column: "EstadoId");

            migrationBuilder.CreateIndex(
                name: "IX_orcamentoobras_OrigemId",
                schema: "orcamentoobras",
                table: "orcamentoobras",
                column: "OrigemId");

            migrationBuilder.CreateIndex(
                name: "IX_parametro_AlmoxarifadoPadraoId",
                schema: "compras",
                table: "parametro",
                column: "AlmoxarifadoPadraoId");

            migrationBuilder.CreateIndex(
                name: "IX_parametro_EmpresaId",
                schema: "compras",
                table: "parametro",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_parametro_CentroCustoReceitaId",
                schema: "financeiro",
                table: "parametro",
                column: "CentroCustoReceitaId");

            migrationBuilder.CreateIndex(
                name: "IX_parametro_ContaGerencialReceitaId",
                schema: "financeiro",
                table: "parametro",
                column: "ContaGerencialReceitaId");

            migrationBuilder.CreateIndex(
                name: "IX_parametro_EmpresaId1",
                schema: "financeiro",
                table: "parametro",
                column: "EmpresaId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_parametro_ParametroControleAgua_CentroCustoControleAguaId",
                schema: "financeiro",
                table: "parametro",
                column: "ParametroControleAgua_CentroCustoControleAguaId");

            migrationBuilder.CreateIndex(
                name: "IX_parametro_ParametroControleAgua_ContaCorrenteId",
                schema: "financeiro",
                table: "parametro",
                column: "ParametroControleAgua_ContaCorrenteId");

            migrationBuilder.CreateIndex(
                name: "IX_parametro_ParametroControleAgua_ContaGerencialControleAguaId",
                schema: "financeiro",
                table: "parametro",
                column: "ParametroControleAgua_ContaGerencialControleAguaId");

            migrationBuilder.CreateIndex(
                name: "IX_parametro_ParametroControleAgua_TipoGatewayId",
                schema: "financeiro",
                table: "parametro",
                column: "ParametroControleAgua_TipoGatewayId");

            migrationBuilder.CreateIndex(
                name: "IX_parametro_ParametroControleAgua_TipoOperacaoId",
                schema: "financeiro",
                table: "parametro",
                column: "ParametroControleAgua_TipoOperacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_parametro_ParametroCRMVendas_CentroCustoComissaoCorretorId",
                schema: "financeiro",
                table: "parametro",
                column: "ParametroCRMVendas_CentroCustoComissaoCorretorId");

            migrationBuilder.CreateIndex(
                name: "IX_parametro_ParametroCRMVendas_ContaGerencialComissaoCorretor~",
                schema: "financeiro",
                table: "parametro",
                column: "ParametroCRMVendas_ContaGerencialComissaoCorretorId");

            migrationBuilder.CreateIndex(
                name: "IX_parametro_TipoAmortizacaoId",
                schema: "financeiro",
                table: "parametro",
                column: "TipoAmortizacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_parametrocobranca_LayoutCobrancaId",
                schema: "financeiro",
                table: "parametrocobranca",
                column: "LayoutCobrancaId");

            migrationBuilder.CreateIndex(
                name: "IX_parametrocobranca_ParametroId",
                schema: "financeiro",
                table: "parametrocobranca",
                column: "ParametroId");

            migrationBuilder.CreateIndex(
                name: "IX_parametrogatway_ParametroId",
                schema: "financeiro",
                table: "parametrogatway",
                column: "ParametroId");

            migrationBuilder.CreateIndex(
                name: "IX_parametrogatway_TipoId",
                schema: "financeiro",
                table: "parametrogatway",
                column: "TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_pedido_DespesaId",
                schema: "compras",
                table: "pedido",
                column: "DespesaId");

            migrationBuilder.CreateIndex(
                name: "IX_pedido_EmpresaId",
                schema: "compras",
                table: "pedido",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_pedido_FornecedorId",
                schema: "compras",
                table: "pedido",
                column: "FornecedorId");

            migrationBuilder.CreateIndex(
                name: "IX_pedido_OrcamentoId",
                schema: "compras",
                table: "pedido",
                column: "OrcamentoId");

            migrationBuilder.CreateIndex(
                name: "IX_pedido_SituacaoFreteId",
                schema: "compras",
                table: "pedido",
                column: "SituacaoFreteId");

            migrationBuilder.CreateIndex(
                name: "IX_pedido_TipoId",
                schema: "compras",
                table: "pedido",
                column: "TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_pedidoclassificacao_CentroCustoId",
                schema: "compras",
                table: "pedidoclassificacao",
                column: "CentroCustoId");

            migrationBuilder.CreateIndex(
                name: "IX_pedidoclassificacao_ContaGerencialId",
                schema: "compras",
                table: "pedidoclassificacao",
                column: "ContaGerencialId");

            migrationBuilder.CreateIndex(
                name: "IX_pedidoclassificacao_PedidoId",
                schema: "compras",
                table: "pedidoclassificacao",
                column: "PedidoId");

            migrationBuilder.CreateIndex(
                name: "IX_pedidoitem_PedidoId",
                schema: "compras",
                table: "pedidoitem",
                column: "PedidoId");

            migrationBuilder.CreateIndex(
                name: "IX_pedidoitem_ProdutoId",
                schema: "compras",
                table: "pedidoitem",
                column: "ProdutoId");

            migrationBuilder.CreateIndex(
                name: "IX_pedidoitem_SituacaoId",
                schema: "compras",
                table: "pedidoitem",
                column: "SituacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_pedidoxmlarquivo_PedidoId",
                schema: "compras",
                table: "pedidoxmlarquivo",
                column: "PedidoId");

            migrationBuilder.CreateIndex(
                name: "IX_pedidoxmlarquivo_UsuarioId",
                schema: "compras",
                table: "pedidoxmlarquivo",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_CnpjCpf",
                schema: "geral",
                table: "pessoa",
                column: "CnpjCpf",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_Conjuge_Qualificacao_EscolaridadeId",
                schema: "geral",
                table: "pessoa",
                column: "Conjuge_Qualificacao_EscolaridadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_Conjuge_Qualificacao_EstadoCivilId",
                schema: "geral",
                table: "pessoa",
                column: "Conjuge_Qualificacao_EstadoCivilId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_Conjuge_Qualificacao_NacionalidadeId",
                schema: "geral",
                table: "pessoa",
                column: "Conjuge_Qualificacao_NacionalidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_Conjuge_Qualificacao_NaturalidadeId",
                schema: "geral",
                table: "pessoa",
                column: "Conjuge_Qualificacao_NaturalidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_Conjuge_Qualificacao_ProfissaoId",
                schema: "geral",
                table: "pessoa",
                column: "Conjuge_Qualificacao_ProfissaoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_Conjuge_SexoId",
                schema: "geral",
                table: "pessoa",
                column: "Conjuge_SexoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_EmpresaId",
                schema: "geral",
                table: "pessoa",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_Endereco_EstadoId",
                schema: "geral",
                table: "pessoa",
                column: "Endereco_EstadoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_Endereco_MunicipioId",
                schema: "geral",
                table: "pessoa",
                column: "Endereco_MunicipioId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_JuridicaResponsavel_Endereco_EstadoId",
                schema: "geral",
                table: "pessoa",
                column: "JuridicaResponsavel_Endereco_EstadoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_JuridicaResponsavel_Endereco_MunicipioId",
                schema: "geral",
                table: "pessoa",
                column: "JuridicaResponsavel_Endereco_MunicipioId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_JuridicaResponsavel_Qualificacao_EscolaridadeId",
                schema: "geral",
                table: "pessoa",
                column: "JuridicaResponsavel_Qualificacao_EscolaridadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_JuridicaResponsavel_Qualificacao_EstadoCivilId",
                schema: "geral",
                table: "pessoa",
                column: "JuridicaResponsavel_Qualificacao_EstadoCivilId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_JuridicaResponsavel_Qualificacao_NacionalidadeId",
                schema: "geral",
                table: "pessoa",
                column: "JuridicaResponsavel_Qualificacao_NacionalidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_JuridicaResponsavel_Qualificacao_NaturalidadeId",
                schema: "geral",
                table: "pessoa",
                column: "JuridicaResponsavel_Qualificacao_NaturalidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_JuridicaResponsavel_Qualificacao_ProfissaoId",
                schema: "geral",
                table: "pessoa",
                column: "JuridicaResponsavel_Qualificacao_ProfissaoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_JuridicaResponsavel_SexoId",
                schema: "geral",
                table: "pessoa",
                column: "JuridicaResponsavel_SexoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_Qualificacao_EscolaridadeId",
                schema: "geral",
                table: "pessoa",
                column: "Qualificacao_EscolaridadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_Qualificacao_EstadoCivilId",
                schema: "geral",
                table: "pessoa",
                column: "Qualificacao_EstadoCivilId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_Qualificacao_NacionalidadeId",
                schema: "geral",
                table: "pessoa",
                column: "Qualificacao_NacionalidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_Qualificacao_NaturalidadeId",
                schema: "geral",
                table: "pessoa",
                column: "Qualificacao_NaturalidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_Qualificacao_ProfissaoId",
                schema: "geral",
                table: "pessoa",
                column: "Qualificacao_ProfissaoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_SexoId",
                schema: "geral",
                table: "pessoa",
                column: "SexoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_TipoPessoaId",
                schema: "geral",
                table: "pessoa",
                column: "TipoPessoaId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoa_UsuarioId",
                schema: "geral",
                table: "pessoa",
                column: "UsuarioId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_pessoacontato_PessoaId",
                schema: "geral",
                table: "pessoacontato",
                column: "PessoaId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoadocumento_PessoaId",
                schema: "geral",
                table: "pessoadocumento",
                column: "PessoaId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoadocumento_UsuarioId",
                schema: "geral",
                table: "pessoadocumento",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoafamiliar_EscolaridadeId",
                schema: "geral",
                table: "pessoafamiliar",
                column: "EscolaridadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoafamiliar_GrauParentescoId",
                schema: "geral",
                table: "pessoafamiliar",
                column: "GrauParentescoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoafamiliar_PessoaId",
                schema: "geral",
                table: "pessoafamiliar",
                column: "PessoaId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoafamiliar_ProfissaoId",
                schema: "geral",
                table: "pessoafamiliar",
                column: "ProfissaoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoagateway_EmpresaId",
                schema: "geral",
                table: "pessoagateway",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoagateway_PessoaId",
                schema: "geral",
                table: "pessoagateway",
                column: "PessoaId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoagateway_TipoGatewayId",
                schema: "geral",
                table: "pessoagateway",
                column: "TipoGatewayId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Conjuge_Qualificacao_EscolaridadeId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Conjuge_Qualificacao_EscolaridadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Conjuge_Qualificacao_EstadoCivilId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Conjuge_Qualificacao_EstadoCivilId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Conjuge_Qualificacao_NacionalidadeId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Conjuge_Qualificacao_NacionalidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Conjuge_Qualificacao_NaturalidadeId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Conjuge_Qualificacao_NaturalidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Conjuge_Qualificacao_ProfissaoId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Conjuge_Qualificacao_ProfissaoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Conjuge_SexoId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Conjuge_SexoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Moradia_Endereco_EstadoId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Moradia_Endereco_EstadoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Moradia_Endereco_MunicipioId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Moradia_Endereco_MunicipioId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Moradia_TipoAbastecimentoAguaId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Moradia_TipoAbastecimentoAguaId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Moradia_TipoColetaLixoId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Moradia_TipoColetaLixoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Moradia_TipoCondicaoMoradiaId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Moradia_TipoCondicaoMoradiaId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Moradia_TipoEdificacaoMoradiaId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Moradia_TipoEdificacaoMoradiaId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Moradia_TipoEnergiaMoradiaId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Moradia_TipoEnergiaMoradiaId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Moradia_TipoEsgotamentoSanitarioId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Moradia_TipoEsgotamentoSanitarioId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Moradia_TipoMoradiaId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Moradia_TipoMoradiaId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Qualificacao_EscolaridadeId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Qualificacao_EscolaridadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Qualificacao_EstadoCivilId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Qualificacao_EstadoCivilId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Qualificacao_NacionalidadeId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Qualificacao_NacionalidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Qualificacao_NaturalidadeId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Qualificacao_NaturalidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_Qualificacao_ProfissaoId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "Qualificacao_ProfissaoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_SexoId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "SexoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_TipoMoradiaNovaId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "TipoMoradiaNovaId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeitura_UsuarioId",
                schema: "geral",
                table: "pessoaprefeitura",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeituracontato_PessoaPrefeituraId",
                schema: "geral",
                table: "pessoaprefeituracontato",
                column: "PessoaPrefeituraId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeituradocumento_PessoaPrefeituraId",
                schema: "geral",
                table: "pessoaprefeituradocumento",
                column: "PessoaPrefeituraId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeituradocumento_UsuarioId",
                schema: "geral",
                table: "pessoaprefeituradocumento",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeiturafamiliar_EscolaridadeId",
                schema: "geral",
                table: "pessoaprefeiturafamiliar",
                column: "EscolaridadeId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeiturafamiliar_GrauParentescoId",
                schema: "geral",
                table: "pessoaprefeiturafamiliar",
                column: "GrauParentescoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeiturafamiliar_PessoaPrefeituraId",
                schema: "geral",
                table: "pessoaprefeiturafamiliar",
                column: "PessoaPrefeituraId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeiturafamiliar_ProfissaoId",
                schema: "geral",
                table: "pessoaprefeiturafamiliar",
                column: "ProfissaoId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeituragateway_EmpresaId",
                schema: "geral",
                table: "pessoaprefeituragateway",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeituragateway_PessoaPrefeituraId",
                schema: "geral",
                table: "pessoaprefeituragateway",
                column: "PessoaPrefeituraId");

            migrationBuilder.CreateIndex(
                name: "IX_pessoaprefeituragateway_TipoGatewayId",
                schema: "geral",
                table: "pessoaprefeituragateway",
                column: "TipoGatewayId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentomodelo_ContaCorrenteId",
                schema: "financeiro",
                table: "planopagamentomodelo",
                column: "ContaCorrenteId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentomodelo_Entrada_TipoId",
                schema: "financeiro",
                table: "planopagamentomodelo",
                column: "Entrada_TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentomodelo_Entrada_TipoIntervaloParcelaId",
                schema: "financeiro",
                table: "planopagamentomodelo",
                column: "Entrada_TipoIntervaloParcelaId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentomodelo_Financiamento_TipoId",
                schema: "financeiro",
                table: "planopagamentomodelo",
                column: "Financiamento_TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentomodelo_Financiamento_TipoIntervaloParcelaId",
                schema: "financeiro",
                table: "planopagamentomodelo",
                column: "Financiamento_TipoIntervaloParcelaId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentomodelo_Intermediaria_TipoId",
                schema: "financeiro",
                table: "planopagamentomodelo",
                column: "Intermediaria_TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentomodelo_Intermediaria_TipoIntervaloParcelaId",
                schema: "financeiro",
                table: "planopagamentomodelo",
                column: "Intermediaria_TipoIntervaloParcelaId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentomodelo_IntervaloReajusteId",
                schema: "financeiro",
                table: "planopagamentomodelo",
                column: "IntervaloReajusteId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentomodelo_TipoAmortizacaoId",
                schema: "financeiro",
                table: "planopagamentomodelo",
                column: "TipoAmortizacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentomodelo_TipoAnoInicioReajusteId",
                schema: "financeiro",
                table: "planopagamentomodelo",
                column: "TipoAnoInicioReajusteId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentomodelo_TipoGatewayId",
                schema: "financeiro",
                table: "planopagamentomodelo",
                column: "TipoGatewayId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentomodelo_TipoIndiceId",
                schema: "financeiro",
                table: "planopagamentomodelo",
                column: "TipoIndiceId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentomodelo_TipoMesReajusteId",
                schema: "financeiro",
                table: "planopagamentomodelo",
                column: "TipoMesReajusteId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentomodelo_TipoOperacaoId",
                schema: "financeiro",
                table: "planopagamentomodelo",
                column: "TipoOperacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentomodelo_TipoValorTotalId",
                schema: "financeiro",
                table: "planopagamentomodelo",
                column: "TipoValorTotalId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentounidade_ContaCorrenteId",
                schema: "financeiro",
                table: "planopagamentounidade",
                column: "ContaCorrenteId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentounidade_Entrada_TipoId",
                schema: "financeiro",
                table: "planopagamentounidade",
                column: "Entrada_TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentounidade_Entrada_TipoIntervaloParcelaId",
                schema: "financeiro",
                table: "planopagamentounidade",
                column: "Entrada_TipoIntervaloParcelaId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentounidade_Financiamento_TipoId",
                schema: "financeiro",
                table: "planopagamentounidade",
                column: "Financiamento_TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentounidade_Financiamento_TipoIntervaloParcelaId",
                schema: "financeiro",
                table: "planopagamentounidade",
                column: "Financiamento_TipoIntervaloParcelaId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentounidade_Intermediaria_TipoId",
                schema: "financeiro",
                table: "planopagamentounidade",
                column: "Intermediaria_TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentounidade_Intermediaria_TipoIntervaloParcelaId",
                schema: "financeiro",
                table: "planopagamentounidade",
                column: "Intermediaria_TipoIntervaloParcelaId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentounidade_IntervaloReajusteId",
                schema: "financeiro",
                table: "planopagamentounidade",
                column: "IntervaloReajusteId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentounidade_TipoAmortizacaoId",
                schema: "financeiro",
                table: "planopagamentounidade",
                column: "TipoAmortizacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentounidade_TipoAnoInicioReajusteId",
                schema: "financeiro",
                table: "planopagamentounidade",
                column: "TipoAnoInicioReajusteId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentounidade_TipoGatewayId",
                schema: "financeiro",
                table: "planopagamentounidade",
                column: "TipoGatewayId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentounidade_TipoIndiceId",
                schema: "financeiro",
                table: "planopagamentounidade",
                column: "TipoIndiceId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentounidade_TipoMesReajusteId",
                schema: "financeiro",
                table: "planopagamentounidade",
                column: "TipoMesReajusteId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentounidade_TipoOperacaoId",
                schema: "financeiro",
                table: "planopagamentounidade",
                column: "TipoOperacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentounidade_TipoValorTotalId",
                schema: "financeiro",
                table: "planopagamentounidade",
                column: "TipoValorTotalId");

            migrationBuilder.CreateIndex(
                name: "IX_planopagamentounidade_UnidadeId",
                schema: "financeiro",
                table: "planopagamentounidade",
                column: "UnidadeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_produto_EmpresaId",
                schema: "almoxarifado",
                table: "produto",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_produto_GrupoId",
                schema: "almoxarifado",
                table: "produto",
                column: "GrupoId");

            migrationBuilder.CreateIndex(
                name: "IX_produto_TipoId",
                schema: "almoxarifado",
                table: "produto",
                column: "TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_produto_UltimaCompraFornecedorId",
                schema: "almoxarifado",
                table: "produto",
                column: "UltimaCompraFornecedorId");

            migrationBuilder.CreateIndex(
                name: "IX_produto_UnidadeMedidaId",
                schema: "almoxarifado",
                table: "produto",
                column: "UnidadeMedidaId");

            migrationBuilder.CreateIndex(
                name: "IX_produtofornecedor_FornecedorId",
                schema: "almoxarifado",
                table: "produtofornecedor",
                column: "FornecedorId");

            migrationBuilder.CreateIndex(
                name: "IX_produtofornecedor_ProdutoId",
                schema: "almoxarifado",
                table: "produtofornecedor",
                column: "ProdutoId");

            migrationBuilder.CreateIndex(
                name: "IX_qualidadeagua_Documento_UsuarioId",
                schema: "controleagua",
                table: "qualidadeagua",
                column: "Documento_UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_qualidadeagua_UsuarioId",
                schema: "controleagua",
                table: "qualidadeagua",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_receita_ClienteId",
                schema: "financeiro",
                table: "receita",
                column: "ClienteId");

            migrationBuilder.CreateIndex(
                name: "IX_receita_ContaCorrenteId",
                schema: "financeiro",
                table: "receita",
                column: "ContaCorrenteId");

            migrationBuilder.CreateIndex(
                name: "IX_receita_ContratoId",
                schema: "financeiro",
                table: "receita",
                column: "ContratoId");

            migrationBuilder.CreateIndex(
                name: "IX_receita_EmpreendimentoId",
                schema: "financeiro",
                table: "receita",
                column: "EmpreendimentoId");

            migrationBuilder.CreateIndex(
                name: "IX_receita_EmpresaId",
                schema: "financeiro",
                table: "receita",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_receita_TipoDocumentoId",
                schema: "financeiro",
                table: "receita",
                column: "TipoDocumentoId");

            migrationBuilder.CreateIndex(
                name: "IX_receita_TipoGatewayId",
                schema: "financeiro",
                table: "receita",
                column: "TipoGatewayId");

            migrationBuilder.CreateIndex(
                name: "IX_receita_TipoId",
                schema: "financeiro",
                table: "receita",
                column: "TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_receita_TipoOperacaoId",
                schema: "financeiro",
                table: "receita",
                column: "TipoOperacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_receitabaixa_ContaCorrenteId",
                schema: "financeiro",
                table: "receitabaixa",
                column: "ContaCorrenteId");

            migrationBuilder.CreateIndex(
                name: "IX_receitabaixa_FormaPagamentoId",
                schema: "financeiro",
                table: "receitabaixa",
                column: "FormaPagamentoId");

            migrationBuilder.CreateIndex(
                name: "IX_receitabaixa_ParcelaId",
                schema: "financeiro",
                table: "receitabaixa",
                column: "ParcelaId");

            migrationBuilder.CreateIndex(
                name: "IX_receitabaixa_TipoOperacaoId",
                schema: "financeiro",
                table: "receitabaixa",
                column: "TipoOperacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_receitabaixa_TransacaoId",
                schema: "financeiro",
                table: "receitabaixa",
                column: "TransacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_receitabaixa_UsuarioId",
                schema: "financeiro",
                table: "receitabaixa",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_receitabaixacomprovante_ReceitaBaixaId",
                schema: "financeiro",
                table: "receitabaixacomprovante",
                column: "ReceitaBaixaId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_receitaclassificacao_CentroCustoId",
                schema: "financeiro",
                table: "receitaclassificacao",
                column: "CentroCustoId");

            migrationBuilder.CreateIndex(
                name: "IX_receitaclassificacao_ContaGerencialId",
                schema: "financeiro",
                table: "receitaclassificacao",
                column: "ContaGerencialId");

            migrationBuilder.CreateIndex(
                name: "IX_receitaclassificacao_ReceitaId",
                schema: "financeiro",
                table: "receitaclassificacao",
                column: "ReceitaId");

            migrationBuilder.CreateIndex(
                name: "IX_receitadocumento_ReceitaId",
                schema: "financeiro",
                table: "receitadocumento",
                column: "ReceitaId");

            migrationBuilder.CreateIndex(
                name: "IX_receitadocumento_UsuarioId",
                schema: "financeiro",
                table: "receitadocumento",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_receitaparcela_AgrupadorId",
                schema: "financeiro",
                table: "receitaparcela",
                column: "AgrupadorId");

            migrationBuilder.CreateIndex(
                name: "IX_receitaparcela_ContaCorrenteId",
                schema: "financeiro",
                table: "receitaparcela",
                column: "ContaCorrenteId");

            migrationBuilder.CreateIndex(
                name: "IX_receitaparcela_ReceitaId",
                schema: "financeiro",
                table: "receitaparcela",
                column: "ReceitaId");

            migrationBuilder.CreateIndex(
                name: "IX_receitaparcela_SituacaoId",
                schema: "financeiro",
                table: "receitaparcela",
                column: "SituacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_receitaparcela_TipoGatewayId",
                schema: "financeiro",
                table: "receitaparcela",
                column: "TipoGatewayId");

            migrationBuilder.CreateIndex(
                name: "IX_receitaparcela_TipoOperacaoId",
                schema: "financeiro",
                table: "receitaparcela",
                column: "TipoOperacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_receitaparcela_TipoServicoId",
                schema: "financeiro",
                table: "receitaparcela",
                column: "TipoServicoId");

            migrationBuilder.CreateIndex(
                name: "IX_receitatransacao_ContaCorrenteId",
                schema: "financeiro",
                table: "receitatransacao",
                column: "ContaCorrenteId");

            migrationBuilder.CreateIndex(
                name: "IX_receitatransacao_FormaPagamentoId",
                schema: "financeiro",
                table: "receitatransacao",
                column: "FormaPagamentoId");

            migrationBuilder.CreateIndex(
                name: "IX_receitatransacao_ParcelaId",
                schema: "financeiro",
                table: "receitatransacao",
                column: "ParcelaId");

            migrationBuilder.CreateIndex(
                name: "IX_receitatransacao_RemessaId",
                schema: "financeiro",
                table: "receitatransacao",
                column: "RemessaId");

            migrationBuilder.CreateIndex(
                name: "IX_receitatransacao_SituacaoId",
                schema: "financeiro",
                table: "receitatransacao",
                column: "SituacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_receitatransacao_TipoGatewayId",
                schema: "financeiro",
                table: "receitatransacao",
                column: "TipoGatewayId");

            migrationBuilder.CreateIndex(
                name: "IX_receitatransacao_TipoOperacaoId",
                schema: "financeiro",
                table: "receitatransacao",
                column: "TipoOperacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_receitatransacao_UsuarioBoletoGeradoId",
                schema: "financeiro",
                table: "receitatransacao",
                column: "UsuarioBoletoGeradoId");

            migrationBuilder.CreateIndex(
                name: "IX_receitatransacao_UsuarioTransacaoId",
                schema: "financeiro",
                table: "receitatransacao",
                column: "UsuarioTransacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_reguacobrancaetapa_ReguaCobrancaId",
                schema: "financeiro",
                table: "reguacobrancaetapa",
                column: "ReguaCobrancaId");

            migrationBuilder.CreateIndex(
                name: "IX_remessa_ContaCorrenteId",
                schema: "financeiro",
                table: "remessa",
                column: "ContaCorrenteId");

            migrationBuilder.CreateIndex(
                name: "IX_remessa_TipoId",
                schema: "financeiro",
                table: "remessa",
                column: "TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_requisicao_AlmoxarifadoId",
                schema: "almoxarifado",
                table: "requisicao",
                column: "AlmoxarifadoId");

            migrationBuilder.CreateIndex(
                name: "IX_requisicao_EmpreendimentoId",
                schema: "almoxarifado",
                table: "requisicao",
                column: "EmpreendimentoId");

            migrationBuilder.CreateIndex(
                name: "IX_requisicao_PedidoId",
                schema: "almoxarifado",
                table: "requisicao",
                column: "PedidoId");

            migrationBuilder.CreateIndex(
                name: "IX_requisicaoitem_EtapaId",
                schema: "almoxarifado",
                table: "requisicaoitem",
                column: "EtapaId");

            migrationBuilder.CreateIndex(
                name: "IX_requisicaoitem_ProdutoId",
                schema: "almoxarifado",
                table: "requisicaoitem",
                column: "ProdutoId");

            migrationBuilder.CreateIndex(
                name: "IX_requisicaoitem_RequisicaoId",
                schema: "almoxarifado",
                table: "requisicaoitem",
                column: "RequisicaoId");

            migrationBuilder.CreateIndex(
                name: "IX_requisicaoitem_UnidadeMedidaId",
                schema: "almoxarifado",
                table: "requisicaoitem",
                column: "UnidadeMedidaId");

            migrationBuilder.CreateIndex(
                name: "IX_reserva_ColunaFunilId",
                schema: "empreendimento",
                table: "reserva",
                column: "ColunaFunilId");

            migrationBuilder.CreateIndex(
                name: "IX_reserva_ContratoId",
                schema: "empreendimento",
                table: "reserva",
                column: "ContratoId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_reserva_CorretorId",
                schema: "empreendimento",
                table: "reserva",
                column: "CorretorId");

            migrationBuilder.CreateIndex(
                name: "IX_reserva_LeadId",
                schema: "empreendimento",
                table: "reserva",
                column: "LeadId");

            migrationBuilder.CreateIndex(
                name: "IX_reserva_MotivoCancelamentoReservaId",
                schema: "empreendimento",
                table: "reserva",
                column: "MotivoCancelamentoReservaId");

            migrationBuilder.CreateIndex(
                name: "IX_reserva_SituacaoId",
                schema: "empreendimento",
                table: "reserva",
                column: "SituacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_reserva_TipoReservaId",
                schema: "empreendimento",
                table: "reserva",
                column: "TipoReservaId");

            migrationBuilder.CreateIndex(
                name: "IX_reserva_UnidadeId",
                schema: "empreendimento",
                table: "reserva",
                column: "UnidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_reservaobservacao_ReservaId",
                schema: "empreendimento",
                table: "reservaobservacao",
                column: "ReservaId");

            migrationBuilder.CreateIndex(
                name: "IX_reservaobservacao_UsuarioId",
                schema: "empreendimento",
                table: "reservaobservacao",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_seguradora_EmpresaId",
                schema: "geral",
                table: "seguradora",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_seguradora_Endereco_EstadoId",
                schema: "geral",
                table: "seguradora",
                column: "Endereco_EstadoId");

            migrationBuilder.CreateIndex(
                name: "IX_seguradora_Endereco_MunicipioId",
                schema: "geral",
                table: "seguradora",
                column: "Endereco_MunicipioId");

            migrationBuilder.CreateIndex(
                name: "IX_seguradora_TipoPessoaId",
                schema: "geral",
                table: "seguradora",
                column: "TipoPessoaId");

            migrationBuilder.CreateIndex(
                name: "IX_seguradora_contato_SeguradoraId",
                schema: "loteamento",
                table: "seguradora_contato",
                column: "SeguradoraId");

            migrationBuilder.CreateIndex(
                name: "IX_signatariocontratodigital_ClienteId",
                schema: "clientes",
                table: "signatariocontratodigital",
                column: "ClienteId");

            migrationBuilder.CreateIndex(
                name: "IX_signatariocontratodigital_ContratoDigitalId",
                schema: "clientes",
                table: "signatariocontratodigital",
                column: "ContratoDigitalId");

            migrationBuilder.CreateIndex(
                name: "IX_signatariocontratodigital_SituacaoId",
                schema: "clientes",
                table: "signatariocontratodigital",
                column: "SituacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_signatariocontratodigital_TipoAssinaturaId",
                schema: "clientes",
                table: "signatariocontratodigital",
                column: "TipoAssinaturaId");

            migrationBuilder.CreateIndex(
                name: "IX_tabelavalorconsumoaguaitem_TabelaId",
                schema: "controleagua",
                table: "tabelavalorconsumoaguaitem",
                column: "TabelaId");

            migrationBuilder.CreateIndex(
                name: "IX_tipocontrato_TipoOperacaoId",
                schema: "clientes",
                table: "tipocontrato",
                column: "TipoOperacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_tipodocumento_EmpresaId",
                schema: "financeiro",
                table: "tipodocumento",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_unidade_AdministradoraId",
                schema: "empreendimento",
                table: "unidade",
                column: "AdministradoraId");

            migrationBuilder.CreateIndex(
                name: "IX_unidade_ConstrutoraId",
                schema: "empreendimento",
                table: "unidade",
                column: "ConstrutoraId");

            migrationBuilder.CreateIndex(
                name: "IX_unidade_Endereco_EstadoId",
                schema: "empreendimento",
                table: "unidade",
                column: "Endereco_EstadoId");

            migrationBuilder.CreateIndex(
                name: "IX_unidade_Endereco_MunicipioId",
                schema: "empreendimento",
                table: "unidade",
                column: "Endereco_MunicipioId");

            migrationBuilder.CreateIndex(
                name: "IX_unidade_GrupoId",
                schema: "empreendimento",
                table: "unidade",
                column: "GrupoId");

            migrationBuilder.CreateIndex(
                name: "IX_unidade_Legalizacao_CartorioId",
                schema: "empreendimento",
                table: "unidade",
                column: "Legalizacao_CartorioId");

            migrationBuilder.CreateIndex(
                name: "IX_unidade_ModeloPlanoPagamentoId",
                schema: "empreendimento",
                table: "unidade",
                column: "ModeloPlanoPagamentoId");

            migrationBuilder.CreateIndex(
                name: "IX_unidade_SituacaoId",
                schema: "empreendimento",
                table: "unidade",
                column: "SituacaoId");

            migrationBuilder.CreateIndex(
                name: "IX_unidade_TipoId",
                schema: "empreendimento",
                table: "unidade",
                column: "TipoId");

            migrationBuilder.CreateIndex(
                name: "IX_unidade_proprietario_ProprietarioId",
                schema: "empreendimento",
                table: "unidade_proprietario",
                column: "ProprietarioId");

            migrationBuilder.CreateIndex(
                name: "IX_unidade_proprietario_UnidadeId",
                schema: "empreendimento",
                table: "unidade_proprietario",
                column: "UnidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_unidadefoto_UnidadeId",
                schema: "empreendimento",
                table: "unidadefoto",
                column: "UnidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_unidadefoto_UsuarioId",
                schema: "empreendimento",
                table: "unidadefoto",
                column: "UsuarioId");

            migrationBuilder.CreateIndex(
                name: "IX_unidademedida_EmpresaId",
                schema: "almoxarifado",
                table: "unidademedida",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_unidadevicio_UnidadeId",
                schema: "empreendimento",
                table: "unidadevicio",
                column: "UnidadeId");

            migrationBuilder.CreateIndex(
                name: "IX_unidadevicio_VicioId",
                schema: "empreendimento",
                table: "unidadevicio",
                column: "VicioId");

            migrationBuilder.CreateIndex(
                name: "IX_vicio_EmpresaId",
                schema: "empreendimento",
                table: "vicio",
                column: "EmpresaId");

            migrationBuilder.CreateIndex(
                name: "IX_vicio_TipoUnidadeId",
                schema: "empreendimento",
                table: "vicio",
                column: "TipoUnidadeId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "antecipacaoamortizacaoitem",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "antecipacaocomprovante",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "arquivoremessadocumento",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "atendimento",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "composicaoitem",
                schema: "orcamentoobras");

            migrationBuilder.DropTable(
                name: "condicaopagamento",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "confrontanteadicional",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "contacorrentegateway",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "contratocliente",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "contratocorretor",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "contratodigitaldocumento",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "contratodocumento",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "ContratoFornecedorDocumento",
                schema: "projeto");

            migrationBuilder.DropTable(
                name: "ContratoFornecedorObservacao",
                schema: "projeto");

            migrationBuilder.DropTable(
                name: "contratoobservacao",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "contratounidadeadicional",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "contratovistoriafoto",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "despesabaixacomprovante",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "despesaclassificacao",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "despesadocumento",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "empreendimento_proprietario",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "empreendimentodocumento",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "empreendimentofoto",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "empresaarquivo",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "empresagateway",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "ExecucaoDocumento",
                schema: "projeto");

            migrationBuilder.DropTable(
                name: "ExecucaoUnidade",
                schema: "projeto");

            migrationBuilder.DropTable(
                name: "hidrometrounidade",
                schema: "controleagua");

            migrationBuilder.DropTable(
                name: "historicolead",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "historicosituacaocontrato",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "imovel",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "indice",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "inventarioitem",
                schema: "almoxarifado");

            migrationBuilder.DropTable(
                name: "Jazigo");

            migrationBuilder.DropTable(
                name: "ladoadicional",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "log",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "marcacaoagua",
                schema: "controleagua");

            migrationBuilder.DropTable(
                name: "modelocontratodigitalempreendimento",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "modeloorcamentoetapaitem",
                schema: "orcamentoobras");

            migrationBuilder.DropTable(
                name: "movimentacao",
                schema: "almoxarifado");

            migrationBuilder.DropTable(
                name: "orcadoitem",
                schema: "projeto");

            migrationBuilder.DropTable(
                name: "orcamentodocumento",
                schema: "compras");

            migrationBuilder.DropTable(
                name: "orcamentoetapaitem",
                schema: "orcamentoobras");

            migrationBuilder.DropTable(
                name: "orcamentofornecedor",
                schema: "compras");

            migrationBuilder.DropTable(
                name: "orcamentoitem_fornecedor",
                schema: "compras");

            migrationBuilder.DropTable(
                name: "parametro",
                schema: "compras");

            migrationBuilder.DropTable(
                name: "parametrocobranca",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "parametrogatway",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "pedidoclassificacao",
                schema: "compras");

            migrationBuilder.DropTable(
                name: "pedidoitem",
                schema: "compras");

            migrationBuilder.DropTable(
                name: "pedidoxmlarquivo",
                schema: "compras");

            migrationBuilder.DropTable(
                name: "pessoacontato",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "pessoadocumento",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "pessoafamiliar",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "pessoagateway",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "pessoaprefeituracontato",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "pessoaprefeituradocumento",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "pessoaprefeiturafamiliar",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "pessoaprefeituragateway",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "planopagamentounidade",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "produtofornecedor",
                schema: "almoxarifado");

            migrationBuilder.DropTable(
                name: "qualidadeagua",
                schema: "controleagua");

            migrationBuilder.DropTable(
                name: "receitabaixacomprovante",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "receitaclassificacao",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "receitadocumento",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "reguacobrancaetapa",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "requisicaoitem",
                schema: "almoxarifado");

            migrationBuilder.DropTable(
                name: "reservaobservacao",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "retornobancario",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "seguradora_contato",
                schema: "loteamento");

            migrationBuilder.DropTable(
                name: "signatariocontratodigital",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "situacaopedido",
                schema: "compras");

            migrationBuilder.DropTable(
                name: "tabelavalorconsumoaguaitem",
                schema: "controleagua");

            migrationBuilder.DropTable(
                name: "tipogrupo",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "unidade_proprietario",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "unidadefoto",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "unidadevicio",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "antecipacaoamortizacao",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "tipoatendimento",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "insumo",
                schema: "orcamentoobras");

            migrationBuilder.DropTable(
                name: "contratovistoria",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "despesabaixa",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "Execucao",
                schema: "projeto");

            migrationBuilder.DropTable(
                name: "tipoimovel",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "inventario",
                schema: "almoxarifado");

            migrationBuilder.DropTable(
                name: "lote",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "hidrometro",
                schema: "controleagua");

            migrationBuilder.DropTable(
                name: "modelocontratodigital",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "modeloorcamentoetapa",
                schema: "orcamentoobras");

            migrationBuilder.DropTable(
                name: "almoxarifadoitem",
                schema: "almoxarifado");

            migrationBuilder.DropTable(
                name: "tipomovimentacao",
                schema: "almoxarifado");

            migrationBuilder.DropTable(
                name: "tipoorigem",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "orcado",
                schema: "projeto");

            migrationBuilder.DropTable(
                name: "composicao",
                schema: "orcamentoobras");

            migrationBuilder.DropTable(
                name: "orcamentoetapa",
                schema: "orcamentoobras");

            migrationBuilder.DropTable(
                name: "orcamentoitem",
                schema: "compras");

            migrationBuilder.DropTable(
                name: "layoutcobranca",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "parametro",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "situacaopedidoitem",
                schema: "compras");

            migrationBuilder.DropTable(
                name: "grauparentesco",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "pessoaprefeitura",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "receitabaixa",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "reguacobranca",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "requisicao",
                schema: "almoxarifado");

            migrationBuilder.DropTable(
                name: "reserva",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "seguradora",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "contratodigital",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "situacaoemailsignatario",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "tipoassinatura",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "tabelavalorconsumoagua",
                schema: "controleagua");

            migrationBuilder.DropTable(
                name: "vicio",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "tipoantecipacao",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "tipoinsumo",
                schema: "orcamentoobras");

            migrationBuilder.DropTable(
                name: "despesaparcela",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "ContratoFornecedorItem",
                schema: "projeto");

            migrationBuilder.DropTable(
                name: "Medicao",
                schema: "projeto");

            migrationBuilder.DropTable(
                name: "classecomposicao",
                schema: "orcamentoobras");

            migrationBuilder.DropTable(
                name: "tipocomposicao",
                schema: "orcamentoobras");

            migrationBuilder.DropTable(
                name: "orcamentoobras",
                schema: "orcamentoobras");

            migrationBuilder.DropTable(
                name: "produto",
                schema: "almoxarifado");

            migrationBuilder.DropTable(
                name: "centrodecusto",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "contagerencial",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "tipoabastecimentoagua",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "tipocoletalixo",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "tipocondicaomoradia",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "tipoedificacaomoradia",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "tipoenergiamoradia",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "tipoesgotamentosanitario",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "tipomoradia",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "tipomoradianova",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "receitatransacao",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "almoxarifado",
                schema: "almoxarifado");

            migrationBuilder.DropTable(
                name: "pedido",
                schema: "compras");

            migrationBuilder.DropTable(
                name: "lead",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "motivocancelamentoreserva",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "situacaoreserva",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "tiporeserva",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "situacaocontratodigital",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "tipocontratodigital",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "situacaodespesaparcela",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "etapa",
                schema: "projeto");

            migrationBuilder.DropTable(
                name: "ContratoFornecedor",
                schema: "projeto");

            migrationBuilder.DropTable(
                name: "origemdados",
                schema: "orcamentoobras");

            migrationBuilder.DropTable(
                name: "grupoproduto",
                schema: "almoxarifado");

            migrationBuilder.DropTable(
                name: "unidademedida",
                schema: "almoxarifado");

            migrationBuilder.DropTable(
                name: "formapagamento",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "receitaparcela",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "remessa",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "despesa",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "orcamento",
                schema: "compras");

            migrationBuilder.DropTable(
                name: "situacaofrete",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "colunafunil",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "comoleadcontactou",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "comoleadnosencontrou",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "grauinteresse",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "origemlead",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "TipoContratoFornecedor",
                schema: "projeto");

            migrationBuilder.DropTable(
                name: "receita",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "situacaoreceitaparcela",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "tiposervico",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "tiporemessa",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "origemdespesa",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "tipodespesa",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "situacaoorcamento",
                schema: "compras");

            migrationBuilder.DropTable(
                name: "tipoproduto",
                schema: "almoxarifado");

            migrationBuilder.DropTable(
                name: "contrato",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "tipodocumento",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "tiporeceita",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "situacaocontrato",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "tipoaditamento",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "tipocontrato",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "tipocontratoproduto",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "tipoprocessojudicial",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "unidade",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "tipoOperacaocontrato",
                schema: "clientes");

            migrationBuilder.DropTable(
                name: "grupo",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "pessoa",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "situacaounidade",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "tipounidade",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "empreendimento",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "estadocivil",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "nacionalidade",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "profissao",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "sexo",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "tipoescolaridade",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "tipopessoa",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "cartorio",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "planopagamentomodelo",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "tipoempreendimento",
                schema: "empreendimento");

            migrationBuilder.DropTable(
                name: "contacorrente",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "intervaloreajuste",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "tipoAmortizacao",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "tipoOperacaofinanceira",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "tipoanoinicioreajuste",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "tipogateway",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "tipoindice",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "tipointervaloparcelas",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "tipomesreajuste",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "tipoplanopagamento",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "banco",
                schema: "financeiro");

            migrationBuilder.DropTable(
                name: "empresa",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "municipio",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "tipoempresa",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "usuario",
                schema: "geral");

            migrationBuilder.DropTable(
                name: "estado",
                schema: "geral");
        }
    }
}
